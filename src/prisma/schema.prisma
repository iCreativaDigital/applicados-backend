// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo principal de usuarios
model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password_hash      String
  name               String?
  active             Boolean       @default(true)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  email_verified     Boolean       @default(false)
  email_verified_at  DateTime?
  reset_token        String?       // Token para recuperación de contraseña
  reset_token_expires DateTime?    // Fecha de expiración del token
  
  // Relaciones
  accounts           UserAccount[] // Cuentas a las que tiene acceso
  sessions           Session[]     // Sesiones activas
  auth_logs          AuthLog[]     // Logs de autenticación
}

// Cuentas o aplicaciones que usan el sistema
model Account {
  id          String        @id @default(uuid())
  name        String        // Nombre de la cuenta o aplicación
  api_key     String        @unique // Clave API para identificar la aplicación
  active      Boolean       @default(true)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  
  // Relaciones
  user_accounts UserAccount[] // Usuarios con acceso a esta cuenta
}

// Relación entre usuarios y cuentas
model UserAccount {
  id         String   @id @default(uuid())
  user_id    String
  account_id String
  created_at DateTime @default(now())
  created_by String?  // ID del usuario que creó la relación
  
  // Relaciones
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account    Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, account_id]) // Un usuario no puede estar asociado a la misma cuenta más de una vez
  @@index([user_id])
  @@index([account_id])
}

// Sesiones activas
model Session {
  id            String   @id @default(uuid())
  user_id       String
  token         String   @unique // Token de sesión (JWT)
  refresh_token String?  @unique // Token de refresco (opcional)
  ip_address    String?  // Dirección IP desde donde se inició sesión
  user_agent    String?  // Navegador/dispositivo usado
  expires_at    DateTime // Fecha de expiración
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  revoked       Boolean  @default(false) // Si la sesión ha sido revocada
  revoked_at    DateTime? // Cuándo fue revocada
  
  // Relaciones
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
}

// Logs de autenticación
model AuthLog {
  id          String   @id @default(uuid())
  user_id     String?  // Puede ser nulo si el intento de login falló
  event_type  AuthEventType // Tipo de evento (login, logout, etc.)
  status      AuthEventStatus // Éxito o fracaso
  ip_address  String?  // Dirección IP
  user_agent  String?  // Navegador/dispositivo
  details     String?  @db.Text // Detalles adicionales (JSON)
  created_at  DateTime @default(now())
  
  // Relaciones
  user        User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  
  @@index([user_id])
  @@index([event_type])
  @@index([status])
  @@index([created_at])
}

// Verificación de email
model EmailVerification {
  id         String   @id @default(uuid())
  email      String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  
  @@index([email])
  @@index([token])
}

// Enumeraciones
enum AuthEventType {
  REGISTER
  LOGIN
  LOGOUT
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TOKEN_REFRESH
  ACCOUNT_LOCK
  ACCOUNT_UNLOCK
}

enum AuthEventStatus {
  SUCCESS
  FAILURE
}