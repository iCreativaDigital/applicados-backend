
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AppUser
 * 
 */
export type AppUser = $Result.DefaultSelection<Prisma.$AppUserPayload>
/**
 * Model ApiKey
 * 
 */
export type ApiKey = $Result.DefaultSelection<Prisma.$ApiKeyPayload>
/**
 * Model AppSession
 * 
 */
export type AppSession = $Result.DefaultSelection<Prisma.$AppSessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model UserAccount
 * 
 */
export type UserAccount = $Result.DefaultSelection<Prisma.$UserAccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model AuthLog
 * 
 */
export type AuthLog = $Result.DefaultSelection<Prisma.$AuthLogPayload>
/**
 * Model EmailVerification
 * 
 */
export type EmailVerification = $Result.DefaultSelection<Prisma.$EmailVerificationPayload>
/**
 * Model PasswordReset
 * 
 */
export type PasswordReset = $Result.DefaultSelection<Prisma.$PasswordResetPayload>
/**
 * Model AuthEvent
 * 
 */
export type AuthEvent = $Result.DefaultSelection<Prisma.$AuthEventPayload>
/**
 * Model TestType
 * 
 */
export type TestType = $Result.DefaultSelection<Prisma.$TestTypePayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model SubjectDetail
 * 
 */
export type SubjectDetail = $Result.DefaultSelection<Prisma.$SubjectDetailPayload>
/**
 * Model SubjectLevel
 * 
 */
export type SubjectLevel = $Result.DefaultSelection<Prisma.$SubjectLevelPayload>
/**
 * Model TestSubject
 * 
 */
export type TestSubject = $Result.DefaultSelection<Prisma.$TestSubjectPayload>
/**
 * Model GlossaryCategory
 * 
 */
export type GlossaryCategory = $Result.DefaultSelection<Prisma.$GlossaryCategoryPayload>
/**
 * Model GlossaryTerm
 * 
 */
export type GlossaryTerm = $Result.DefaultSelection<Prisma.$GlossaryTermPayload>
/**
 * Model Questionnaire
 * 
 */
export type Questionnaire = $Result.DefaultSelection<Prisma.$QuestionnairePayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model AnswerOption
 * 
 */
export type AnswerOption = $Result.DefaultSelection<Prisma.$AnswerOptionPayload>
/**
 * Model UserQuestionnaireAttempt
 * 
 */
export type UserQuestionnaireAttempt = $Result.DefaultSelection<Prisma.$UserQuestionnaireAttemptPayload>
/**
 * Model UserQuestionAnswer
 * 
 */
export type UserQuestionAnswer = $Result.DefaultSelection<Prisma.$UserQuestionAnswerPayload>
/**
 * Model UserTestSelection
 * 
 */
export type UserTestSelection = $Result.DefaultSelection<Prisma.$UserTestSelectionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AuthEventType: {
  REGISTER: 'REGISTER',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PASSWORD_RESET_REQUEST: 'PASSWORD_RESET_REQUEST',
  PASSWORD_RESET: 'PASSWORD_RESET',
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  TOKEN_REFRESH: 'TOKEN_REFRESH',
  ACCOUNT_LOCK: 'ACCOUNT_LOCK',
  ACCOUNT_UNLOCK: 'ACCOUNT_UNLOCK'
};

export type AuthEventType = (typeof AuthEventType)[keyof typeof AuthEventType]


export const AuthEventStatus: {
  SUCCESS: 'SUCCESS',
  FAILURE: 'FAILURE'
};

export type AuthEventStatus = (typeof AuthEventStatus)[keyof typeof AuthEventStatus]


export const QuestionType: {
  MULTIPLE_CHOICE_SINGLE: 'MULTIPLE_CHOICE_SINGLE',
  MULTIPLE_CHOICE_MULTIPLE: 'MULTIPLE_CHOICE_MULTIPLE',
  TRUE_FALSE: 'TRUE_FALSE'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]


export const AttemptStatus: {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  PASSED: 'PASSED',
  FAILED: 'FAILED'
};

export type AttemptStatus = (typeof AttemptStatus)[keyof typeof AttemptStatus]

}

export type AuthEventType = $Enums.AuthEventType

export const AuthEventType: typeof $Enums.AuthEventType

export type AuthEventStatus = $Enums.AuthEventStatus

export const AuthEventStatus: typeof $Enums.AuthEventStatus

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

export type AttemptStatus = $Enums.AttemptStatus

export const AttemptStatus: typeof $Enums.AttemptStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AppUsers
 * const appUsers = await prisma.appUser.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AppUsers
   * const appUsers = await prisma.appUser.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.appUser`: Exposes CRUD operations for the **AppUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppUsers
    * const appUsers = await prisma.appUser.findMany()
    * ```
    */
  get appUser(): Prisma.AppUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appSession`: Exposes CRUD operations for the **AppSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppSessions
    * const appSessions = await prisma.appSession.findMany()
    * ```
    */
  get appSession(): Prisma.AppSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAccount`: Exposes CRUD operations for the **UserAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAccounts
    * const userAccounts = await prisma.userAccount.findMany()
    * ```
    */
  get userAccount(): Prisma.UserAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authLog`: Exposes CRUD operations for the **AuthLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthLogs
    * const authLogs = await prisma.authLog.findMany()
    * ```
    */
  get authLog(): Prisma.AuthLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailVerification`: Exposes CRUD operations for the **EmailVerification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailVerifications
    * const emailVerifications = await prisma.emailVerification.findMany()
    * ```
    */
  get emailVerification(): Prisma.EmailVerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordReset`: Exposes CRUD operations for the **PasswordReset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordReset.findMany()
    * ```
    */
  get passwordReset(): Prisma.PasswordResetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authEvent`: Exposes CRUD operations for the **AuthEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuthEvents
    * const authEvents = await prisma.authEvent.findMany()
    * ```
    */
  get authEvent(): Prisma.AuthEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testType`: Exposes CRUD operations for the **TestType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestTypes
    * const testTypes = await prisma.testType.findMany()
    * ```
    */
  get testType(): Prisma.TestTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subjectDetail`: Exposes CRUD operations for the **SubjectDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubjectDetails
    * const subjectDetails = await prisma.subjectDetail.findMany()
    * ```
    */
  get subjectDetail(): Prisma.SubjectDetailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subjectLevel`: Exposes CRUD operations for the **SubjectLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubjectLevels
    * const subjectLevels = await prisma.subjectLevel.findMany()
    * ```
    */
  get subjectLevel(): Prisma.SubjectLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testSubject`: Exposes CRUD operations for the **TestSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestSubjects
    * const testSubjects = await prisma.testSubject.findMany()
    * ```
    */
  get testSubject(): Prisma.TestSubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.glossaryCategory`: Exposes CRUD operations for the **GlossaryCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlossaryCategories
    * const glossaryCategories = await prisma.glossaryCategory.findMany()
    * ```
    */
  get glossaryCategory(): Prisma.GlossaryCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.glossaryTerm`: Exposes CRUD operations for the **GlossaryTerm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlossaryTerms
    * const glossaryTerms = await prisma.glossaryTerm.findMany()
    * ```
    */
  get glossaryTerm(): Prisma.GlossaryTermDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionnaire`: Exposes CRUD operations for the **Questionnaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questionnaires
    * const questionnaires = await prisma.questionnaire.findMany()
    * ```
    */
  get questionnaire(): Prisma.QuestionnaireDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.answerOption`: Exposes CRUD operations for the **AnswerOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnswerOptions
    * const answerOptions = await prisma.answerOption.findMany()
    * ```
    */
  get answerOption(): Prisma.AnswerOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userQuestionnaireAttempt`: Exposes CRUD operations for the **UserQuestionnaireAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserQuestionnaireAttempts
    * const userQuestionnaireAttempts = await prisma.userQuestionnaireAttempt.findMany()
    * ```
    */
  get userQuestionnaireAttempt(): Prisma.UserQuestionnaireAttemptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userQuestionAnswer`: Exposes CRUD operations for the **UserQuestionAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserQuestionAnswers
    * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany()
    * ```
    */
  get userQuestionAnswer(): Prisma.UserQuestionAnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userTestSelection`: Exposes CRUD operations for the **UserTestSelection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTestSelections
    * const userTestSelections = await prisma.userTestSelection.findMany()
    * ```
    */
  get userTestSelection(): Prisma.UserTestSelectionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AppUser: 'AppUser',
    ApiKey: 'ApiKey',
    AppSession: 'AppSession',
    User: 'User',
    Account: 'Account',
    UserAccount: 'UserAccount',
    Session: 'Session',
    AuthLog: 'AuthLog',
    EmailVerification: 'EmailVerification',
    PasswordReset: 'PasswordReset',
    AuthEvent: 'AuthEvent',
    TestType: 'TestType',
    Subject: 'Subject',
    SubjectDetail: 'SubjectDetail',
    SubjectLevel: 'SubjectLevel',
    TestSubject: 'TestSubject',
    GlossaryCategory: 'GlossaryCategory',
    GlossaryTerm: 'GlossaryTerm',
    Questionnaire: 'Questionnaire',
    Question: 'Question',
    AnswerOption: 'AnswerOption',
    UserQuestionnaireAttempt: 'UserQuestionnaireAttempt',
    UserQuestionAnswer: 'UserQuestionAnswer',
    UserTestSelection: 'UserTestSelection'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "appUser" | "apiKey" | "appSession" | "user" | "account" | "userAccount" | "session" | "authLog" | "emailVerification" | "passwordReset" | "authEvent" | "testType" | "subject" | "subjectDetail" | "subjectLevel" | "testSubject" | "glossaryCategory" | "glossaryTerm" | "questionnaire" | "question" | "answerOption" | "userQuestionnaireAttempt" | "userQuestionAnswer" | "userTestSelection"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      AppUser: {
        payload: Prisma.$AppUserPayload<ExtArgs>
        fields: Prisma.AppUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          findFirst: {
            args: Prisma.AppUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          findMany: {
            args: Prisma.AppUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>[]
          }
          create: {
            args: Prisma.AppUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          createMany: {
            args: Prisma.AppUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AppUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          update: {
            args: Prisma.AppUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          deleteMany: {
            args: Prisma.AppUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppUserPayload>
          }
          aggregate: {
            args: Prisma.AppUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppUser>
          }
          groupBy: {
            args: Prisma.AppUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppUserCountArgs<ExtArgs>
            result: $Utils.Optional<AppUserCountAggregateOutputType> | number
          }
        }
      }
      ApiKey: {
        payload: Prisma.$ApiKeyPayload<ExtArgs>
        fields: Prisma.ApiKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findFirst: {
            args: Prisma.ApiKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findMany: {
            args: Prisma.ApiKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          create: {
            args: Prisma.ApiKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          createMany: {
            args: Prisma.ApiKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ApiKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          update: {
            args: Prisma.ApiKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          deleteMany: {
            args: Prisma.ApiKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApiKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApiKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          aggregate: {
            args: Prisma.ApiKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiKey>
          }
          groupBy: {
            args: Prisma.ApiKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiKeyCountArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyCountAggregateOutputType> | number
          }
        }
      }
      AppSession: {
        payload: Prisma.$AppSessionPayload<ExtArgs>
        fields: Prisma.AppSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload>
          }
          findFirst: {
            args: Prisma.AppSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload>
          }
          findMany: {
            args: Prisma.AppSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload>[]
          }
          create: {
            args: Prisma.AppSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload>
          }
          createMany: {
            args: Prisma.AppSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AppSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload>
          }
          update: {
            args: Prisma.AppSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload>
          }
          deleteMany: {
            args: Prisma.AppSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppSessionPayload>
          }
          aggregate: {
            args: Prisma.AppSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppSession>
          }
          groupBy: {
            args: Prisma.AppSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppSessionCountArgs<ExtArgs>
            result: $Utils.Optional<AppSessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      UserAccount: {
        payload: Prisma.$UserAccountPayload<ExtArgs>
        fields: Prisma.UserAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload>
          }
          findFirst: {
            args: Prisma.UserAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload>
          }
          findMany: {
            args: Prisma.UserAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload>[]
          }
          create: {
            args: Prisma.UserAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload>
          }
          createMany: {
            args: Prisma.UserAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload>
          }
          update: {
            args: Prisma.UserAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload>
          }
          deleteMany: {
            args: Prisma.UserAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAccountPayload>
          }
          aggregate: {
            args: Prisma.UserAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAccount>
          }
          groupBy: {
            args: Prisma.UserAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAccountCountArgs<ExtArgs>
            result: $Utils.Optional<UserAccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      AuthLog: {
        payload: Prisma.$AuthLogPayload<ExtArgs>
        fields: Prisma.AuthLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          findFirst: {
            args: Prisma.AuthLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          findMany: {
            args: Prisma.AuthLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>[]
          }
          create: {
            args: Prisma.AuthLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          createMany: {
            args: Prisma.AuthLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuthLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          update: {
            args: Prisma.AuthLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          deleteMany: {
            args: Prisma.AuthLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuthLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthLogPayload>
          }
          aggregate: {
            args: Prisma.AuthLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthLog>
          }
          groupBy: {
            args: Prisma.AuthLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuthLogCountAggregateOutputType> | number
          }
        }
      }
      EmailVerification: {
        payload: Prisma.$EmailVerificationPayload<ExtArgs>
        fields: Prisma.EmailVerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailVerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailVerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          findFirst: {
            args: Prisma.EmailVerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailVerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          findMany: {
            args: Prisma.EmailVerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>[]
          }
          create: {
            args: Prisma.EmailVerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          createMany: {
            args: Prisma.EmailVerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmailVerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          update: {
            args: Prisma.EmailVerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          deleteMany: {
            args: Prisma.EmailVerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailVerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmailVerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          aggregate: {
            args: Prisma.EmailVerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailVerification>
          }
          groupBy: {
            args: Prisma.EmailVerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailVerificationCountArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationCountAggregateOutputType> | number
          }
        }
      }
      PasswordReset: {
        payload: Prisma.$PasswordResetPayload<ExtArgs>
        fields: Prisma.PasswordResetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findMany: {
            args: Prisma.PasswordResetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          create: {
            args: Prisma.PasswordResetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          createMany: {
            args: Prisma.PasswordResetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PasswordResetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          update: {
            args: Prisma.PasswordResetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PasswordResetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordReset>
          }
          groupBy: {
            args: Prisma.PasswordResetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetCountAggregateOutputType> | number
          }
        }
      }
      AuthEvent: {
        payload: Prisma.$AuthEventPayload<ExtArgs>
        fields: Prisma.AuthEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload>
          }
          findFirst: {
            args: Prisma.AuthEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload>
          }
          findMany: {
            args: Prisma.AuthEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload>[]
          }
          create: {
            args: Prisma.AuthEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload>
          }
          createMany: {
            args: Prisma.AuthEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuthEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload>
          }
          update: {
            args: Prisma.AuthEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload>
          }
          deleteMany: {
            args: Prisma.AuthEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuthEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthEventPayload>
          }
          aggregate: {
            args: Prisma.AuthEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthEvent>
          }
          groupBy: {
            args: Prisma.AuthEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthEventCountArgs<ExtArgs>
            result: $Utils.Optional<AuthEventCountAggregateOutputType> | number
          }
        }
      }
      TestType: {
        payload: Prisma.$TestTypePayload<ExtArgs>
        fields: Prisma.TestTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          findFirst: {
            args: Prisma.TestTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          findMany: {
            args: Prisma.TestTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>[]
          }
          create: {
            args: Prisma.TestTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          createMany: {
            args: Prisma.TestTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TestTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          update: {
            args: Prisma.TestTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          deleteMany: {
            args: Prisma.TestTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          aggregate: {
            args: Prisma.TestTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestType>
          }
          groupBy: {
            args: Prisma.TestTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestTypeCountArgs<ExtArgs>
            result: $Utils.Optional<TestTypeCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      SubjectDetail: {
        payload: Prisma.$SubjectDetailPayload<ExtArgs>
        fields: Prisma.SubjectDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectDetailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectDetailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload>
          }
          findFirst: {
            args: Prisma.SubjectDetailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectDetailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload>
          }
          findMany: {
            args: Prisma.SubjectDetailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload>[]
          }
          create: {
            args: Prisma.SubjectDetailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload>
          }
          createMany: {
            args: Prisma.SubjectDetailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubjectDetailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload>
          }
          update: {
            args: Prisma.SubjectDetailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDetailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectDetailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectDetailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectDetailPayload>
          }
          aggregate: {
            args: Prisma.SubjectDetailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubjectDetail>
          }
          groupBy: {
            args: Prisma.SubjectDetailGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectDetailCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectDetailCountAggregateOutputType> | number
          }
        }
      }
      SubjectLevel: {
        payload: Prisma.$SubjectLevelPayload<ExtArgs>
        fields: Prisma.SubjectLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload>
          }
          findFirst: {
            args: Prisma.SubjectLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload>
          }
          findMany: {
            args: Prisma.SubjectLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload>[]
          }
          create: {
            args: Prisma.SubjectLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload>
          }
          createMany: {
            args: Prisma.SubjectLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubjectLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload>
          }
          update: {
            args: Prisma.SubjectLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload>
          }
          deleteMany: {
            args: Prisma.SubjectLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubjectLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectLevelPayload>
          }
          aggregate: {
            args: Prisma.SubjectLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubjectLevel>
          }
          groupBy: {
            args: Prisma.SubjectLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectLevelCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectLevelCountAggregateOutputType> | number
          }
        }
      }
      TestSubject: {
        payload: Prisma.$TestSubjectPayload<ExtArgs>
        fields: Prisma.TestSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload>
          }
          findFirst: {
            args: Prisma.TestSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload>
          }
          findMany: {
            args: Prisma.TestSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload>[]
          }
          create: {
            args: Prisma.TestSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload>
          }
          createMany: {
            args: Prisma.TestSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TestSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload>
          }
          update: {
            args: Prisma.TestSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload>
          }
          deleteMany: {
            args: Prisma.TestSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestSubjectPayload>
          }
          aggregate: {
            args: Prisma.TestSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestSubject>
          }
          groupBy: {
            args: Prisma.TestSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<TestSubjectCountAggregateOutputType> | number
          }
        }
      }
      GlossaryCategory: {
        payload: Prisma.$GlossaryCategoryPayload<ExtArgs>
        fields: Prisma.GlossaryCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlossaryCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlossaryCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload>
          }
          findFirst: {
            args: Prisma.GlossaryCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlossaryCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload>
          }
          findMany: {
            args: Prisma.GlossaryCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload>[]
          }
          create: {
            args: Prisma.GlossaryCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload>
          }
          createMany: {
            args: Prisma.GlossaryCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GlossaryCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload>
          }
          update: {
            args: Prisma.GlossaryCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload>
          }
          deleteMany: {
            args: Prisma.GlossaryCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlossaryCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GlossaryCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryCategoryPayload>
          }
          aggregate: {
            args: Prisma.GlossaryCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlossaryCategory>
          }
          groupBy: {
            args: Prisma.GlossaryCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlossaryCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlossaryCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<GlossaryCategoryCountAggregateOutputType> | number
          }
        }
      }
      GlossaryTerm: {
        payload: Prisma.$GlossaryTermPayload<ExtArgs>
        fields: Prisma.GlossaryTermFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlossaryTermFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlossaryTermFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          findFirst: {
            args: Prisma.GlossaryTermFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlossaryTermFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          findMany: {
            args: Prisma.GlossaryTermFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>[]
          }
          create: {
            args: Prisma.GlossaryTermCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          createMany: {
            args: Prisma.GlossaryTermCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GlossaryTermDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          update: {
            args: Prisma.GlossaryTermUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          deleteMany: {
            args: Prisma.GlossaryTermDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlossaryTermUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GlossaryTermUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlossaryTermPayload>
          }
          aggregate: {
            args: Prisma.GlossaryTermAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlossaryTerm>
          }
          groupBy: {
            args: Prisma.GlossaryTermGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlossaryTermGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlossaryTermCountArgs<ExtArgs>
            result: $Utils.Optional<GlossaryTermCountAggregateOutputType> | number
          }
        }
      }
      Questionnaire: {
        payload: Prisma.$QuestionnairePayload<ExtArgs>
        fields: Prisma.QuestionnaireFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionnaireFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionnaireFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload>
          }
          findFirst: {
            args: Prisma.QuestionnaireFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionnaireFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload>
          }
          findMany: {
            args: Prisma.QuestionnaireFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload>[]
          }
          create: {
            args: Prisma.QuestionnaireCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload>
          }
          createMany: {
            args: Prisma.QuestionnaireCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.QuestionnaireDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload>
          }
          update: {
            args: Prisma.QuestionnaireUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload>
          }
          deleteMany: {
            args: Prisma.QuestionnaireDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionnaireUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionnaireUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnairePayload>
          }
          aggregate: {
            args: Prisma.QuestionnaireAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionnaire>
          }
          groupBy: {
            args: Prisma.QuestionnaireGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionnaireGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionnaireCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionnaireCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      AnswerOption: {
        payload: Prisma.$AnswerOptionPayload<ExtArgs>
        fields: Prisma.AnswerOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnswerOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnswerOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload>
          }
          findFirst: {
            args: Prisma.AnswerOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnswerOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload>
          }
          findMany: {
            args: Prisma.AnswerOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload>[]
          }
          create: {
            args: Prisma.AnswerOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload>
          }
          createMany: {
            args: Prisma.AnswerOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AnswerOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload>
          }
          update: {
            args: Prisma.AnswerOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload>
          }
          deleteMany: {
            args: Prisma.AnswerOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnswerOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnswerOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerOptionPayload>
          }
          aggregate: {
            args: Prisma.AnswerOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnswerOption>
          }
          groupBy: {
            args: Prisma.AnswerOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnswerOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnswerOptionCountArgs<ExtArgs>
            result: $Utils.Optional<AnswerOptionCountAggregateOutputType> | number
          }
        }
      }
      UserQuestionnaireAttempt: {
        payload: Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>
        fields: Prisma.UserQuestionnaireAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserQuestionnaireAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserQuestionnaireAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload>
          }
          findFirst: {
            args: Prisma.UserQuestionnaireAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserQuestionnaireAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload>
          }
          findMany: {
            args: Prisma.UserQuestionnaireAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload>[]
          }
          create: {
            args: Prisma.UserQuestionnaireAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload>
          }
          createMany: {
            args: Prisma.UserQuestionnaireAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserQuestionnaireAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload>
          }
          update: {
            args: Prisma.UserQuestionnaireAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload>
          }
          deleteMany: {
            args: Prisma.UserQuestionnaireAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserQuestionnaireAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserQuestionnaireAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionnaireAttemptPayload>
          }
          aggregate: {
            args: Prisma.UserQuestionnaireAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserQuestionnaireAttempt>
          }
          groupBy: {
            args: Prisma.UserQuestionnaireAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserQuestionnaireAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserQuestionnaireAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<UserQuestionnaireAttemptCountAggregateOutputType> | number
          }
        }
      }
      UserQuestionAnswer: {
        payload: Prisma.$UserQuestionAnswerPayload<ExtArgs>
        fields: Prisma.UserQuestionAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserQuestionAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          findFirst: {
            args: Prisma.UserQuestionAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          findMany: {
            args: Prisma.UserQuestionAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>[]
          }
          create: {
            args: Prisma.UserQuestionAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          createMany: {
            args: Prisma.UserQuestionAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserQuestionAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          update: {
            args: Prisma.UserQuestionAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          deleteMany: {
            args: Prisma.UserQuestionAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserQuestionAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserQuestionAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          aggregate: {
            args: Prisma.UserQuestionAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserQuestionAnswer>
          }
          groupBy: {
            args: Prisma.UserQuestionAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserQuestionAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserQuestionAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<UserQuestionAnswerCountAggregateOutputType> | number
          }
        }
      }
      UserTestSelection: {
        payload: Prisma.$UserTestSelectionPayload<ExtArgs>
        fields: Prisma.UserTestSelectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTestSelectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTestSelectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload>
          }
          findFirst: {
            args: Prisma.UserTestSelectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTestSelectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload>
          }
          findMany: {
            args: Prisma.UserTestSelectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload>[]
          }
          create: {
            args: Prisma.UserTestSelectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload>
          }
          createMany: {
            args: Prisma.UserTestSelectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserTestSelectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload>
          }
          update: {
            args: Prisma.UserTestSelectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload>
          }
          deleteMany: {
            args: Prisma.UserTestSelectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserTestSelectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserTestSelectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTestSelectionPayload>
          }
          aggregate: {
            args: Prisma.UserTestSelectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserTestSelection>
          }
          groupBy: {
            args: Prisma.UserTestSelectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserTestSelectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTestSelectionCountArgs<ExtArgs>
            result: $Utils.Optional<UserTestSelectionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    appUser?: AppUserOmit
    apiKey?: ApiKeyOmit
    appSession?: AppSessionOmit
    user?: UserOmit
    account?: AccountOmit
    userAccount?: UserAccountOmit
    session?: SessionOmit
    authLog?: AuthLogOmit
    emailVerification?: EmailVerificationOmit
    passwordReset?: PasswordResetOmit
    authEvent?: AuthEventOmit
    testType?: TestTypeOmit
    subject?: SubjectOmit
    subjectDetail?: SubjectDetailOmit
    subjectLevel?: SubjectLevelOmit
    testSubject?: TestSubjectOmit
    glossaryCategory?: GlossaryCategoryOmit
    glossaryTerm?: GlossaryTermOmit
    questionnaire?: QuestionnaireOmit
    question?: QuestionOmit
    answerOption?: AnswerOptionOmit
    userQuestionnaireAttempt?: UserQuestionnaireAttemptOmit
    userQuestionAnswer?: UserQuestionAnswerOmit
    userTestSelection?: UserTestSelectionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AppUserCountOutputType
   */

  export type AppUserCountOutputType = {
    api_keys: number
    app_sessions: number
    auth_events: number
  }

  export type AppUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    api_keys?: boolean | AppUserCountOutputTypeCountApi_keysArgs
    app_sessions?: boolean | AppUserCountOutputTypeCountApp_sessionsArgs
    auth_events?: boolean | AppUserCountOutputTypeCountAuth_eventsArgs
  }

  // Custom InputTypes
  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUserCountOutputType
     */
    select?: AppUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeCountApi_keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
  }

  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeCountApp_sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppSessionWhereInput
  }

  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeCountAuth_eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthEventWhereInput
  }


  /**
   * Count Type ApiKeyCountOutputType
   */

  export type ApiKeyCountOutputType = {
    users: number
    test_types: number
    subjects: number
  }

  export type ApiKeyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ApiKeyCountOutputTypeCountUsersArgs
    test_types?: boolean | ApiKeyCountOutputTypeCountTest_typesArgs
    subjects?: boolean | ApiKeyCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes
  /**
   * ApiKeyCountOutputType without action
   */
  export type ApiKeyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyCountOutputType
     */
    select?: ApiKeyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApiKeyCountOutputType without action
   */
  export type ApiKeyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ApiKeyCountOutputType without action
   */
  export type ApiKeyCountOutputTypeCountTest_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestTypeWhereInput
  }

  /**
   * ApiKeyCountOutputType without action
   */
  export type ApiKeyCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    auth_logs: number
    questionnaireAttempts: number
    questionAnswers: number
    testSelections: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    auth_logs?: boolean | UserCountOutputTypeCountAuth_logsArgs
    questionnaireAttempts?: boolean | UserCountOutputTypeCountQuestionnaireAttemptsArgs
    questionAnswers?: boolean | UserCountOutputTypeCountQuestionAnswersArgs
    testSelections?: boolean | UserCountOutputTypeCountTestSelectionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuth_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionnaireAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionnaireAttemptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTestSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTestSelectionWhereInput
  }


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    user_accounts: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_accounts?: boolean | AccountCountOutputTypeCountUser_accountsArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountUser_accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAccountWhereInput
  }


  /**
   * Count Type TestTypeCountOutputType
   */

  export type TestTypeCountOutputType = {
    testSubjects: number
    UserTestSelection: number
  }

  export type TestTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testSubjects?: boolean | TestTypeCountOutputTypeCountTestSubjectsArgs
    UserTestSelection?: boolean | TestTypeCountOutputTypeCountUserTestSelectionArgs
  }

  // Custom InputTypes
  /**
   * TestTypeCountOutputType without action
   */
  export type TestTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestTypeCountOutputType
     */
    select?: TestTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestTypeCountOutputType without action
   */
  export type TestTypeCountOutputTypeCountTestSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestSubjectWhereInput
  }

  /**
   * TestTypeCountOutputType without action
   */
  export type TestTypeCountOutputTypeCountUserTestSelectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTestSelectionWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    subject_levels: number
    testSubjects: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject_levels?: boolean | SubjectCountOutputTypeCountSubject_levelsArgs
    testSubjects?: boolean | SubjectCountOutputTypeCountTestSubjectsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountSubject_levelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectLevelWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountTestSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestSubjectWhereInput
  }


  /**
   * Count Type SubjectLevelCountOutputType
   */

  export type SubjectLevelCountOutputType = {
    questionnaires: number
  }

  export type SubjectLevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionnaires?: boolean | SubjectLevelCountOutputTypeCountQuestionnairesArgs
  }

  // Custom InputTypes
  /**
   * SubjectLevelCountOutputType without action
   */
  export type SubjectLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevelCountOutputType
     */
    select?: SubjectLevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectLevelCountOutputType without action
   */
  export type SubjectLevelCountOutputTypeCountQuestionnairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionnaireWhereInput
  }


  /**
   * Count Type GlossaryCategoryCountOutputType
   */

  export type GlossaryCategoryCountOutputType = {
    terms: number
  }

  export type GlossaryCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    terms?: boolean | GlossaryCategoryCountOutputTypeCountTermsArgs
  }

  // Custom InputTypes
  /**
   * GlossaryCategoryCountOutputType without action
   */
  export type GlossaryCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategoryCountOutputType
     */
    select?: GlossaryCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GlossaryCategoryCountOutputType without action
   */
  export type GlossaryCategoryCountOutputTypeCountTermsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlossaryTermWhereInput
  }


  /**
   * Count Type QuestionnaireCountOutputType
   */

  export type QuestionnaireCountOutputType = {
    questions: number
    userAttempts: number
  }

  export type QuestionnaireCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuestionnaireCountOutputTypeCountQuestionsArgs
    userAttempts?: boolean | QuestionnaireCountOutputTypeCountUserAttemptsArgs
  }

  // Custom InputTypes
  /**
   * QuestionnaireCountOutputType without action
   */
  export type QuestionnaireCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireCountOutputType
     */
    select?: QuestionnaireCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionnaireCountOutputType without action
   */
  export type QuestionnaireCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * QuestionnaireCountOutputType without action
   */
  export type QuestionnaireCountOutputTypeCountUserAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionnaireAttemptWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    answerOptions: number
    userAnswers: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answerOptions?: boolean | QuestionCountOutputTypeCountAnswerOptionsArgs
    userAnswers?: boolean | QuestionCountOutputTypeCountUserAnswersArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountAnswerOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerOptionWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountUserAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }


  /**
   * Count Type AnswerOptionCountOutputType
   */

  export type AnswerOptionCountOutputType = {
    userAnswers: number
  }

  export type AnswerOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAnswers?: boolean | AnswerOptionCountOutputTypeCountUserAnswersArgs
  }

  // Custom InputTypes
  /**
   * AnswerOptionCountOutputType without action
   */
  export type AnswerOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOptionCountOutputType
     */
    select?: AnswerOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AnswerOptionCountOutputType without action
   */
  export type AnswerOptionCountOutputTypeCountUserAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }


  /**
   * Count Type UserQuestionnaireAttemptCountOutputType
   */

  export type UserQuestionnaireAttemptCountOutputType = {
    answers: number
  }

  export type UserQuestionnaireAttemptCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answers?: boolean | UserQuestionnaireAttemptCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * UserQuestionnaireAttemptCountOutputType without action
   */
  export type UserQuestionnaireAttemptCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttemptCountOutputType
     */
    select?: UserQuestionnaireAttemptCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserQuestionnaireAttemptCountOutputType without action
   */
  export type UserQuestionnaireAttemptCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AppUser
   */

  export type AggregateAppUser = {
    _count: AppUserCountAggregateOutputType | null
    _min: AppUserMinAggregateOutputType | null
    _max: AppUserMaxAggregateOutputType | null
  }

  export type AppUserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password_hash: string | null
    name: string | null
    company_name: string | null
    phone: string | null
    website: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    email_verified: boolean | null
    email_verified_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
  }

  export type AppUserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password_hash: string | null
    name: string | null
    company_name: string | null
    phone: string | null
    website: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    email_verified: boolean | null
    email_verified_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
  }

  export type AppUserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password_hash: number
    name: number
    company_name: number
    phone: number
    website: number
    active: number
    created_at: number
    updated_at: number
    email_verified: number
    email_verified_at: number
    reset_token: number
    reset_token_expires: number
    _all: number
  }


  export type AppUserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password_hash?: true
    name?: true
    company_name?: true
    phone?: true
    website?: true
    active?: true
    created_at?: true
    updated_at?: true
    email_verified?: true
    email_verified_at?: true
    reset_token?: true
    reset_token_expires?: true
  }

  export type AppUserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password_hash?: true
    name?: true
    company_name?: true
    phone?: true
    website?: true
    active?: true
    created_at?: true
    updated_at?: true
    email_verified?: true
    email_verified_at?: true
    reset_token?: true
    reset_token_expires?: true
  }

  export type AppUserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password_hash?: true
    name?: true
    company_name?: true
    phone?: true
    website?: true
    active?: true
    created_at?: true
    updated_at?: true
    email_verified?: true
    email_verified_at?: true
    reset_token?: true
    reset_token_expires?: true
    _all?: true
  }

  export type AppUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppUser to aggregate.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppUsers
    **/
    _count?: true | AppUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppUserMaxAggregateInputType
  }

  export type GetAppUserAggregateType<T extends AppUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAppUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppUser[P]>
      : GetScalarType<T[P], AggregateAppUser[P]>
  }




  export type AppUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppUserWhereInput
    orderBy?: AppUserOrderByWithAggregationInput | AppUserOrderByWithAggregationInput[]
    by: AppUserScalarFieldEnum[] | AppUserScalarFieldEnum
    having?: AppUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppUserCountAggregateInputType | true
    _min?: AppUserMinAggregateInputType
    _max?: AppUserMaxAggregateInputType
  }

  export type AppUserGroupByOutputType = {
    id: string
    email: string
    username: string
    password_hash: string
    name: string | null
    company_name: string | null
    phone: string | null
    website: string | null
    active: boolean
    created_at: Date
    updated_at: Date
    email_verified: boolean
    email_verified_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
    _count: AppUserCountAggregateOutputType | null
    _min: AppUserMinAggregateOutputType | null
    _max: AppUserMaxAggregateOutputType | null
  }

  type GetAppUserGroupByPayload<T extends AppUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppUserGroupByOutputType[P]>
            : GetScalarType<T[P], AppUserGroupByOutputType[P]>
        }
      >
    >


  export type AppUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password_hash?: boolean
    name?: boolean
    company_name?: boolean
    phone?: boolean
    website?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    email_verified?: boolean
    email_verified_at?: boolean
    reset_token?: boolean
    reset_token_expires?: boolean
    api_keys?: boolean | AppUser$api_keysArgs<ExtArgs>
    app_sessions?: boolean | AppUser$app_sessionsArgs<ExtArgs>
    password_resets?: boolean | AppUser$password_resetsArgs<ExtArgs>
    auth_events?: boolean | AppUser$auth_eventsArgs<ExtArgs>
    _count?: boolean | AppUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appUser"]>



  export type AppUserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password_hash?: boolean
    name?: boolean
    company_name?: boolean
    phone?: boolean
    website?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    email_verified?: boolean
    email_verified_at?: boolean
    reset_token?: boolean
    reset_token_expires?: boolean
  }

  export type AppUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "password_hash" | "name" | "company_name" | "phone" | "website" | "active" | "created_at" | "updated_at" | "email_verified" | "email_verified_at" | "reset_token" | "reset_token_expires", ExtArgs["result"]["appUser"]>
  export type AppUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    api_keys?: boolean | AppUser$api_keysArgs<ExtArgs>
    app_sessions?: boolean | AppUser$app_sessionsArgs<ExtArgs>
    password_resets?: boolean | AppUser$password_resetsArgs<ExtArgs>
    auth_events?: boolean | AppUser$auth_eventsArgs<ExtArgs>
    _count?: boolean | AppUserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AppUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppUser"
    objects: {
      api_keys: Prisma.$ApiKeyPayload<ExtArgs>[]
      app_sessions: Prisma.$AppSessionPayload<ExtArgs>[]
      password_resets: Prisma.$PasswordResetPayload<ExtArgs> | null
      auth_events: Prisma.$AuthEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password_hash: string
      name: string | null
      company_name: string | null
      phone: string | null
      website: string | null
      active: boolean
      created_at: Date
      updated_at: Date
      email_verified: boolean
      email_verified_at: Date | null
      reset_token: string | null
      reset_token_expires: Date | null
    }, ExtArgs["result"]["appUser"]>
    composites: {}
  }

  type AppUserGetPayload<S extends boolean | null | undefined | AppUserDefaultArgs> = $Result.GetResult<Prisma.$AppUserPayload, S>

  type AppUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppUserCountAggregateInputType | true
    }

  export interface AppUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppUser'], meta: { name: 'AppUser' } }
    /**
     * Find zero or one AppUser that matches the filter.
     * @param {AppUserFindUniqueArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppUserFindUniqueArgs>(args: SelectSubset<T, AppUserFindUniqueArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppUserFindUniqueOrThrowArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppUserFindUniqueOrThrowArgs>(args: SelectSubset<T, AppUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindFirstArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppUserFindFirstArgs>(args?: SelectSubset<T, AppUserFindFirstArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindFirstOrThrowArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppUserFindFirstOrThrowArgs>(args?: SelectSubset<T, AppUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppUsers
     * const appUsers = await prisma.appUser.findMany()
     * 
     * // Get first 10 AppUsers
     * const appUsers = await prisma.appUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appUserWithIdOnly = await prisma.appUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppUserFindManyArgs>(args?: SelectSubset<T, AppUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppUser.
     * @param {AppUserCreateArgs} args - Arguments to create a AppUser.
     * @example
     * // Create one AppUser
     * const AppUser = await prisma.appUser.create({
     *   data: {
     *     // ... data to create a AppUser
     *   }
     * })
     * 
     */
    create<T extends AppUserCreateArgs>(args: SelectSubset<T, AppUserCreateArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppUsers.
     * @param {AppUserCreateManyArgs} args - Arguments to create many AppUsers.
     * @example
     * // Create many AppUsers
     * const appUser = await prisma.appUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppUserCreateManyArgs>(args?: SelectSubset<T, AppUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AppUser.
     * @param {AppUserDeleteArgs} args - Arguments to delete one AppUser.
     * @example
     * // Delete one AppUser
     * const AppUser = await prisma.appUser.delete({
     *   where: {
     *     // ... filter to delete one AppUser
     *   }
     * })
     * 
     */
    delete<T extends AppUserDeleteArgs>(args: SelectSubset<T, AppUserDeleteArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppUser.
     * @param {AppUserUpdateArgs} args - Arguments to update one AppUser.
     * @example
     * // Update one AppUser
     * const appUser = await prisma.appUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppUserUpdateArgs>(args: SelectSubset<T, AppUserUpdateArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppUsers.
     * @param {AppUserDeleteManyArgs} args - Arguments to filter AppUsers to delete.
     * @example
     * // Delete a few AppUsers
     * const { count } = await prisma.appUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppUserDeleteManyArgs>(args?: SelectSubset<T, AppUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppUsers
     * const appUser = await prisma.appUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppUserUpdateManyArgs>(args: SelectSubset<T, AppUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AppUser.
     * @param {AppUserUpsertArgs} args - Arguments to update or create a AppUser.
     * @example
     * // Update or create a AppUser
     * const appUser = await prisma.appUser.upsert({
     *   create: {
     *     // ... data to create a AppUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppUser we want to update
     *   }
     * })
     */
    upsert<T extends AppUserUpsertArgs>(args: SelectSubset<T, AppUserUpsertArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserCountArgs} args - Arguments to filter AppUsers to count.
     * @example
     * // Count the number of AppUsers
     * const count = await prisma.appUser.count({
     *   where: {
     *     // ... the filter for the AppUsers we want to count
     *   }
     * })
    **/
    count<T extends AppUserCountArgs>(
      args?: Subset<T, AppUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppUserAggregateArgs>(args: Subset<T, AppUserAggregateArgs>): Prisma.PrismaPromise<GetAppUserAggregateType<T>>

    /**
     * Group by AppUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppUserGroupByArgs['orderBy'] }
        : { orderBy?: AppUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppUser model
   */
  readonly fields: AppUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    api_keys<T extends AppUser$api_keysArgs<ExtArgs> = {}>(args?: Subset<T, AppUser$api_keysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    app_sessions<T extends AppUser$app_sessionsArgs<ExtArgs> = {}>(args?: Subset<T, AppUser$app_sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    password_resets<T extends AppUser$password_resetsArgs<ExtArgs> = {}>(args?: Subset<T, AppUser$password_resetsArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    auth_events<T extends AppUser$auth_eventsArgs<ExtArgs> = {}>(args?: Subset<T, AppUser$auth_eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppUser model
   */
  interface AppUserFieldRefs {
    readonly id: FieldRef<"AppUser", 'String'>
    readonly email: FieldRef<"AppUser", 'String'>
    readonly username: FieldRef<"AppUser", 'String'>
    readonly password_hash: FieldRef<"AppUser", 'String'>
    readonly name: FieldRef<"AppUser", 'String'>
    readonly company_name: FieldRef<"AppUser", 'String'>
    readonly phone: FieldRef<"AppUser", 'String'>
    readonly website: FieldRef<"AppUser", 'String'>
    readonly active: FieldRef<"AppUser", 'Boolean'>
    readonly created_at: FieldRef<"AppUser", 'DateTime'>
    readonly updated_at: FieldRef<"AppUser", 'DateTime'>
    readonly email_verified: FieldRef<"AppUser", 'Boolean'>
    readonly email_verified_at: FieldRef<"AppUser", 'DateTime'>
    readonly reset_token: FieldRef<"AppUser", 'String'>
    readonly reset_token_expires: FieldRef<"AppUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppUser findUnique
   */
  export type AppUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser findUniqueOrThrow
   */
  export type AppUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser findFirst
   */
  export type AppUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppUsers.
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppUsers.
     */
    distinct?: AppUserScalarFieldEnum | AppUserScalarFieldEnum[]
  }

  /**
   * AppUser findFirstOrThrow
   */
  export type AppUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUser to fetch.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppUsers.
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppUsers.
     */
    distinct?: AppUserScalarFieldEnum | AppUserScalarFieldEnum[]
  }

  /**
   * AppUser findMany
   */
  export type AppUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter, which AppUsers to fetch.
     */
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     */
    orderBy?: AppUserOrderByWithRelationInput | AppUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppUsers.
     */
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     */
    skip?: number
    distinct?: AppUserScalarFieldEnum | AppUserScalarFieldEnum[]
  }

  /**
   * AppUser create
   */
  export type AppUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * The data needed to create a AppUser.
     */
    data: XOR<AppUserCreateInput, AppUserUncheckedCreateInput>
  }

  /**
   * AppUser createMany
   */
  export type AppUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppUsers.
     */
    data: AppUserCreateManyInput | AppUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppUser update
   */
  export type AppUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * The data needed to update a AppUser.
     */
    data: XOR<AppUserUpdateInput, AppUserUncheckedUpdateInput>
    /**
     * Choose, which AppUser to update.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser updateMany
   */
  export type AppUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppUsers.
     */
    data: XOR<AppUserUpdateManyMutationInput, AppUserUncheckedUpdateManyInput>
    /**
     * Filter which AppUsers to update
     */
    where?: AppUserWhereInput
    /**
     * Limit how many AppUsers to update.
     */
    limit?: number
  }

  /**
   * AppUser upsert
   */
  export type AppUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * The filter to search for the AppUser to update in case it exists.
     */
    where: AppUserWhereUniqueInput
    /**
     * In case the AppUser found by the `where` argument doesn't exist, create a new AppUser with this data.
     */
    create: XOR<AppUserCreateInput, AppUserUncheckedCreateInput>
    /**
     * In case the AppUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppUserUpdateInput, AppUserUncheckedUpdateInput>
  }

  /**
   * AppUser delete
   */
  export type AppUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
    /**
     * Filter which AppUser to delete.
     */
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser deleteMany
   */
  export type AppUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppUsers to delete
     */
    where?: AppUserWhereInput
    /**
     * Limit how many AppUsers to delete.
     */
    limit?: number
  }

  /**
   * AppUser.api_keys
   */
  export type AppUser$api_keysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    cursor?: ApiKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * AppUser.app_sessions
   */
  export type AppUser$app_sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    where?: AppSessionWhereInput
    orderBy?: AppSessionOrderByWithRelationInput | AppSessionOrderByWithRelationInput[]
    cursor?: AppSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppSessionScalarFieldEnum | AppSessionScalarFieldEnum[]
  }

  /**
   * AppUser.password_resets
   */
  export type AppUser$password_resetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    where?: PasswordResetWhereInput
  }

  /**
   * AppUser.auth_events
   */
  export type AppUser$auth_eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    where?: AuthEventWhereInput
    orderBy?: AuthEventOrderByWithRelationInput | AuthEventOrderByWithRelationInput[]
    cursor?: AuthEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthEventScalarFieldEnum | AuthEventScalarFieldEnum[]
  }

  /**
   * AppUser without action
   */
  export type AppUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppUser
     */
    select?: AppUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppUser
     */
    omit?: AppUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppUserInclude<ExtArgs> | null
  }


  /**
   * Model ApiKey
   */

  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyMinAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    key: string | null
    name: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    last_used_at: Date | null
    expires_at: Date | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    key: string | null
    name: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    last_used_at: Date | null
    expires_at: Date | null
  }

  export type ApiKeyCountAggregateOutputType = {
    id: number
    app_user_id: number
    key: number
    name: number
    active: number
    created_at: number
    updated_at: number
    last_used_at: number
    expires_at: number
    _all: number
  }


  export type ApiKeyMinAggregateInputType = {
    id?: true
    app_user_id?: true
    key?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
    last_used_at?: true
    expires_at?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    id?: true
    app_user_id?: true
    key?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
    last_used_at?: true
    expires_at?: true
  }

  export type ApiKeyCountAggregateInputType = {
    id?: true
    app_user_id?: true
    key?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
    last_used_at?: true
    expires_at?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKey to aggregate.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithAggregationInput | ApiKeyOrderByWithAggregationInput[]
    by: ApiKeyScalarFieldEnum[] | ApiKeyScalarFieldEnum
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }

  export type ApiKeyGroupByOutputType = {
    id: string
    app_user_id: string
    key: string
    name: string
    active: boolean
    created_at: Date
    updated_at: Date
    last_used_at: Date | null
    expires_at: Date | null
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    app_user_id?: boolean
    key?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    last_used_at?: boolean
    expires_at?: boolean
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
    users?: boolean | ApiKey$usersArgs<ExtArgs>
    test_types?: boolean | ApiKey$test_typesArgs<ExtArgs>
    subjects?: boolean | ApiKey$subjectsArgs<ExtArgs>
    _count?: boolean | ApiKeyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>



  export type ApiKeySelectScalar = {
    id?: boolean
    app_user_id?: boolean
    key?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    last_used_at?: boolean
    expires_at?: boolean
  }

  export type ApiKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "app_user_id" | "key" | "name" | "active" | "created_at" | "updated_at" | "last_used_at" | "expires_at", ExtArgs["result"]["apiKey"]>
  export type ApiKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
    users?: boolean | ApiKey$usersArgs<ExtArgs>
    test_types?: boolean | ApiKey$test_typesArgs<ExtArgs>
    subjects?: boolean | ApiKey$subjectsArgs<ExtArgs>
    _count?: boolean | ApiKeyCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ApiKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApiKey"
    objects: {
      app_user: Prisma.$AppUserPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      test_types: Prisma.$TestTypePayload<ExtArgs>[]
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      app_user_id: string
      key: string
      name: string
      active: boolean
      created_at: Date
      updated_at: Date
      last_used_at: Date | null
      expires_at: Date | null
    }, ExtArgs["result"]["apiKey"]>
    composites: {}
  }

  type ApiKeyGetPayload<S extends boolean | null | undefined | ApiKeyDefaultArgs> = $Result.GetResult<Prisma.$ApiKeyPayload, S>

  type ApiKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApiKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApiKeyCountAggregateInputType | true
    }

  export interface ApiKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiKey'], meta: { name: 'ApiKey' } }
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApiKeyFindUniqueArgs>(args: SelectSubset<T, ApiKeyFindUniqueArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApiKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApiKeyFindUniqueOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApiKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, ApiKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApiKeyFindFirstArgs>(args?: SelectSubset<T, ApiKeyFindFirstArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApiKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, ApiKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApiKeyFindManyArgs>(args?: SelectSubset<T, ApiKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
     */
    create<T extends ApiKeyCreateArgs>(args: SelectSubset<T, ApiKeyCreateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApiKeys.
     * @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApiKeyCreateManyArgs>(args?: SelectSubset<T, ApiKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
     */
    delete<T extends ApiKeyDeleteArgs>(args: SelectSubset<T, ApiKeyDeleteArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApiKeyUpdateArgs>(args: SelectSubset<T, ApiKeyUpdateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApiKeyDeleteManyArgs>(args?: SelectSubset<T, ApiKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApiKeyUpdateManyArgs>(args: SelectSubset<T, ApiKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
     */
    upsert<T extends ApiKeyUpsertArgs>(args: SelectSubset<T, ApiKeyUpsertArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): Prisma.PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiKey model
   */
  readonly fields: ApiKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    app_user<T extends AppUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppUserDefaultArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends ApiKey$usersArgs<ExtArgs> = {}>(args?: Subset<T, ApiKey$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    test_types<T extends ApiKey$test_typesArgs<ExtArgs> = {}>(args?: Subset<T, ApiKey$test_typesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subjects<T extends ApiKey$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, ApiKey$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApiKey model
   */
  interface ApiKeyFieldRefs {
    readonly id: FieldRef<"ApiKey", 'String'>
    readonly app_user_id: FieldRef<"ApiKey", 'String'>
    readonly key: FieldRef<"ApiKey", 'String'>
    readonly name: FieldRef<"ApiKey", 'String'>
    readonly active: FieldRef<"ApiKey", 'Boolean'>
    readonly created_at: FieldRef<"ApiKey", 'DateTime'>
    readonly updated_at: FieldRef<"ApiKey", 'DateTime'>
    readonly last_used_at: FieldRef<"ApiKey", 'DateTime'>
    readonly expires_at: FieldRef<"ApiKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findUniqueOrThrow
   */
  export type ApiKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findFirstOrThrow
   */
  export type ApiKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeys to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a ApiKey.
     */
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }

  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a ApiKey.
     */
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to update.
     */
    limit?: number
  }

  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     */
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     */
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }

  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter which ApiKey to delete.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKeys to delete
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to delete.
     */
    limit?: number
  }

  /**
   * ApiKey.users
   */
  export type ApiKey$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * ApiKey.test_types
   */
  export type ApiKey$test_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    where?: TestTypeWhereInput
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    cursor?: TestTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestTypeScalarFieldEnum | TestTypeScalarFieldEnum[]
  }

  /**
   * ApiKey.subjects
   */
  export type ApiKey$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * ApiKey without action
   */
  export type ApiKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
  }


  /**
   * Model AppSession
   */

  export type AggregateAppSession = {
    _count: AppSessionCountAggregateOutputType | null
    _min: AppSessionMinAggregateOutputType | null
    _max: AppSessionMaxAggregateOutputType | null
  }

  export type AppSessionMinAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    token: string | null
    refresh_token: string | null
    ip_address: string | null
    user_agent: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    revoked: boolean | null
    revoked_at: Date | null
  }

  export type AppSessionMaxAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    token: string | null
    refresh_token: string | null
    ip_address: string | null
    user_agent: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    revoked: boolean | null
    revoked_at: Date | null
  }

  export type AppSessionCountAggregateOutputType = {
    id: number
    app_user_id: number
    token: number
    refresh_token: number
    ip_address: number
    user_agent: number
    expires_at: number
    created_at: number
    updated_at: number
    revoked: number
    revoked_at: number
    _all: number
  }


  export type AppSessionMinAggregateInputType = {
    id?: true
    app_user_id?: true
    token?: true
    refresh_token?: true
    ip_address?: true
    user_agent?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    revoked?: true
    revoked_at?: true
  }

  export type AppSessionMaxAggregateInputType = {
    id?: true
    app_user_id?: true
    token?: true
    refresh_token?: true
    ip_address?: true
    user_agent?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    revoked?: true
    revoked_at?: true
  }

  export type AppSessionCountAggregateInputType = {
    id?: true
    app_user_id?: true
    token?: true
    refresh_token?: true
    ip_address?: true
    user_agent?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    revoked?: true
    revoked_at?: true
    _all?: true
  }

  export type AppSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppSession to aggregate.
     */
    where?: AppSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSessions to fetch.
     */
    orderBy?: AppSessionOrderByWithRelationInput | AppSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppSessions
    **/
    _count?: true | AppSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppSessionMaxAggregateInputType
  }

  export type GetAppSessionAggregateType<T extends AppSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateAppSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppSession[P]>
      : GetScalarType<T[P], AggregateAppSession[P]>
  }




  export type AppSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppSessionWhereInput
    orderBy?: AppSessionOrderByWithAggregationInput | AppSessionOrderByWithAggregationInput[]
    by: AppSessionScalarFieldEnum[] | AppSessionScalarFieldEnum
    having?: AppSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppSessionCountAggregateInputType | true
    _min?: AppSessionMinAggregateInputType
    _max?: AppSessionMaxAggregateInputType
  }

  export type AppSessionGroupByOutputType = {
    id: string
    app_user_id: string
    token: string
    refresh_token: string | null
    ip_address: string | null
    user_agent: string | null
    expires_at: Date
    created_at: Date
    updated_at: Date
    revoked: boolean
    revoked_at: Date | null
    _count: AppSessionCountAggregateOutputType | null
    _min: AppSessionMinAggregateOutputType | null
    _max: AppSessionMaxAggregateOutputType | null
  }

  type GetAppSessionGroupByPayload<T extends AppSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppSessionGroupByOutputType[P]>
            : GetScalarType<T[P], AppSessionGroupByOutputType[P]>
        }
      >
    >


  export type AppSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    app_user_id?: boolean
    token?: boolean
    refresh_token?: boolean
    ip_address?: boolean
    user_agent?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    revoked?: boolean
    revoked_at?: boolean
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appSession"]>



  export type AppSessionSelectScalar = {
    id?: boolean
    app_user_id?: boolean
    token?: boolean
    refresh_token?: boolean
    ip_address?: boolean
    user_agent?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    revoked?: boolean
    revoked_at?: boolean
  }

  export type AppSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "app_user_id" | "token" | "refresh_token" | "ip_address" | "user_agent" | "expires_at" | "created_at" | "updated_at" | "revoked" | "revoked_at", ExtArgs["result"]["appSession"]>
  export type AppSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
  }

  export type $AppSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppSession"
    objects: {
      app_user: Prisma.$AppUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      app_user_id: string
      token: string
      refresh_token: string | null
      ip_address: string | null
      user_agent: string | null
      expires_at: Date
      created_at: Date
      updated_at: Date
      revoked: boolean
      revoked_at: Date | null
    }, ExtArgs["result"]["appSession"]>
    composites: {}
  }

  type AppSessionGetPayload<S extends boolean | null | undefined | AppSessionDefaultArgs> = $Result.GetResult<Prisma.$AppSessionPayload, S>

  type AppSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppSessionCountAggregateInputType | true
    }

  export interface AppSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppSession'], meta: { name: 'AppSession' } }
    /**
     * Find zero or one AppSession that matches the filter.
     * @param {AppSessionFindUniqueArgs} args - Arguments to find a AppSession
     * @example
     * // Get one AppSession
     * const appSession = await prisma.appSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppSessionFindUniqueArgs>(args: SelectSubset<T, AppSessionFindUniqueArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppSessionFindUniqueOrThrowArgs} args - Arguments to find a AppSession
     * @example
     * // Get one AppSession
     * const appSession = await prisma.appSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, AppSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSessionFindFirstArgs} args - Arguments to find a AppSession
     * @example
     * // Get one AppSession
     * const appSession = await prisma.appSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppSessionFindFirstArgs>(args?: SelectSubset<T, AppSessionFindFirstArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSessionFindFirstOrThrowArgs} args - Arguments to find a AppSession
     * @example
     * // Get one AppSession
     * const appSession = await prisma.appSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, AppSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppSessions
     * const appSessions = await prisma.appSession.findMany()
     * 
     * // Get first 10 AppSessions
     * const appSessions = await prisma.appSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appSessionWithIdOnly = await prisma.appSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppSessionFindManyArgs>(args?: SelectSubset<T, AppSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppSession.
     * @param {AppSessionCreateArgs} args - Arguments to create a AppSession.
     * @example
     * // Create one AppSession
     * const AppSession = await prisma.appSession.create({
     *   data: {
     *     // ... data to create a AppSession
     *   }
     * })
     * 
     */
    create<T extends AppSessionCreateArgs>(args: SelectSubset<T, AppSessionCreateArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppSessions.
     * @param {AppSessionCreateManyArgs} args - Arguments to create many AppSessions.
     * @example
     * // Create many AppSessions
     * const appSession = await prisma.appSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppSessionCreateManyArgs>(args?: SelectSubset<T, AppSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AppSession.
     * @param {AppSessionDeleteArgs} args - Arguments to delete one AppSession.
     * @example
     * // Delete one AppSession
     * const AppSession = await prisma.appSession.delete({
     *   where: {
     *     // ... filter to delete one AppSession
     *   }
     * })
     * 
     */
    delete<T extends AppSessionDeleteArgs>(args: SelectSubset<T, AppSessionDeleteArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppSession.
     * @param {AppSessionUpdateArgs} args - Arguments to update one AppSession.
     * @example
     * // Update one AppSession
     * const appSession = await prisma.appSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppSessionUpdateArgs>(args: SelectSubset<T, AppSessionUpdateArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppSessions.
     * @param {AppSessionDeleteManyArgs} args - Arguments to filter AppSessions to delete.
     * @example
     * // Delete a few AppSessions
     * const { count } = await prisma.appSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppSessionDeleteManyArgs>(args?: SelectSubset<T, AppSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppSessions
     * const appSession = await prisma.appSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppSessionUpdateManyArgs>(args: SelectSubset<T, AppSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AppSession.
     * @param {AppSessionUpsertArgs} args - Arguments to update or create a AppSession.
     * @example
     * // Update or create a AppSession
     * const appSession = await prisma.appSession.upsert({
     *   create: {
     *     // ... data to create a AppSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppSession we want to update
     *   }
     * })
     */
    upsert<T extends AppSessionUpsertArgs>(args: SelectSubset<T, AppSessionUpsertArgs<ExtArgs>>): Prisma__AppSessionClient<$Result.GetResult<Prisma.$AppSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSessionCountArgs} args - Arguments to filter AppSessions to count.
     * @example
     * // Count the number of AppSessions
     * const count = await prisma.appSession.count({
     *   where: {
     *     // ... the filter for the AppSessions we want to count
     *   }
     * })
    **/
    count<T extends AppSessionCountArgs>(
      args?: Subset<T, AppSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppSessionAggregateArgs>(args: Subset<T, AppSessionAggregateArgs>): Prisma.PrismaPromise<GetAppSessionAggregateType<T>>

    /**
     * Group by AppSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppSessionGroupByArgs['orderBy'] }
        : { orderBy?: AppSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppSession model
   */
  readonly fields: AppSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    app_user<T extends AppUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppUserDefaultArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppSession model
   */
  interface AppSessionFieldRefs {
    readonly id: FieldRef<"AppSession", 'String'>
    readonly app_user_id: FieldRef<"AppSession", 'String'>
    readonly token: FieldRef<"AppSession", 'String'>
    readonly refresh_token: FieldRef<"AppSession", 'String'>
    readonly ip_address: FieldRef<"AppSession", 'String'>
    readonly user_agent: FieldRef<"AppSession", 'String'>
    readonly expires_at: FieldRef<"AppSession", 'DateTime'>
    readonly created_at: FieldRef<"AppSession", 'DateTime'>
    readonly updated_at: FieldRef<"AppSession", 'DateTime'>
    readonly revoked: FieldRef<"AppSession", 'Boolean'>
    readonly revoked_at: FieldRef<"AppSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppSession findUnique
   */
  export type AppSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * Filter, which AppSession to fetch.
     */
    where: AppSessionWhereUniqueInput
  }

  /**
   * AppSession findUniqueOrThrow
   */
  export type AppSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * Filter, which AppSession to fetch.
     */
    where: AppSessionWhereUniqueInput
  }

  /**
   * AppSession findFirst
   */
  export type AppSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * Filter, which AppSession to fetch.
     */
    where?: AppSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSessions to fetch.
     */
    orderBy?: AppSessionOrderByWithRelationInput | AppSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppSessions.
     */
    cursor?: AppSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppSessions.
     */
    distinct?: AppSessionScalarFieldEnum | AppSessionScalarFieldEnum[]
  }

  /**
   * AppSession findFirstOrThrow
   */
  export type AppSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * Filter, which AppSession to fetch.
     */
    where?: AppSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSessions to fetch.
     */
    orderBy?: AppSessionOrderByWithRelationInput | AppSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppSessions.
     */
    cursor?: AppSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppSessions.
     */
    distinct?: AppSessionScalarFieldEnum | AppSessionScalarFieldEnum[]
  }

  /**
   * AppSession findMany
   */
  export type AppSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * Filter, which AppSessions to fetch.
     */
    where?: AppSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppSessions to fetch.
     */
    orderBy?: AppSessionOrderByWithRelationInput | AppSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppSessions.
     */
    cursor?: AppSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppSessions.
     */
    skip?: number
    distinct?: AppSessionScalarFieldEnum | AppSessionScalarFieldEnum[]
  }

  /**
   * AppSession create
   */
  export type AppSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a AppSession.
     */
    data: XOR<AppSessionCreateInput, AppSessionUncheckedCreateInput>
  }

  /**
   * AppSession createMany
   */
  export type AppSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppSessions.
     */
    data: AppSessionCreateManyInput | AppSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppSession update
   */
  export type AppSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a AppSession.
     */
    data: XOR<AppSessionUpdateInput, AppSessionUncheckedUpdateInput>
    /**
     * Choose, which AppSession to update.
     */
    where: AppSessionWhereUniqueInput
  }

  /**
   * AppSession updateMany
   */
  export type AppSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppSessions.
     */
    data: XOR<AppSessionUpdateManyMutationInput, AppSessionUncheckedUpdateManyInput>
    /**
     * Filter which AppSessions to update
     */
    where?: AppSessionWhereInput
    /**
     * Limit how many AppSessions to update.
     */
    limit?: number
  }

  /**
   * AppSession upsert
   */
  export type AppSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the AppSession to update in case it exists.
     */
    where: AppSessionWhereUniqueInput
    /**
     * In case the AppSession found by the `where` argument doesn't exist, create a new AppSession with this data.
     */
    create: XOR<AppSessionCreateInput, AppSessionUncheckedCreateInput>
    /**
     * In case the AppSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppSessionUpdateInput, AppSessionUncheckedUpdateInput>
  }

  /**
   * AppSession delete
   */
  export type AppSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
    /**
     * Filter which AppSession to delete.
     */
    where: AppSessionWhereUniqueInput
  }

  /**
   * AppSession deleteMany
   */
  export type AppSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppSessions to delete
     */
    where?: AppSessionWhereInput
    /**
     * Limit how many AppSessions to delete.
     */
    limit?: number
  }

  /**
   * AppSession without action
   */
  export type AppSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppSession
     */
    select?: AppSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppSession
     */
    omit?: AppSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppSessionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    api_key_id: string | null
    email: string | null
    username: string | null
    password_hash: string | null
    name: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    email_verified: boolean | null
    email_verified_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
    ip_address: string | null
    user_agent: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    api_key_id: string | null
    email: string | null
    username: string | null
    password_hash: string | null
    name: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    email_verified: boolean | null
    email_verified_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
    ip_address: string | null
    user_agent: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    api_key_id: number
    email: number
    username: number
    password_hash: number
    name: number
    active: number
    created_at: number
    updated_at: number
    email_verified: number
    email_verified_at: number
    reset_token: number
    reset_token_expires: number
    ip_address: number
    user_agent: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    api_key_id?: true
    email?: true
    username?: true
    password_hash?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
    email_verified?: true
    email_verified_at?: true
    reset_token?: true
    reset_token_expires?: true
    ip_address?: true
    user_agent?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    api_key_id?: true
    email?: true
    username?: true
    password_hash?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
    email_verified?: true
    email_verified_at?: true
    reset_token?: true
    reset_token_expires?: true
    ip_address?: true
    user_agent?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    api_key_id?: true
    email?: true
    username?: true
    password_hash?: true
    name?: true
    active?: true
    created_at?: true
    updated_at?: true
    email_verified?: true
    email_verified_at?: true
    reset_token?: true
    reset_token_expires?: true
    ip_address?: true
    user_agent?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name: string | null
    active: boolean
    created_at: Date
    updated_at: Date
    email_verified: boolean
    email_verified_at: Date | null
    reset_token: string | null
    reset_token_expires: Date | null
    ip_address: string | null
    user_agent: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    api_key_id?: boolean
    email?: boolean
    username?: boolean
    password_hash?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    email_verified?: boolean
    email_verified_at?: boolean
    reset_token?: boolean
    reset_token_expires?: boolean
    ip_address?: boolean
    user_agent?: boolean
    api_key?: boolean | ApiKeyDefaultArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auth_logs?: boolean | User$auth_logsArgs<ExtArgs>
    questionnaireAttempts?: boolean | User$questionnaireAttemptsArgs<ExtArgs>
    questionAnswers?: boolean | User$questionAnswersArgs<ExtArgs>
    testSelections?: boolean | User$testSelectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    api_key_id?: boolean
    email?: boolean
    username?: boolean
    password_hash?: boolean
    name?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    email_verified?: boolean
    email_verified_at?: boolean
    reset_token?: boolean
    reset_token_expires?: boolean
    ip_address?: boolean
    user_agent?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "api_key_id" | "email" | "username" | "password_hash" | "name" | "active" | "created_at" | "updated_at" | "email_verified" | "email_verified_at" | "reset_token" | "reset_token_expires" | "ip_address" | "user_agent", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    api_key?: boolean | ApiKeyDefaultArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auth_logs?: boolean | User$auth_logsArgs<ExtArgs>
    questionnaireAttempts?: boolean | User$questionnaireAttemptsArgs<ExtArgs>
    questionAnswers?: boolean | User$questionAnswersArgs<ExtArgs>
    testSelections?: boolean | User$testSelectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      api_key: Prisma.$ApiKeyPayload<ExtArgs>
      accounts: Prisma.$UserAccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      auth_logs: Prisma.$AuthLogPayload<ExtArgs>[]
      questionnaireAttempts: Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>[]
      questionAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
      testSelections: Prisma.$UserTestSelectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      api_key_id: string
      email: string
      username: string
      password_hash: string
      name: string | null
      active: boolean
      created_at: Date
      updated_at: Date
      email_verified: boolean
      email_verified_at: Date | null
      reset_token: string | null
      reset_token_expires: Date | null
      ip_address: string | null
      user_agent: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    api_key<T extends ApiKeyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApiKeyDefaultArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auth_logs<T extends User$auth_logsArgs<ExtArgs> = {}>(args?: Subset<T, User$auth_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionnaireAttempts<T extends User$questionnaireAttemptsArgs<ExtArgs> = {}>(args?: Subset<T, User$questionnaireAttemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionAnswers<T extends User$questionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, User$questionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testSelections<T extends User$testSelectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$testSelectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly api_key_id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly email_verified: FieldRef<"User", 'Boolean'>
    readonly email_verified_at: FieldRef<"User", 'DateTime'>
    readonly reset_token: FieldRef<"User", 'String'>
    readonly reset_token_expires: FieldRef<"User", 'DateTime'>
    readonly ip_address: FieldRef<"User", 'String'>
    readonly user_agent: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    where?: UserAccountWhereInput
    orderBy?: UserAccountOrderByWithRelationInput | UserAccountOrderByWithRelationInput[]
    cursor?: UserAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAccountScalarFieldEnum | UserAccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.auth_logs
   */
  export type User$auth_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    where?: AuthLogWhereInput
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    cursor?: AuthLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthLogScalarFieldEnum | AuthLogScalarFieldEnum[]
  }

  /**
   * User.questionnaireAttempts
   */
  export type User$questionnaireAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    where?: UserQuestionnaireAttemptWhereInput
    orderBy?: UserQuestionnaireAttemptOrderByWithRelationInput | UserQuestionnaireAttemptOrderByWithRelationInput[]
    cursor?: UserQuestionnaireAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionnaireAttemptScalarFieldEnum | UserQuestionnaireAttemptScalarFieldEnum[]
  }

  /**
   * User.questionAnswers
   */
  export type User$questionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * User.testSelections
   */
  export type User$testSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    where?: UserTestSelectionWhereInput
    orderBy?: UserTestSelectionOrderByWithRelationInput | UserTestSelectionOrderByWithRelationInput[]
    cursor?: UserTestSelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTestSelectionScalarFieldEnum | UserTestSelectionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    name: string | null
    api_key: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    name: string | null
    api_key: string | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    name: number
    api_key: number
    active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    name?: true
    api_key?: true
    active?: true
    created_at?: true
    updated_at?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    name?: true
    api_key?: true
    active?: true
    created_at?: true
    updated_at?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    name?: true
    api_key?: true
    active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    name: string
    api_key: string
    active: boolean
    created_at: Date
    updated_at: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    api_key?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    user_accounts?: boolean | Account$user_accountsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>



  export type AccountSelectScalar = {
    id?: boolean
    name?: boolean
    api_key?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "api_key" | "active" | "created_at" | "updated_at", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_accounts?: boolean | Account$user_accountsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user_accounts: Prisma.$UserAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      api_key: string
      active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_accounts<T extends Account$user_accountsArgs<ExtArgs> = {}>(args?: Subset<T, Account$user_accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly name: FieldRef<"Account", 'String'>
    readonly api_key: FieldRef<"Account", 'String'>
    readonly active: FieldRef<"Account", 'Boolean'>
    readonly created_at: FieldRef<"Account", 'DateTime'>
    readonly updated_at: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.user_accounts
   */
  export type Account$user_accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    where?: UserAccountWhereInput
    orderBy?: UserAccountOrderByWithRelationInput | UserAccountOrderByWithRelationInput[]
    cursor?: UserAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAccountScalarFieldEnum | UserAccountScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model UserAccount
   */

  export type AggregateUserAccount = {
    _count: UserAccountCountAggregateOutputType | null
    _min: UserAccountMinAggregateOutputType | null
    _max: UserAccountMaxAggregateOutputType | null
  }

  export type UserAccountMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    account_id: string | null
    created_at: Date | null
    created_by: string | null
  }

  export type UserAccountMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    account_id: string | null
    created_at: Date | null
    created_by: string | null
  }

  export type UserAccountCountAggregateOutputType = {
    id: number
    user_id: number
    account_id: number
    created_at: number
    created_by: number
    _all: number
  }


  export type UserAccountMinAggregateInputType = {
    id?: true
    user_id?: true
    account_id?: true
    created_at?: true
    created_by?: true
  }

  export type UserAccountMaxAggregateInputType = {
    id?: true
    user_id?: true
    account_id?: true
    created_at?: true
    created_by?: true
  }

  export type UserAccountCountAggregateInputType = {
    id?: true
    user_id?: true
    account_id?: true
    created_at?: true
    created_by?: true
    _all?: true
  }

  export type UserAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAccount to aggregate.
     */
    where?: UserAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAccounts to fetch.
     */
    orderBy?: UserAccountOrderByWithRelationInput | UserAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAccounts
    **/
    _count?: true | UserAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAccountMaxAggregateInputType
  }

  export type GetUserAccountAggregateType<T extends UserAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAccount[P]>
      : GetScalarType<T[P], AggregateUserAccount[P]>
  }




  export type UserAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAccountWhereInput
    orderBy?: UserAccountOrderByWithAggregationInput | UserAccountOrderByWithAggregationInput[]
    by: UserAccountScalarFieldEnum[] | UserAccountScalarFieldEnum
    having?: UserAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAccountCountAggregateInputType | true
    _min?: UserAccountMinAggregateInputType
    _max?: UserAccountMaxAggregateInputType
  }

  export type UserAccountGroupByOutputType = {
    id: string
    user_id: string
    account_id: string
    created_at: Date
    created_by: string | null
    _count: UserAccountCountAggregateOutputType | null
    _min: UserAccountMinAggregateOutputType | null
    _max: UserAccountMaxAggregateOutputType | null
  }

  type GetUserAccountGroupByPayload<T extends UserAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAccountGroupByOutputType[P]>
            : GetScalarType<T[P], UserAccountGroupByOutputType[P]>
        }
      >
    >


  export type UserAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    account_id?: boolean
    created_at?: boolean
    created_by?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAccount"]>



  export type UserAccountSelectScalar = {
    id?: boolean
    user_id?: boolean
    account_id?: boolean
    created_at?: boolean
    created_by?: boolean
  }

  export type UserAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "account_id" | "created_at" | "created_by", ExtArgs["result"]["userAccount"]>
  export type UserAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $UserAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      account_id: string
      created_at: Date
      created_by: string | null
    }, ExtArgs["result"]["userAccount"]>
    composites: {}
  }

  type UserAccountGetPayload<S extends boolean | null | undefined | UserAccountDefaultArgs> = $Result.GetResult<Prisma.$UserAccountPayload, S>

  type UserAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAccountCountAggregateInputType | true
    }

  export interface UserAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAccount'], meta: { name: 'UserAccount' } }
    /**
     * Find zero or one UserAccount that matches the filter.
     * @param {UserAccountFindUniqueArgs} args - Arguments to find a UserAccount
     * @example
     * // Get one UserAccount
     * const userAccount = await prisma.userAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAccountFindUniqueArgs>(args: SelectSubset<T, UserAccountFindUniqueArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAccountFindUniqueOrThrowArgs} args - Arguments to find a UserAccount
     * @example
     * // Get one UserAccount
     * const userAccount = await prisma.userAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountFindFirstArgs} args - Arguments to find a UserAccount
     * @example
     * // Get one UserAccount
     * const userAccount = await prisma.userAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAccountFindFirstArgs>(args?: SelectSubset<T, UserAccountFindFirstArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountFindFirstOrThrowArgs} args - Arguments to find a UserAccount
     * @example
     * // Get one UserAccount
     * const userAccount = await prisma.userAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAccounts
     * const userAccounts = await prisma.userAccount.findMany()
     * 
     * // Get first 10 UserAccounts
     * const userAccounts = await prisma.userAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAccountWithIdOnly = await prisma.userAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAccountFindManyArgs>(args?: SelectSubset<T, UserAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAccount.
     * @param {UserAccountCreateArgs} args - Arguments to create a UserAccount.
     * @example
     * // Create one UserAccount
     * const UserAccount = await prisma.userAccount.create({
     *   data: {
     *     // ... data to create a UserAccount
     *   }
     * })
     * 
     */
    create<T extends UserAccountCreateArgs>(args: SelectSubset<T, UserAccountCreateArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAccounts.
     * @param {UserAccountCreateManyArgs} args - Arguments to create many UserAccounts.
     * @example
     * // Create many UserAccounts
     * const userAccount = await prisma.userAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAccountCreateManyArgs>(args?: SelectSubset<T, UserAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserAccount.
     * @param {UserAccountDeleteArgs} args - Arguments to delete one UserAccount.
     * @example
     * // Delete one UserAccount
     * const UserAccount = await prisma.userAccount.delete({
     *   where: {
     *     // ... filter to delete one UserAccount
     *   }
     * })
     * 
     */
    delete<T extends UserAccountDeleteArgs>(args: SelectSubset<T, UserAccountDeleteArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAccount.
     * @param {UserAccountUpdateArgs} args - Arguments to update one UserAccount.
     * @example
     * // Update one UserAccount
     * const userAccount = await prisma.userAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAccountUpdateArgs>(args: SelectSubset<T, UserAccountUpdateArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAccounts.
     * @param {UserAccountDeleteManyArgs} args - Arguments to filter UserAccounts to delete.
     * @example
     * // Delete a few UserAccounts
     * const { count } = await prisma.userAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAccountDeleteManyArgs>(args?: SelectSubset<T, UserAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAccounts
     * const userAccount = await prisma.userAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAccountUpdateManyArgs>(args: SelectSubset<T, UserAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAccount.
     * @param {UserAccountUpsertArgs} args - Arguments to update or create a UserAccount.
     * @example
     * // Update or create a UserAccount
     * const userAccount = await prisma.userAccount.upsert({
     *   create: {
     *     // ... data to create a UserAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAccount we want to update
     *   }
     * })
     */
    upsert<T extends UserAccountUpsertArgs>(args: SelectSubset<T, UserAccountUpsertArgs<ExtArgs>>): Prisma__UserAccountClient<$Result.GetResult<Prisma.$UserAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountCountArgs} args - Arguments to filter UserAccounts to count.
     * @example
     * // Count the number of UserAccounts
     * const count = await prisma.userAccount.count({
     *   where: {
     *     // ... the filter for the UserAccounts we want to count
     *   }
     * })
    **/
    count<T extends UserAccountCountArgs>(
      args?: Subset<T, UserAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAccountAggregateArgs>(args: Subset<T, UserAccountAggregateArgs>): Prisma.PrismaPromise<GetUserAccountAggregateType<T>>

    /**
     * Group by UserAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAccountGroupByArgs['orderBy'] }
        : { orderBy?: UserAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAccount model
   */
  readonly fields: UserAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAccount model
   */
  interface UserAccountFieldRefs {
    readonly id: FieldRef<"UserAccount", 'String'>
    readonly user_id: FieldRef<"UserAccount", 'String'>
    readonly account_id: FieldRef<"UserAccount", 'String'>
    readonly created_at: FieldRef<"UserAccount", 'DateTime'>
    readonly created_by: FieldRef<"UserAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserAccount findUnique
   */
  export type UserAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * Filter, which UserAccount to fetch.
     */
    where: UserAccountWhereUniqueInput
  }

  /**
   * UserAccount findUniqueOrThrow
   */
  export type UserAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * Filter, which UserAccount to fetch.
     */
    where: UserAccountWhereUniqueInput
  }

  /**
   * UserAccount findFirst
   */
  export type UserAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * Filter, which UserAccount to fetch.
     */
    where?: UserAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAccounts to fetch.
     */
    orderBy?: UserAccountOrderByWithRelationInput | UserAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAccounts.
     */
    cursor?: UserAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAccounts.
     */
    distinct?: UserAccountScalarFieldEnum | UserAccountScalarFieldEnum[]
  }

  /**
   * UserAccount findFirstOrThrow
   */
  export type UserAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * Filter, which UserAccount to fetch.
     */
    where?: UserAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAccounts to fetch.
     */
    orderBy?: UserAccountOrderByWithRelationInput | UserAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAccounts.
     */
    cursor?: UserAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAccounts.
     */
    distinct?: UserAccountScalarFieldEnum | UserAccountScalarFieldEnum[]
  }

  /**
   * UserAccount findMany
   */
  export type UserAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * Filter, which UserAccounts to fetch.
     */
    where?: UserAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAccounts to fetch.
     */
    orderBy?: UserAccountOrderByWithRelationInput | UserAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAccounts.
     */
    cursor?: UserAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAccounts.
     */
    skip?: number
    distinct?: UserAccountScalarFieldEnum | UserAccountScalarFieldEnum[]
  }

  /**
   * UserAccount create
   */
  export type UserAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAccount.
     */
    data: XOR<UserAccountCreateInput, UserAccountUncheckedCreateInput>
  }

  /**
   * UserAccount createMany
   */
  export type UserAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAccounts.
     */
    data: UserAccountCreateManyInput | UserAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAccount update
   */
  export type UserAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAccount.
     */
    data: XOR<UserAccountUpdateInput, UserAccountUncheckedUpdateInput>
    /**
     * Choose, which UserAccount to update.
     */
    where: UserAccountWhereUniqueInput
  }

  /**
   * UserAccount updateMany
   */
  export type UserAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAccounts.
     */
    data: XOR<UserAccountUpdateManyMutationInput, UserAccountUncheckedUpdateManyInput>
    /**
     * Filter which UserAccounts to update
     */
    where?: UserAccountWhereInput
    /**
     * Limit how many UserAccounts to update.
     */
    limit?: number
  }

  /**
   * UserAccount upsert
   */
  export type UserAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAccount to update in case it exists.
     */
    where: UserAccountWhereUniqueInput
    /**
     * In case the UserAccount found by the `where` argument doesn't exist, create a new UserAccount with this data.
     */
    create: XOR<UserAccountCreateInput, UserAccountUncheckedCreateInput>
    /**
     * In case the UserAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAccountUpdateInput, UserAccountUncheckedUpdateInput>
  }

  /**
   * UserAccount delete
   */
  export type UserAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
    /**
     * Filter which UserAccount to delete.
     */
    where: UserAccountWhereUniqueInput
  }

  /**
   * UserAccount deleteMany
   */
  export type UserAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAccounts to delete
     */
    where?: UserAccountWhereInput
    /**
     * Limit how many UserAccounts to delete.
     */
    limit?: number
  }

  /**
   * UserAccount without action
   */
  export type UserAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAccount
     */
    select?: UserAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAccount
     */
    omit?: UserAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    token: string | null
    refresh_token: string | null
    ip_address: string | null
    user_agent: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    revoked: boolean | null
    revoked_at: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    token: string | null
    refresh_token: string | null
    ip_address: string | null
    user_agent: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    revoked: boolean | null
    revoked_at: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    user_id: number
    token: number
    refresh_token: number
    ip_address: number
    user_agent: number
    expires_at: number
    created_at: number
    updated_at: number
    revoked: number
    revoked_at: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    refresh_token?: true
    ip_address?: true
    user_agent?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    revoked?: true
    revoked_at?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    refresh_token?: true
    ip_address?: true
    user_agent?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    revoked?: true
    revoked_at?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    user_id?: true
    token?: true
    refresh_token?: true
    ip_address?: true
    user_agent?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    revoked?: true
    revoked_at?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    user_id: string
    token: string
    refresh_token: string | null
    ip_address: string | null
    user_agent: string | null
    expires_at: Date
    created_at: Date
    updated_at: Date
    revoked: boolean
    revoked_at: Date | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    token?: boolean
    refresh_token?: boolean
    ip_address?: boolean
    user_agent?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    revoked?: boolean
    revoked_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>



  export type SessionSelectScalar = {
    id?: boolean
    user_id?: boolean
    token?: boolean
    refresh_token?: boolean
    ip_address?: boolean
    user_agent?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    revoked?: boolean
    revoked_at?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "token" | "refresh_token" | "ip_address" | "user_agent" | "expires_at" | "created_at" | "updated_at" | "revoked" | "revoked_at", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      token: string
      refresh_token: string | null
      ip_address: string | null
      user_agent: string | null
      expires_at: Date
      created_at: Date
      updated_at: Date
      revoked: boolean
      revoked_at: Date | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly user_id: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly refresh_token: FieldRef<"Session", 'String'>
    readonly ip_address: FieldRef<"Session", 'String'>
    readonly user_agent: FieldRef<"Session", 'String'>
    readonly expires_at: FieldRef<"Session", 'DateTime'>
    readonly created_at: FieldRef<"Session", 'DateTime'>
    readonly updated_at: FieldRef<"Session", 'DateTime'>
    readonly revoked: FieldRef<"Session", 'Boolean'>
    readonly revoked_at: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model AuthLog
   */

  export type AggregateAuthLog = {
    _count: AuthLogCountAggregateOutputType | null
    _min: AuthLogMinAggregateOutputType | null
    _max: AuthLogMaxAggregateOutputType | null
  }

  export type AuthLogMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    event_type: $Enums.AuthEventType | null
    status: $Enums.AuthEventStatus | null
    ip_address: string | null
    user_agent: string | null
    details: string | null
    created_at: Date | null
  }

  export type AuthLogMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    event_type: $Enums.AuthEventType | null
    status: $Enums.AuthEventStatus | null
    ip_address: string | null
    user_agent: string | null
    details: string | null
    created_at: Date | null
  }

  export type AuthLogCountAggregateOutputType = {
    id: number
    user_id: number
    event_type: number
    status: number
    ip_address: number
    user_agent: number
    details: number
    created_at: number
    _all: number
  }


  export type AuthLogMinAggregateInputType = {
    id?: true
    user_id?: true
    event_type?: true
    status?: true
    ip_address?: true
    user_agent?: true
    details?: true
    created_at?: true
  }

  export type AuthLogMaxAggregateInputType = {
    id?: true
    user_id?: true
    event_type?: true
    status?: true
    ip_address?: true
    user_agent?: true
    details?: true
    created_at?: true
  }

  export type AuthLogCountAggregateInputType = {
    id?: true
    user_id?: true
    event_type?: true
    status?: true
    ip_address?: true
    user_agent?: true
    details?: true
    created_at?: true
    _all?: true
  }

  export type AuthLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthLog to aggregate.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthLogs
    **/
    _count?: true | AuthLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthLogMaxAggregateInputType
  }

  export type GetAuthLogAggregateType<T extends AuthLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthLog[P]>
      : GetScalarType<T[P], AggregateAuthLog[P]>
  }




  export type AuthLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthLogWhereInput
    orderBy?: AuthLogOrderByWithAggregationInput | AuthLogOrderByWithAggregationInput[]
    by: AuthLogScalarFieldEnum[] | AuthLogScalarFieldEnum
    having?: AuthLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthLogCountAggregateInputType | true
    _min?: AuthLogMinAggregateInputType
    _max?: AuthLogMaxAggregateInputType
  }

  export type AuthLogGroupByOutputType = {
    id: string
    user_id: string | null
    event_type: $Enums.AuthEventType
    status: $Enums.AuthEventStatus
    ip_address: string | null
    user_agent: string | null
    details: string | null
    created_at: Date
    _count: AuthLogCountAggregateOutputType | null
    _min: AuthLogMinAggregateOutputType | null
    _max: AuthLogMaxAggregateOutputType | null
  }

  type GetAuthLogGroupByPayload<T extends AuthLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuthLogGroupByOutputType[P]>
        }
      >
    >


  export type AuthLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_type?: boolean
    status?: boolean
    ip_address?: boolean
    user_agent?: boolean
    details?: boolean
    created_at?: boolean
    user?: boolean | AuthLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["authLog"]>



  export type AuthLogSelectScalar = {
    id?: boolean
    user_id?: boolean
    event_type?: boolean
    status?: boolean
    ip_address?: boolean
    user_agent?: boolean
    details?: boolean
    created_at?: boolean
  }

  export type AuthLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "event_type" | "status" | "ip_address" | "user_agent" | "details" | "created_at", ExtArgs["result"]["authLog"]>
  export type AuthLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuthLog$userArgs<ExtArgs>
  }

  export type $AuthLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuthLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string | null
      event_type: $Enums.AuthEventType
      status: $Enums.AuthEventStatus
      ip_address: string | null
      user_agent: string | null
      details: string | null
      created_at: Date
    }, ExtArgs["result"]["authLog"]>
    composites: {}
  }

  type AuthLogGetPayload<S extends boolean | null | undefined | AuthLogDefaultArgs> = $Result.GetResult<Prisma.$AuthLogPayload, S>

  type AuthLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthLogCountAggregateInputType | true
    }

  export interface AuthLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthLog'], meta: { name: 'AuthLog' } }
    /**
     * Find zero or one AuthLog that matches the filter.
     * @param {AuthLogFindUniqueArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthLogFindUniqueArgs>(args: SelectSubset<T, AuthLogFindUniqueArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuthLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthLogFindUniqueOrThrowArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogFindFirstArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthLogFindFirstArgs>(args?: SelectSubset<T, AuthLogFindFirstArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogFindFirstOrThrowArgs} args - Arguments to find a AuthLog
     * @example
     * // Get one AuthLog
     * const authLog = await prisma.authLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuthLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthLogs
     * const authLogs = await prisma.authLog.findMany()
     * 
     * // Get first 10 AuthLogs
     * const authLogs = await prisma.authLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authLogWithIdOnly = await prisma.authLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthLogFindManyArgs>(args?: SelectSubset<T, AuthLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuthLog.
     * @param {AuthLogCreateArgs} args - Arguments to create a AuthLog.
     * @example
     * // Create one AuthLog
     * const AuthLog = await prisma.authLog.create({
     *   data: {
     *     // ... data to create a AuthLog
     *   }
     * })
     * 
     */
    create<T extends AuthLogCreateArgs>(args: SelectSubset<T, AuthLogCreateArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuthLogs.
     * @param {AuthLogCreateManyArgs} args - Arguments to create many AuthLogs.
     * @example
     * // Create many AuthLogs
     * const authLog = await prisma.authLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthLogCreateManyArgs>(args?: SelectSubset<T, AuthLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuthLog.
     * @param {AuthLogDeleteArgs} args - Arguments to delete one AuthLog.
     * @example
     * // Delete one AuthLog
     * const AuthLog = await prisma.authLog.delete({
     *   where: {
     *     // ... filter to delete one AuthLog
     *   }
     * })
     * 
     */
    delete<T extends AuthLogDeleteArgs>(args: SelectSubset<T, AuthLogDeleteArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuthLog.
     * @param {AuthLogUpdateArgs} args - Arguments to update one AuthLog.
     * @example
     * // Update one AuthLog
     * const authLog = await prisma.authLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthLogUpdateArgs>(args: SelectSubset<T, AuthLogUpdateArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuthLogs.
     * @param {AuthLogDeleteManyArgs} args - Arguments to filter AuthLogs to delete.
     * @example
     * // Delete a few AuthLogs
     * const { count } = await prisma.authLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthLogDeleteManyArgs>(args?: SelectSubset<T, AuthLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthLogs
     * const authLog = await prisma.authLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthLogUpdateManyArgs>(args: SelectSubset<T, AuthLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthLog.
     * @param {AuthLogUpsertArgs} args - Arguments to update or create a AuthLog.
     * @example
     * // Update or create a AuthLog
     * const authLog = await prisma.authLog.upsert({
     *   create: {
     *     // ... data to create a AuthLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthLog we want to update
     *   }
     * })
     */
    upsert<T extends AuthLogUpsertArgs>(args: SelectSubset<T, AuthLogUpsertArgs<ExtArgs>>): Prisma__AuthLogClient<$Result.GetResult<Prisma.$AuthLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuthLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogCountArgs} args - Arguments to filter AuthLogs to count.
     * @example
     * // Count the number of AuthLogs
     * const count = await prisma.authLog.count({
     *   where: {
     *     // ... the filter for the AuthLogs we want to count
     *   }
     * })
    **/
    count<T extends AuthLogCountArgs>(
      args?: Subset<T, AuthLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthLogAggregateArgs>(args: Subset<T, AuthLogAggregateArgs>): Prisma.PrismaPromise<GetAuthLogAggregateType<T>>

    /**
     * Group by AuthLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthLogGroupByArgs['orderBy'] }
        : { orderBy?: AuthLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthLog model
   */
  readonly fields: AuthLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuthLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuthLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuthLog model
   */
  interface AuthLogFieldRefs {
    readonly id: FieldRef<"AuthLog", 'String'>
    readonly user_id: FieldRef<"AuthLog", 'String'>
    readonly event_type: FieldRef<"AuthLog", 'AuthEventType'>
    readonly status: FieldRef<"AuthLog", 'AuthEventStatus'>
    readonly ip_address: FieldRef<"AuthLog", 'String'>
    readonly user_agent: FieldRef<"AuthLog", 'String'>
    readonly details: FieldRef<"AuthLog", 'String'>
    readonly created_at: FieldRef<"AuthLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuthLog findUnique
   */
  export type AuthLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog findUniqueOrThrow
   */
  export type AuthLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog findFirst
   */
  export type AuthLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthLogs.
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthLogs.
     */
    distinct?: AuthLogScalarFieldEnum | AuthLogScalarFieldEnum[]
  }

  /**
   * AuthLog findFirstOrThrow
   */
  export type AuthLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLog to fetch.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthLogs.
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthLogs.
     */
    distinct?: AuthLogScalarFieldEnum | AuthLogScalarFieldEnum[]
  }

  /**
   * AuthLog findMany
   */
  export type AuthLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter, which AuthLogs to fetch.
     */
    where?: AuthLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthLogs to fetch.
     */
    orderBy?: AuthLogOrderByWithRelationInput | AuthLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthLogs.
     */
    cursor?: AuthLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthLogs.
     */
    skip?: number
    distinct?: AuthLogScalarFieldEnum | AuthLogScalarFieldEnum[]
  }

  /**
   * AuthLog create
   */
  export type AuthLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthLog.
     */
    data: XOR<AuthLogCreateInput, AuthLogUncheckedCreateInput>
  }

  /**
   * AuthLog createMany
   */
  export type AuthLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthLogs.
     */
    data: AuthLogCreateManyInput | AuthLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthLog update
   */
  export type AuthLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthLog.
     */
    data: XOR<AuthLogUpdateInput, AuthLogUncheckedUpdateInput>
    /**
     * Choose, which AuthLog to update.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog updateMany
   */
  export type AuthLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthLogs.
     */
    data: XOR<AuthLogUpdateManyMutationInput, AuthLogUncheckedUpdateManyInput>
    /**
     * Filter which AuthLogs to update
     */
    where?: AuthLogWhereInput
    /**
     * Limit how many AuthLogs to update.
     */
    limit?: number
  }

  /**
   * AuthLog upsert
   */
  export type AuthLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthLog to update in case it exists.
     */
    where: AuthLogWhereUniqueInput
    /**
     * In case the AuthLog found by the `where` argument doesn't exist, create a new AuthLog with this data.
     */
    create: XOR<AuthLogCreateInput, AuthLogUncheckedCreateInput>
    /**
     * In case the AuthLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthLogUpdateInput, AuthLogUncheckedUpdateInput>
  }

  /**
   * AuthLog delete
   */
  export type AuthLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
    /**
     * Filter which AuthLog to delete.
     */
    where: AuthLogWhereUniqueInput
  }

  /**
   * AuthLog deleteMany
   */
  export type AuthLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthLogs to delete
     */
    where?: AuthLogWhereInput
    /**
     * Limit how many AuthLogs to delete.
     */
    limit?: number
  }

  /**
   * AuthLog.user
   */
  export type AuthLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuthLog without action
   */
  export type AuthLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthLog
     */
    select?: AuthLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthLog
     */
    omit?: AuthLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthLogInclude<ExtArgs> | null
  }


  /**
   * Model EmailVerification
   */

  export type AggregateEmailVerification = {
    _count: EmailVerificationCountAggregateOutputType | null
    _min: EmailVerificationMinAggregateOutputType | null
    _max: EmailVerificationMaxAggregateOutputType | null
  }

  export type EmailVerificationMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires_at: Date | null
    created_at: Date | null
  }

  export type EmailVerificationMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    expires_at: Date | null
    created_at: Date | null
  }

  export type EmailVerificationCountAggregateOutputType = {
    id: number
    email: number
    token: number
    expires_at: number
    created_at: number
    _all: number
  }


  export type EmailVerificationMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires_at?: true
    created_at?: true
  }

  export type EmailVerificationMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires_at?: true
    created_at?: true
  }

  export type EmailVerificationCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    expires_at?: true
    created_at?: true
    _all?: true
  }

  export type EmailVerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerification to aggregate.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailVerifications
    **/
    _count?: true | EmailVerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailVerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailVerificationMaxAggregateInputType
  }

  export type GetEmailVerificationAggregateType<T extends EmailVerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailVerification[P]>
      : GetScalarType<T[P], AggregateEmailVerification[P]>
  }




  export type EmailVerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailVerificationWhereInput
    orderBy?: EmailVerificationOrderByWithAggregationInput | EmailVerificationOrderByWithAggregationInput[]
    by: EmailVerificationScalarFieldEnum[] | EmailVerificationScalarFieldEnum
    having?: EmailVerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailVerificationCountAggregateInputType | true
    _min?: EmailVerificationMinAggregateInputType
    _max?: EmailVerificationMaxAggregateInputType
  }

  export type EmailVerificationGroupByOutputType = {
    id: string
    email: string
    token: string
    expires_at: Date
    created_at: Date
    _count: EmailVerificationCountAggregateOutputType | null
    _min: EmailVerificationMinAggregateOutputType | null
    _max: EmailVerificationMaxAggregateOutputType | null
  }

  type GetEmailVerificationGroupByPayload<T extends EmailVerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailVerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailVerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
            : GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
        }
      >
    >


  export type EmailVerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    expires_at?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["emailVerification"]>



  export type EmailVerificationSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    expires_at?: boolean
    created_at?: boolean
  }

  export type EmailVerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "expires_at" | "created_at", ExtArgs["result"]["emailVerification"]>

  export type $EmailVerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailVerification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      expires_at: Date
      created_at: Date
    }, ExtArgs["result"]["emailVerification"]>
    composites: {}
  }

  type EmailVerificationGetPayload<S extends boolean | null | undefined | EmailVerificationDefaultArgs> = $Result.GetResult<Prisma.$EmailVerificationPayload, S>

  type EmailVerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailVerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailVerificationCountAggregateInputType | true
    }

  export interface EmailVerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailVerification'], meta: { name: 'EmailVerification' } }
    /**
     * Find zero or one EmailVerification that matches the filter.
     * @param {EmailVerificationFindUniqueArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailVerificationFindUniqueArgs>(args: SelectSubset<T, EmailVerificationFindUniqueArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailVerification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailVerificationFindUniqueOrThrowArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailVerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailVerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailVerification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindFirstArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailVerificationFindFirstArgs>(args?: SelectSubset<T, EmailVerificationFindFirstArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailVerification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindFirstOrThrowArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailVerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailVerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailVerifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailVerifications
     * const emailVerifications = await prisma.emailVerification.findMany()
     * 
     * // Get first 10 EmailVerifications
     * const emailVerifications = await prisma.emailVerification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailVerificationWithIdOnly = await prisma.emailVerification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailVerificationFindManyArgs>(args?: SelectSubset<T, EmailVerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailVerification.
     * @param {EmailVerificationCreateArgs} args - Arguments to create a EmailVerification.
     * @example
     * // Create one EmailVerification
     * const EmailVerification = await prisma.emailVerification.create({
     *   data: {
     *     // ... data to create a EmailVerification
     *   }
     * })
     * 
     */
    create<T extends EmailVerificationCreateArgs>(args: SelectSubset<T, EmailVerificationCreateArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailVerifications.
     * @param {EmailVerificationCreateManyArgs} args - Arguments to create many EmailVerifications.
     * @example
     * // Create many EmailVerifications
     * const emailVerification = await prisma.emailVerification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailVerificationCreateManyArgs>(args?: SelectSubset<T, EmailVerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmailVerification.
     * @param {EmailVerificationDeleteArgs} args - Arguments to delete one EmailVerification.
     * @example
     * // Delete one EmailVerification
     * const EmailVerification = await prisma.emailVerification.delete({
     *   where: {
     *     // ... filter to delete one EmailVerification
     *   }
     * })
     * 
     */
    delete<T extends EmailVerificationDeleteArgs>(args: SelectSubset<T, EmailVerificationDeleteArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailVerification.
     * @param {EmailVerificationUpdateArgs} args - Arguments to update one EmailVerification.
     * @example
     * // Update one EmailVerification
     * const emailVerification = await prisma.emailVerification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailVerificationUpdateArgs>(args: SelectSubset<T, EmailVerificationUpdateArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailVerifications.
     * @param {EmailVerificationDeleteManyArgs} args - Arguments to filter EmailVerifications to delete.
     * @example
     * // Delete a few EmailVerifications
     * const { count } = await prisma.emailVerification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailVerificationDeleteManyArgs>(args?: SelectSubset<T, EmailVerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailVerifications
     * const emailVerification = await prisma.emailVerification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailVerificationUpdateManyArgs>(args: SelectSubset<T, EmailVerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailVerification.
     * @param {EmailVerificationUpsertArgs} args - Arguments to update or create a EmailVerification.
     * @example
     * // Update or create a EmailVerification
     * const emailVerification = await prisma.emailVerification.upsert({
     *   create: {
     *     // ... data to create a EmailVerification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailVerification we want to update
     *   }
     * })
     */
    upsert<T extends EmailVerificationUpsertArgs>(args: SelectSubset<T, EmailVerificationUpsertArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationCountArgs} args - Arguments to filter EmailVerifications to count.
     * @example
     * // Count the number of EmailVerifications
     * const count = await prisma.emailVerification.count({
     *   where: {
     *     // ... the filter for the EmailVerifications we want to count
     *   }
     * })
    **/
    count<T extends EmailVerificationCountArgs>(
      args?: Subset<T, EmailVerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailVerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailVerificationAggregateArgs>(args: Subset<T, EmailVerificationAggregateArgs>): Prisma.PrismaPromise<GetEmailVerificationAggregateType<T>>

    /**
     * Group by EmailVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailVerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailVerificationGroupByArgs['orderBy'] }
        : { orderBy?: EmailVerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailVerification model
   */
  readonly fields: EmailVerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailVerification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailVerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailVerification model
   */
  interface EmailVerificationFieldRefs {
    readonly id: FieldRef<"EmailVerification", 'String'>
    readonly email: FieldRef<"EmailVerification", 'String'>
    readonly token: FieldRef<"EmailVerification", 'String'>
    readonly expires_at: FieldRef<"EmailVerification", 'DateTime'>
    readonly created_at: FieldRef<"EmailVerification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailVerification findUnique
   */
  export type EmailVerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification findUniqueOrThrow
   */
  export type EmailVerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification findFirst
   */
  export type EmailVerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerifications.
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerifications.
     */
    distinct?: EmailVerificationScalarFieldEnum | EmailVerificationScalarFieldEnum[]
  }

  /**
   * EmailVerification findFirstOrThrow
   */
  export type EmailVerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerifications.
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerifications.
     */
    distinct?: EmailVerificationScalarFieldEnum | EmailVerificationScalarFieldEnum[]
  }

  /**
   * EmailVerification findMany
   */
  export type EmailVerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Filter, which EmailVerifications to fetch.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailVerifications.
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    distinct?: EmailVerificationScalarFieldEnum | EmailVerificationScalarFieldEnum[]
  }

  /**
   * EmailVerification create
   */
  export type EmailVerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailVerification.
     */
    data: XOR<EmailVerificationCreateInput, EmailVerificationUncheckedCreateInput>
  }

  /**
   * EmailVerification createMany
   */
  export type EmailVerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailVerifications.
     */
    data: EmailVerificationCreateManyInput | EmailVerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailVerification update
   */
  export type EmailVerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailVerification.
     */
    data: XOR<EmailVerificationUpdateInput, EmailVerificationUncheckedUpdateInput>
    /**
     * Choose, which EmailVerification to update.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification updateMany
   */
  export type EmailVerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailVerifications.
     */
    data: XOR<EmailVerificationUpdateManyMutationInput, EmailVerificationUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerifications to update
     */
    where?: EmailVerificationWhereInput
    /**
     * Limit how many EmailVerifications to update.
     */
    limit?: number
  }

  /**
   * EmailVerification upsert
   */
  export type EmailVerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailVerification to update in case it exists.
     */
    where: EmailVerificationWhereUniqueInput
    /**
     * In case the EmailVerification found by the `where` argument doesn't exist, create a new EmailVerification with this data.
     */
    create: XOR<EmailVerificationCreateInput, EmailVerificationUncheckedCreateInput>
    /**
     * In case the EmailVerification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailVerificationUpdateInput, EmailVerificationUncheckedUpdateInput>
  }

  /**
   * EmailVerification delete
   */
  export type EmailVerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Filter which EmailVerification to delete.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification deleteMany
   */
  export type EmailVerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerifications to delete
     */
    where?: EmailVerificationWhereInput
    /**
     * Limit how many EmailVerifications to delete.
     */
    limit?: number
  }

  /**
   * EmailVerification without action
   */
  export type EmailVerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
  }


  /**
   * Model PasswordReset
   */

  export type AggregatePasswordReset = {
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  export type PasswordResetMinAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    token: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    used: boolean | null
  }

  export type PasswordResetMaxAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    token: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    used: boolean | null
  }

  export type PasswordResetCountAggregateOutputType = {
    id: number
    app_user_id: number
    token: number
    expires_at: number
    created_at: number
    updated_at: number
    used: number
    _all: number
  }


  export type PasswordResetMinAggregateInputType = {
    id?: true
    app_user_id?: true
    token?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    used?: true
  }

  export type PasswordResetMaxAggregateInputType = {
    id?: true
    app_user_id?: true
    token?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    used?: true
  }

  export type PasswordResetCountAggregateInputType = {
    id?: true
    app_user_id?: true
    token?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    used?: true
    _all?: true
  }

  export type PasswordResetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordReset to aggregate.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResets
    **/
    _count?: true | PasswordResetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetMaxAggregateInputType
  }

  export type GetPasswordResetAggregateType<T extends PasswordResetAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordReset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordReset[P]>
      : GetScalarType<T[P], AggregatePasswordReset[P]>
  }




  export type PasswordResetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithAggregationInput | PasswordResetOrderByWithAggregationInput[]
    by: PasswordResetScalarFieldEnum[] | PasswordResetScalarFieldEnum
    having?: PasswordResetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetCountAggregateInputType | true
    _min?: PasswordResetMinAggregateInputType
    _max?: PasswordResetMaxAggregateInputType
  }

  export type PasswordResetGroupByOutputType = {
    id: string
    app_user_id: string
    token: string
    expires_at: Date
    created_at: Date
    updated_at: Date
    used: boolean
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  type GetPasswordResetGroupByPayload<T extends PasswordResetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    app_user_id?: boolean
    token?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    used?: boolean
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>



  export type PasswordResetSelectScalar = {
    id?: boolean
    app_user_id?: boolean
    token?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    used?: boolean
  }

  export type PasswordResetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "app_user_id" | "token" | "expires_at" | "created_at" | "updated_at" | "used", ExtArgs["result"]["passwordReset"]>
  export type PasswordResetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
  }

  export type $PasswordResetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordReset"
    objects: {
      app_user: Prisma.$AppUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      app_user_id: string
      token: string
      expires_at: Date
      created_at: Date
      updated_at: Date
      used: boolean
    }, ExtArgs["result"]["passwordReset"]>
    composites: {}
  }

  type PasswordResetGetPayload<S extends boolean | null | undefined | PasswordResetDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetPayload, S>

  type PasswordResetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetCountAggregateInputType | true
    }

  export interface PasswordResetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordReset'], meta: { name: 'PasswordReset' } }
    /**
     * Find zero or one PasswordReset that matches the filter.
     * @param {PasswordResetFindUniqueArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetFindUniqueArgs>(args: SelectSubset<T, PasswordResetFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordReset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetFindUniqueOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordReset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetFindFirstArgs>(args?: SelectSubset<T, PasswordResetFindFirstArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordReset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetFindManyArgs>(args?: SelectSubset<T, PasswordResetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordReset.
     * @param {PasswordResetCreateArgs} args - Arguments to create a PasswordReset.
     * @example
     * // Create one PasswordReset
     * const PasswordReset = await prisma.passwordReset.create({
     *   data: {
     *     // ... data to create a PasswordReset
     *   }
     * })
     * 
     */
    create<T extends PasswordResetCreateArgs>(args: SelectSubset<T, PasswordResetCreateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResets.
     * @param {PasswordResetCreateManyArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetCreateManyArgs>(args?: SelectSubset<T, PasswordResetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordReset.
     * @param {PasswordResetDeleteArgs} args - Arguments to delete one PasswordReset.
     * @example
     * // Delete one PasswordReset
     * const PasswordReset = await prisma.passwordReset.delete({
     *   where: {
     *     // ... filter to delete one PasswordReset
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetDeleteArgs>(args: SelectSubset<T, PasswordResetDeleteArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordReset.
     * @param {PasswordResetUpdateArgs} args - Arguments to update one PasswordReset.
     * @example
     * // Update one PasswordReset
     * const passwordReset = await prisma.passwordReset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetUpdateArgs>(args: SelectSubset<T, PasswordResetUpdateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResets.
     * @param {PasswordResetDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordReset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetDeleteManyArgs>(args?: SelectSubset<T, PasswordResetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetUpdateManyArgs>(args: SelectSubset<T, PasswordResetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordReset.
     * @param {PasswordResetUpsertArgs} args - Arguments to update or create a PasswordReset.
     * @example
     * // Update or create a PasswordReset
     * const passwordReset = await prisma.passwordReset.upsert({
     *   create: {
     *     // ... data to create a PasswordReset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordReset we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetUpsertArgs>(args: SelectSubset<T, PasswordResetUpsertArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordReset.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetCountArgs>(
      args?: Subset<T, PasswordResetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetAggregateArgs>(args: Subset<T, PasswordResetAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetAggregateType<T>>

    /**
     * Group by PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordReset model
   */
  readonly fields: PasswordResetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordReset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    app_user<T extends AppUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppUserDefaultArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordReset model
   */
  interface PasswordResetFieldRefs {
    readonly id: FieldRef<"PasswordReset", 'String'>
    readonly app_user_id: FieldRef<"PasswordReset", 'String'>
    readonly token: FieldRef<"PasswordReset", 'String'>
    readonly expires_at: FieldRef<"PasswordReset", 'DateTime'>
    readonly created_at: FieldRef<"PasswordReset", 'DateTime'>
    readonly updated_at: FieldRef<"PasswordReset", 'DateTime'>
    readonly used: FieldRef<"PasswordReset", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PasswordReset findUnique
   */
  export type PasswordResetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findUniqueOrThrow
   */
  export type PasswordResetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findFirst
   */
  export type PasswordResetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findFirstOrThrow
   */
  export type PasswordResetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findMany
   */
  export type PasswordResetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResets to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset create
   */
  export type PasswordResetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordReset.
     */
    data: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
  }

  /**
   * PasswordReset createMany
   */
  export type PasswordResetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordReset update
   */
  export type PasswordResetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordReset.
     */
    data: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
    /**
     * Choose, which PasswordReset to update.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset updateMany
   */
  export type PasswordResetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to update.
     */
    limit?: number
  }

  /**
   * PasswordReset upsert
   */
  export type PasswordResetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordReset to update in case it exists.
     */
    where: PasswordResetWhereUniqueInput
    /**
     * In case the PasswordReset found by the `where` argument doesn't exist, create a new PasswordReset with this data.
     */
    create: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
    /**
     * In case the PasswordReset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
  }

  /**
   * PasswordReset delete
   */
  export type PasswordResetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter which PasswordReset to delete.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset deleteMany
   */
  export type PasswordResetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResets to delete
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to delete.
     */
    limit?: number
  }

  /**
   * PasswordReset without action
   */
  export type PasswordResetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
  }


  /**
   * Model AuthEvent
   */

  export type AggregateAuthEvent = {
    _count: AuthEventCountAggregateOutputType | null
    _min: AuthEventMinAggregateOutputType | null
    _max: AuthEventMaxAggregateOutputType | null
  }

  export type AuthEventMinAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    event_type: string | null
    ip_address: string | null
    user_agent: string | null
    created_at: Date | null
  }

  export type AuthEventMaxAggregateOutputType = {
    id: string | null
    app_user_id: string | null
    event_type: string | null
    ip_address: string | null
    user_agent: string | null
    created_at: Date | null
  }

  export type AuthEventCountAggregateOutputType = {
    id: number
    app_user_id: number
    event_type: number
    ip_address: number
    user_agent: number
    created_at: number
    additional_info: number
    _all: number
  }


  export type AuthEventMinAggregateInputType = {
    id?: true
    app_user_id?: true
    event_type?: true
    ip_address?: true
    user_agent?: true
    created_at?: true
  }

  export type AuthEventMaxAggregateInputType = {
    id?: true
    app_user_id?: true
    event_type?: true
    ip_address?: true
    user_agent?: true
    created_at?: true
  }

  export type AuthEventCountAggregateInputType = {
    id?: true
    app_user_id?: true
    event_type?: true
    ip_address?: true
    user_agent?: true
    created_at?: true
    additional_info?: true
    _all?: true
  }

  export type AuthEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthEvent to aggregate.
     */
    where?: AuthEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthEvents to fetch.
     */
    orderBy?: AuthEventOrderByWithRelationInput | AuthEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuthEvents
    **/
    _count?: true | AuthEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthEventMaxAggregateInputType
  }

  export type GetAuthEventAggregateType<T extends AuthEventAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthEvent[P]>
      : GetScalarType<T[P], AggregateAuthEvent[P]>
  }




  export type AuthEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthEventWhereInput
    orderBy?: AuthEventOrderByWithAggregationInput | AuthEventOrderByWithAggregationInput[]
    by: AuthEventScalarFieldEnum[] | AuthEventScalarFieldEnum
    having?: AuthEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthEventCountAggregateInputType | true
    _min?: AuthEventMinAggregateInputType
    _max?: AuthEventMaxAggregateInputType
  }

  export type AuthEventGroupByOutputType = {
    id: string
    app_user_id: string
    event_type: string
    ip_address: string | null
    user_agent: string | null
    created_at: Date
    additional_info: JsonValue | null
    _count: AuthEventCountAggregateOutputType | null
    _min: AuthEventMinAggregateOutputType | null
    _max: AuthEventMaxAggregateOutputType | null
  }

  type GetAuthEventGroupByPayload<T extends AuthEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthEventGroupByOutputType[P]>
            : GetScalarType<T[P], AuthEventGroupByOutputType[P]>
        }
      >
    >


  export type AuthEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    app_user_id?: boolean
    event_type?: boolean
    ip_address?: boolean
    user_agent?: boolean
    created_at?: boolean
    additional_info?: boolean
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authEvent"]>



  export type AuthEventSelectScalar = {
    id?: boolean
    app_user_id?: boolean
    event_type?: boolean
    ip_address?: boolean
    user_agent?: boolean
    created_at?: boolean
    additional_info?: boolean
  }

  export type AuthEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "app_user_id" | "event_type" | "ip_address" | "user_agent" | "created_at" | "additional_info", ExtArgs["result"]["authEvent"]>
  export type AuthEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app_user?: boolean | AppUserDefaultArgs<ExtArgs>
  }

  export type $AuthEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuthEvent"
    objects: {
      app_user: Prisma.$AppUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      app_user_id: string
      event_type: string
      ip_address: string | null
      user_agent: string | null
      created_at: Date
      additional_info: Prisma.JsonValue | null
    }, ExtArgs["result"]["authEvent"]>
    composites: {}
  }

  type AuthEventGetPayload<S extends boolean | null | undefined | AuthEventDefaultArgs> = $Result.GetResult<Prisma.$AuthEventPayload, S>

  type AuthEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthEventCountAggregateInputType | true
    }

  export interface AuthEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuthEvent'], meta: { name: 'AuthEvent' } }
    /**
     * Find zero or one AuthEvent that matches the filter.
     * @param {AuthEventFindUniqueArgs} args - Arguments to find a AuthEvent
     * @example
     * // Get one AuthEvent
     * const authEvent = await prisma.authEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthEventFindUniqueArgs>(args: SelectSubset<T, AuthEventFindUniqueArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuthEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthEventFindUniqueOrThrowArgs} args - Arguments to find a AuthEvent
     * @example
     * // Get one AuthEvent
     * const authEvent = await prisma.authEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthEventFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthEventFindFirstArgs} args - Arguments to find a AuthEvent
     * @example
     * // Get one AuthEvent
     * const authEvent = await prisma.authEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthEventFindFirstArgs>(args?: SelectSubset<T, AuthEventFindFirstArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuthEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthEventFindFirstOrThrowArgs} args - Arguments to find a AuthEvent
     * @example
     * // Get one AuthEvent
     * const authEvent = await prisma.authEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthEventFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuthEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuthEvents
     * const authEvents = await prisma.authEvent.findMany()
     * 
     * // Get first 10 AuthEvents
     * const authEvents = await prisma.authEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authEventWithIdOnly = await prisma.authEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthEventFindManyArgs>(args?: SelectSubset<T, AuthEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuthEvent.
     * @param {AuthEventCreateArgs} args - Arguments to create a AuthEvent.
     * @example
     * // Create one AuthEvent
     * const AuthEvent = await prisma.authEvent.create({
     *   data: {
     *     // ... data to create a AuthEvent
     *   }
     * })
     * 
     */
    create<T extends AuthEventCreateArgs>(args: SelectSubset<T, AuthEventCreateArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuthEvents.
     * @param {AuthEventCreateManyArgs} args - Arguments to create many AuthEvents.
     * @example
     * // Create many AuthEvents
     * const authEvent = await prisma.authEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthEventCreateManyArgs>(args?: SelectSubset<T, AuthEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuthEvent.
     * @param {AuthEventDeleteArgs} args - Arguments to delete one AuthEvent.
     * @example
     * // Delete one AuthEvent
     * const AuthEvent = await prisma.authEvent.delete({
     *   where: {
     *     // ... filter to delete one AuthEvent
     *   }
     * })
     * 
     */
    delete<T extends AuthEventDeleteArgs>(args: SelectSubset<T, AuthEventDeleteArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuthEvent.
     * @param {AuthEventUpdateArgs} args - Arguments to update one AuthEvent.
     * @example
     * // Update one AuthEvent
     * const authEvent = await prisma.authEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthEventUpdateArgs>(args: SelectSubset<T, AuthEventUpdateArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuthEvents.
     * @param {AuthEventDeleteManyArgs} args - Arguments to filter AuthEvents to delete.
     * @example
     * // Delete a few AuthEvents
     * const { count } = await prisma.authEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthEventDeleteManyArgs>(args?: SelectSubset<T, AuthEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuthEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuthEvents
     * const authEvent = await prisma.authEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthEventUpdateManyArgs>(args: SelectSubset<T, AuthEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuthEvent.
     * @param {AuthEventUpsertArgs} args - Arguments to update or create a AuthEvent.
     * @example
     * // Update or create a AuthEvent
     * const authEvent = await prisma.authEvent.upsert({
     *   create: {
     *     // ... data to create a AuthEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuthEvent we want to update
     *   }
     * })
     */
    upsert<T extends AuthEventUpsertArgs>(args: SelectSubset<T, AuthEventUpsertArgs<ExtArgs>>): Prisma__AuthEventClient<$Result.GetResult<Prisma.$AuthEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuthEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthEventCountArgs} args - Arguments to filter AuthEvents to count.
     * @example
     * // Count the number of AuthEvents
     * const count = await prisma.authEvent.count({
     *   where: {
     *     // ... the filter for the AuthEvents we want to count
     *   }
     * })
    **/
    count<T extends AuthEventCountArgs>(
      args?: Subset<T, AuthEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuthEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthEventAggregateArgs>(args: Subset<T, AuthEventAggregateArgs>): Prisma.PrismaPromise<GetAuthEventAggregateType<T>>

    /**
     * Group by AuthEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthEventGroupByArgs['orderBy'] }
        : { orderBy?: AuthEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuthEvent model
   */
  readonly fields: AuthEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuthEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    app_user<T extends AppUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppUserDefaultArgs<ExtArgs>>): Prisma__AppUserClient<$Result.GetResult<Prisma.$AppUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuthEvent model
   */
  interface AuthEventFieldRefs {
    readonly id: FieldRef<"AuthEvent", 'String'>
    readonly app_user_id: FieldRef<"AuthEvent", 'String'>
    readonly event_type: FieldRef<"AuthEvent", 'String'>
    readonly ip_address: FieldRef<"AuthEvent", 'String'>
    readonly user_agent: FieldRef<"AuthEvent", 'String'>
    readonly created_at: FieldRef<"AuthEvent", 'DateTime'>
    readonly additional_info: FieldRef<"AuthEvent", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * AuthEvent findUnique
   */
  export type AuthEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * Filter, which AuthEvent to fetch.
     */
    where: AuthEventWhereUniqueInput
  }

  /**
   * AuthEvent findUniqueOrThrow
   */
  export type AuthEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * Filter, which AuthEvent to fetch.
     */
    where: AuthEventWhereUniqueInput
  }

  /**
   * AuthEvent findFirst
   */
  export type AuthEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * Filter, which AuthEvent to fetch.
     */
    where?: AuthEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthEvents to fetch.
     */
    orderBy?: AuthEventOrderByWithRelationInput | AuthEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthEvents.
     */
    cursor?: AuthEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthEvents.
     */
    distinct?: AuthEventScalarFieldEnum | AuthEventScalarFieldEnum[]
  }

  /**
   * AuthEvent findFirstOrThrow
   */
  export type AuthEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * Filter, which AuthEvent to fetch.
     */
    where?: AuthEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthEvents to fetch.
     */
    orderBy?: AuthEventOrderByWithRelationInput | AuthEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuthEvents.
     */
    cursor?: AuthEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuthEvents.
     */
    distinct?: AuthEventScalarFieldEnum | AuthEventScalarFieldEnum[]
  }

  /**
   * AuthEvent findMany
   */
  export type AuthEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * Filter, which AuthEvents to fetch.
     */
    where?: AuthEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuthEvents to fetch.
     */
    orderBy?: AuthEventOrderByWithRelationInput | AuthEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuthEvents.
     */
    cursor?: AuthEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuthEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuthEvents.
     */
    skip?: number
    distinct?: AuthEventScalarFieldEnum | AuthEventScalarFieldEnum[]
  }

  /**
   * AuthEvent create
   */
  export type AuthEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * The data needed to create a AuthEvent.
     */
    data: XOR<AuthEventCreateInput, AuthEventUncheckedCreateInput>
  }

  /**
   * AuthEvent createMany
   */
  export type AuthEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuthEvents.
     */
    data: AuthEventCreateManyInput | AuthEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuthEvent update
   */
  export type AuthEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * The data needed to update a AuthEvent.
     */
    data: XOR<AuthEventUpdateInput, AuthEventUncheckedUpdateInput>
    /**
     * Choose, which AuthEvent to update.
     */
    where: AuthEventWhereUniqueInput
  }

  /**
   * AuthEvent updateMany
   */
  export type AuthEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuthEvents.
     */
    data: XOR<AuthEventUpdateManyMutationInput, AuthEventUncheckedUpdateManyInput>
    /**
     * Filter which AuthEvents to update
     */
    where?: AuthEventWhereInput
    /**
     * Limit how many AuthEvents to update.
     */
    limit?: number
  }

  /**
   * AuthEvent upsert
   */
  export type AuthEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * The filter to search for the AuthEvent to update in case it exists.
     */
    where: AuthEventWhereUniqueInput
    /**
     * In case the AuthEvent found by the `where` argument doesn't exist, create a new AuthEvent with this data.
     */
    create: XOR<AuthEventCreateInput, AuthEventUncheckedCreateInput>
    /**
     * In case the AuthEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthEventUpdateInput, AuthEventUncheckedUpdateInput>
  }

  /**
   * AuthEvent delete
   */
  export type AuthEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
    /**
     * Filter which AuthEvent to delete.
     */
    where: AuthEventWhereUniqueInput
  }

  /**
   * AuthEvent deleteMany
   */
  export type AuthEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuthEvents to delete
     */
    where?: AuthEventWhereInput
    /**
     * Limit how many AuthEvents to delete.
     */
    limit?: number
  }

  /**
   * AuthEvent without action
   */
  export type AuthEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthEvent
     */
    select?: AuthEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuthEvent
     */
    omit?: AuthEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthEventInclude<ExtArgs> | null
  }


  /**
   * Model TestType
   */

  export type AggregateTestType = {
    _count: TestTypeCountAggregateOutputType | null
    _min: TestTypeMinAggregateOutputType | null
    _max: TestTypeMaxAggregateOutputType | null
  }

  export type TestTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    api_key_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TestTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    api_key_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TestTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    api_key_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TestTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    api_key_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TestTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    api_key_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TestTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    api_key_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TestTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestType to aggregate.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestTypes
    **/
    _count?: true | TestTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestTypeMaxAggregateInputType
  }

  export type GetTestTypeAggregateType<T extends TestTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateTestType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestType[P]>
      : GetScalarType<T[P], AggregateTestType[P]>
  }




  export type TestTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestTypeWhereInput
    orderBy?: TestTypeOrderByWithAggregationInput | TestTypeOrderByWithAggregationInput[]
    by: TestTypeScalarFieldEnum[] | TestTypeScalarFieldEnum
    having?: TestTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestTypeCountAggregateInputType | true
    _min?: TestTypeMinAggregateInputType
    _max?: TestTypeMaxAggregateInputType
  }

  export type TestTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    api_key_id: string | null
    created_at: Date
    updated_at: Date
    _count: TestTypeCountAggregateOutputType | null
    _min: TestTypeMinAggregateOutputType | null
    _max: TestTypeMaxAggregateOutputType | null
  }

  type GetTestTypeGroupByPayload<T extends TestTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestTypeGroupByOutputType[P]>
            : GetScalarType<T[P], TestTypeGroupByOutputType[P]>
        }
      >
    >


  export type TestTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    api_key_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    api_key?: boolean | TestType$api_keyArgs<ExtArgs>
    testSubjects?: boolean | TestType$testSubjectsArgs<ExtArgs>
    UserTestSelection?: boolean | TestType$UserTestSelectionArgs<ExtArgs>
    _count?: boolean | TestTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testType"]>



  export type TestTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    api_key_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TestTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "api_key_id" | "created_at" | "updated_at", ExtArgs["result"]["testType"]>
  export type TestTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    api_key?: boolean | TestType$api_keyArgs<ExtArgs>
    testSubjects?: boolean | TestType$testSubjectsArgs<ExtArgs>
    UserTestSelection?: boolean | TestType$UserTestSelectionArgs<ExtArgs>
    _count?: boolean | TestTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TestTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestType"
    objects: {
      api_key: Prisma.$ApiKeyPayload<ExtArgs> | null
      testSubjects: Prisma.$TestSubjectPayload<ExtArgs>[]
      UserTestSelection: Prisma.$UserTestSelectionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      api_key_id: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["testType"]>
    composites: {}
  }

  type TestTypeGetPayload<S extends boolean | null | undefined | TestTypeDefaultArgs> = $Result.GetResult<Prisma.$TestTypePayload, S>

  type TestTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestTypeCountAggregateInputType | true
    }

  export interface TestTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestType'], meta: { name: 'TestType' } }
    /**
     * Find zero or one TestType that matches the filter.
     * @param {TestTypeFindUniqueArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestTypeFindUniqueArgs>(args: SelectSubset<T, TestTypeFindUniqueArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestTypeFindUniqueOrThrowArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, TestTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeFindFirstArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestTypeFindFirstArgs>(args?: SelectSubset<T, TestTypeFindFirstArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeFindFirstOrThrowArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, TestTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestTypes
     * const testTypes = await prisma.testType.findMany()
     * 
     * // Get first 10 TestTypes
     * const testTypes = await prisma.testType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testTypeWithIdOnly = await prisma.testType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestTypeFindManyArgs>(args?: SelectSubset<T, TestTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestType.
     * @param {TestTypeCreateArgs} args - Arguments to create a TestType.
     * @example
     * // Create one TestType
     * const TestType = await prisma.testType.create({
     *   data: {
     *     // ... data to create a TestType
     *   }
     * })
     * 
     */
    create<T extends TestTypeCreateArgs>(args: SelectSubset<T, TestTypeCreateArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestTypes.
     * @param {TestTypeCreateManyArgs} args - Arguments to create many TestTypes.
     * @example
     * // Create many TestTypes
     * const testType = await prisma.testType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestTypeCreateManyArgs>(args?: SelectSubset<T, TestTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TestType.
     * @param {TestTypeDeleteArgs} args - Arguments to delete one TestType.
     * @example
     * // Delete one TestType
     * const TestType = await prisma.testType.delete({
     *   where: {
     *     // ... filter to delete one TestType
     *   }
     * })
     * 
     */
    delete<T extends TestTypeDeleteArgs>(args: SelectSubset<T, TestTypeDeleteArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestType.
     * @param {TestTypeUpdateArgs} args - Arguments to update one TestType.
     * @example
     * // Update one TestType
     * const testType = await prisma.testType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestTypeUpdateArgs>(args: SelectSubset<T, TestTypeUpdateArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestTypes.
     * @param {TestTypeDeleteManyArgs} args - Arguments to filter TestTypes to delete.
     * @example
     * // Delete a few TestTypes
     * const { count } = await prisma.testType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestTypeDeleteManyArgs>(args?: SelectSubset<T, TestTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestTypes
     * const testType = await prisma.testType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestTypeUpdateManyArgs>(args: SelectSubset<T, TestTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestType.
     * @param {TestTypeUpsertArgs} args - Arguments to update or create a TestType.
     * @example
     * // Update or create a TestType
     * const testType = await prisma.testType.upsert({
     *   create: {
     *     // ... data to create a TestType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestType we want to update
     *   }
     * })
     */
    upsert<T extends TestTypeUpsertArgs>(args: SelectSubset<T, TestTypeUpsertArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeCountArgs} args - Arguments to filter TestTypes to count.
     * @example
     * // Count the number of TestTypes
     * const count = await prisma.testType.count({
     *   where: {
     *     // ... the filter for the TestTypes we want to count
     *   }
     * })
    **/
    count<T extends TestTypeCountArgs>(
      args?: Subset<T, TestTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestTypeAggregateArgs>(args: Subset<T, TestTypeAggregateArgs>): Prisma.PrismaPromise<GetTestTypeAggregateType<T>>

    /**
     * Group by TestType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestTypeGroupByArgs['orderBy'] }
        : { orderBy?: TestTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestType model
   */
  readonly fields: TestTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    api_key<T extends TestType$api_keyArgs<ExtArgs> = {}>(args?: Subset<T, TestType$api_keyArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    testSubjects<T extends TestType$testSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, TestType$testSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UserTestSelection<T extends TestType$UserTestSelectionArgs<ExtArgs> = {}>(args?: Subset<T, TestType$UserTestSelectionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestType model
   */
  interface TestTypeFieldRefs {
    readonly id: FieldRef<"TestType", 'String'>
    readonly name: FieldRef<"TestType", 'String'>
    readonly description: FieldRef<"TestType", 'String'>
    readonly api_key_id: FieldRef<"TestType", 'String'>
    readonly created_at: FieldRef<"TestType", 'DateTime'>
    readonly updated_at: FieldRef<"TestType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestType findUnique
   */
  export type TestTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType findUniqueOrThrow
   */
  export type TestTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType findFirst
   */
  export type TestTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestTypes.
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestTypes.
     */
    distinct?: TestTypeScalarFieldEnum | TestTypeScalarFieldEnum[]
  }

  /**
   * TestType findFirstOrThrow
   */
  export type TestTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestTypes.
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestTypes.
     */
    distinct?: TestTypeScalarFieldEnum | TestTypeScalarFieldEnum[]
  }

  /**
   * TestType findMany
   */
  export type TestTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestTypes to fetch.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestTypes.
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    distinct?: TestTypeScalarFieldEnum | TestTypeScalarFieldEnum[]
  }

  /**
   * TestType create
   */
  export type TestTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a TestType.
     */
    data: XOR<TestTypeCreateInput, TestTypeUncheckedCreateInput>
  }

  /**
   * TestType createMany
   */
  export type TestTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestTypes.
     */
    data: TestTypeCreateManyInput | TestTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestType update
   */
  export type TestTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a TestType.
     */
    data: XOR<TestTypeUpdateInput, TestTypeUncheckedUpdateInput>
    /**
     * Choose, which TestType to update.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType updateMany
   */
  export type TestTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestTypes.
     */
    data: XOR<TestTypeUpdateManyMutationInput, TestTypeUncheckedUpdateManyInput>
    /**
     * Filter which TestTypes to update
     */
    where?: TestTypeWhereInput
    /**
     * Limit how many TestTypes to update.
     */
    limit?: number
  }

  /**
   * TestType upsert
   */
  export type TestTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the TestType to update in case it exists.
     */
    where: TestTypeWhereUniqueInput
    /**
     * In case the TestType found by the `where` argument doesn't exist, create a new TestType with this data.
     */
    create: XOR<TestTypeCreateInput, TestTypeUncheckedCreateInput>
    /**
     * In case the TestType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestTypeUpdateInput, TestTypeUncheckedUpdateInput>
  }

  /**
   * TestType delete
   */
  export type TestTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter which TestType to delete.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType deleteMany
   */
  export type TestTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestTypes to delete
     */
    where?: TestTypeWhereInput
    /**
     * Limit how many TestTypes to delete.
     */
    limit?: number
  }

  /**
   * TestType.api_key
   */
  export type TestType$api_keyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    where?: ApiKeyWhereInput
  }

  /**
   * TestType.testSubjects
   */
  export type TestType$testSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    where?: TestSubjectWhereInput
    orderBy?: TestSubjectOrderByWithRelationInput | TestSubjectOrderByWithRelationInput[]
    cursor?: TestSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestSubjectScalarFieldEnum | TestSubjectScalarFieldEnum[]
  }

  /**
   * TestType.UserTestSelection
   */
  export type TestType$UserTestSelectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    where?: UserTestSelectionWhereInput
    orderBy?: UserTestSelectionOrderByWithRelationInput | UserTestSelectionOrderByWithRelationInput[]
    cursor?: UserTestSelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTestSelectionScalarFieldEnum | UserTestSelectionScalarFieldEnum[]
  }

  /**
   * TestType without action
   */
  export type TestTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    approximate_total_minutes: number | null
    total_questions: number | null
    order: number | null
  }

  export type SubjectSumAggregateOutputType = {
    approximate_total_minutes: number | null
    total_questions: number | null
    order: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug_materia: string | null
    approximate_total_minutes: number | null
    total_questions: number | null
    order: number | null
    api_key_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug_materia: string | null
    approximate_total_minutes: number | null
    total_questions: number | null
    order: number | null
    api_key_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    slug_materia: number
    approximate_total_minutes: number
    total_questions: number
    order: number
    api_key_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    approximate_total_minutes?: true
    total_questions?: true
    order?: true
  }

  export type SubjectSumAggregateInputType = {
    approximate_total_minutes?: true
    total_questions?: true
    order?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug_materia?: true
    approximate_total_minutes?: true
    total_questions?: true
    order?: true
    api_key_id?: true
    created_at?: true
    updated_at?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug_materia?: true
    approximate_total_minutes?: true
    total_questions?: true
    order?: true
    api_key_id?: true
    created_at?: true
    updated_at?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug_materia?: true
    approximate_total_minutes?: true
    total_questions?: true
    order?: true
    api_key_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    api_key_id: string | null
    created_at: Date
    updated_at: Date
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug_materia?: boolean
    approximate_total_minutes?: boolean
    total_questions?: boolean
    order?: boolean
    api_key_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    api_key?: boolean | Subject$api_keyArgs<ExtArgs>
    subject_detail?: boolean | Subject$subject_detailArgs<ExtArgs>
    subject_levels?: boolean | Subject$subject_levelsArgs<ExtArgs>
    testSubjects?: boolean | Subject$testSubjectsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>



  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    slug_materia?: boolean
    approximate_total_minutes?: boolean
    total_questions?: boolean
    order?: boolean
    api_key_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "slug_materia" | "approximate_total_minutes" | "total_questions" | "order" | "api_key_id" | "created_at" | "updated_at", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    api_key?: boolean | Subject$api_keyArgs<ExtArgs>
    subject_detail?: boolean | Subject$subject_detailArgs<ExtArgs>
    subject_levels?: boolean | Subject$subject_levelsArgs<ExtArgs>
    testSubjects?: boolean | Subject$testSubjectsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      api_key: Prisma.$ApiKeyPayload<ExtArgs> | null
      subject_detail: Prisma.$SubjectDetailPayload<ExtArgs> | null
      subject_levels: Prisma.$SubjectLevelPayload<ExtArgs>[]
      testSubjects: Prisma.$TestSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      slug_materia: string
      approximate_total_minutes: number
      total_questions: number
      order: number
      api_key_id: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    api_key<T extends Subject$api_keyArgs<ExtArgs> = {}>(args?: Subset<T, Subject$api_keyArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subject_detail<T extends Subject$subject_detailArgs<ExtArgs> = {}>(args?: Subset<T, Subject$subject_detailArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subject_levels<T extends Subject$subject_levelsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$subject_levelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testSubjects<T extends Subject$testSubjectsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$testSubjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'String'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly description: FieldRef<"Subject", 'String'>
    readonly slug_materia: FieldRef<"Subject", 'String'>
    readonly approximate_total_minutes: FieldRef<"Subject", 'Int'>
    readonly total_questions: FieldRef<"Subject", 'Int'>
    readonly order: FieldRef<"Subject", 'Int'>
    readonly api_key_id: FieldRef<"Subject", 'String'>
    readonly created_at: FieldRef<"Subject", 'DateTime'>
    readonly updated_at: FieldRef<"Subject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.api_key
   */
  export type Subject$api_keyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    where?: ApiKeyWhereInput
  }

  /**
   * Subject.subject_detail
   */
  export type Subject$subject_detailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    where?: SubjectDetailWhereInput
  }

  /**
   * Subject.subject_levels
   */
  export type Subject$subject_levelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    where?: SubjectLevelWhereInput
    orderBy?: SubjectLevelOrderByWithRelationInput | SubjectLevelOrderByWithRelationInput[]
    cursor?: SubjectLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectLevelScalarFieldEnum | SubjectLevelScalarFieldEnum[]
  }

  /**
   * Subject.testSubjects
   */
  export type Subject$testSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    where?: TestSubjectWhereInput
    orderBy?: TestSubjectOrderByWithRelationInput | TestSubjectOrderByWithRelationInput[]
    cursor?: TestSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestSubjectScalarFieldEnum | TestSubjectScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model SubjectDetail
   */

  export type AggregateSubjectDetail = {
    _count: SubjectDetailCountAggregateOutputType | null
    _min: SubjectDetailMinAggregateOutputType | null
    _max: SubjectDetailMaxAggregateOutputType | null
  }

  export type SubjectDetailMinAggregateOutputType = {
    id: string | null
    background_image_url: string | null
    title: string | null
    title_color: string | null
    subtitle: string | null
    primary_color_hex: string | null
    created_at: Date | null
    updated_at: Date | null
    subject_id: string | null
  }

  export type SubjectDetailMaxAggregateOutputType = {
    id: string | null
    background_image_url: string | null
    title: string | null
    title_color: string | null
    subtitle: string | null
    primary_color_hex: string | null
    created_at: Date | null
    updated_at: Date | null
    subject_id: string | null
  }

  export type SubjectDetailCountAggregateOutputType = {
    id: number
    background_image_url: number
    title: number
    title_color: number
    subtitle: number
    primary_color_hex: number
    created_at: number
    updated_at: number
    subject_id: number
    _all: number
  }


  export type SubjectDetailMinAggregateInputType = {
    id?: true
    background_image_url?: true
    title?: true
    title_color?: true
    subtitle?: true
    primary_color_hex?: true
    created_at?: true
    updated_at?: true
    subject_id?: true
  }

  export type SubjectDetailMaxAggregateInputType = {
    id?: true
    background_image_url?: true
    title?: true
    title_color?: true
    subtitle?: true
    primary_color_hex?: true
    created_at?: true
    updated_at?: true
    subject_id?: true
  }

  export type SubjectDetailCountAggregateInputType = {
    id?: true
    background_image_url?: true
    title?: true
    title_color?: true
    subtitle?: true
    primary_color_hex?: true
    created_at?: true
    updated_at?: true
    subject_id?: true
    _all?: true
  }

  export type SubjectDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectDetail to aggregate.
     */
    where?: SubjectDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectDetails to fetch.
     */
    orderBy?: SubjectDetailOrderByWithRelationInput | SubjectDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubjectDetails
    **/
    _count?: true | SubjectDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectDetailMaxAggregateInputType
  }

  export type GetSubjectDetailAggregateType<T extends SubjectDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateSubjectDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubjectDetail[P]>
      : GetScalarType<T[P], AggregateSubjectDetail[P]>
  }




  export type SubjectDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectDetailWhereInput
    orderBy?: SubjectDetailOrderByWithAggregationInput | SubjectDetailOrderByWithAggregationInput[]
    by: SubjectDetailScalarFieldEnum[] | SubjectDetailScalarFieldEnum
    having?: SubjectDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectDetailCountAggregateInputType | true
    _min?: SubjectDetailMinAggregateInputType
    _max?: SubjectDetailMaxAggregateInputType
  }

  export type SubjectDetailGroupByOutputType = {
    id: string
    background_image_url: string | null
    title: string
    title_color: string | null
    subtitle: string | null
    primary_color_hex: string | null
    created_at: Date
    updated_at: Date
    subject_id: string
    _count: SubjectDetailCountAggregateOutputType | null
    _min: SubjectDetailMinAggregateOutputType | null
    _max: SubjectDetailMaxAggregateOutputType | null
  }

  type GetSubjectDetailGroupByPayload<T extends SubjectDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectDetailGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectDetailGroupByOutputType[P]>
        }
      >
    >


  export type SubjectDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    background_image_url?: boolean
    title?: boolean
    title_color?: boolean
    subtitle?: boolean
    primary_color_hex?: boolean
    created_at?: boolean
    updated_at?: boolean
    subject_id?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjectDetail"]>



  export type SubjectDetailSelectScalar = {
    id?: boolean
    background_image_url?: boolean
    title?: boolean
    title_color?: boolean
    subtitle?: boolean
    primary_color_hex?: boolean
    created_at?: boolean
    updated_at?: boolean
    subject_id?: boolean
  }

  export type SubjectDetailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "background_image_url" | "title" | "title_color" | "subtitle" | "primary_color_hex" | "created_at" | "updated_at" | "subject_id", ExtArgs["result"]["subjectDetail"]>
  export type SubjectDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $SubjectDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubjectDetail"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      background_image_url: string | null
      title: string
      title_color: string | null
      subtitle: string | null
      primary_color_hex: string | null
      created_at: Date
      updated_at: Date
      subject_id: string
    }, ExtArgs["result"]["subjectDetail"]>
    composites: {}
  }

  type SubjectDetailGetPayload<S extends boolean | null | undefined | SubjectDetailDefaultArgs> = $Result.GetResult<Prisma.$SubjectDetailPayload, S>

  type SubjectDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectDetailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectDetailCountAggregateInputType | true
    }

  export interface SubjectDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubjectDetail'], meta: { name: 'SubjectDetail' } }
    /**
     * Find zero or one SubjectDetail that matches the filter.
     * @param {SubjectDetailFindUniqueArgs} args - Arguments to find a SubjectDetail
     * @example
     * // Get one SubjectDetail
     * const subjectDetail = await prisma.subjectDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectDetailFindUniqueArgs>(args: SelectSubset<T, SubjectDetailFindUniqueArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubjectDetail that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectDetailFindUniqueOrThrowArgs} args - Arguments to find a SubjectDetail
     * @example
     * // Get one SubjectDetail
     * const subjectDetail = await prisma.subjectDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectDetailFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectDetailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubjectDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectDetailFindFirstArgs} args - Arguments to find a SubjectDetail
     * @example
     * // Get one SubjectDetail
     * const subjectDetail = await prisma.subjectDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectDetailFindFirstArgs>(args?: SelectSubset<T, SubjectDetailFindFirstArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubjectDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectDetailFindFirstOrThrowArgs} args - Arguments to find a SubjectDetail
     * @example
     * // Get one SubjectDetail
     * const subjectDetail = await prisma.subjectDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectDetailFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectDetailFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubjectDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectDetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubjectDetails
     * const subjectDetails = await prisma.subjectDetail.findMany()
     * 
     * // Get first 10 SubjectDetails
     * const subjectDetails = await prisma.subjectDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectDetailWithIdOnly = await prisma.subjectDetail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectDetailFindManyArgs>(args?: SelectSubset<T, SubjectDetailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubjectDetail.
     * @param {SubjectDetailCreateArgs} args - Arguments to create a SubjectDetail.
     * @example
     * // Create one SubjectDetail
     * const SubjectDetail = await prisma.subjectDetail.create({
     *   data: {
     *     // ... data to create a SubjectDetail
     *   }
     * })
     * 
     */
    create<T extends SubjectDetailCreateArgs>(args: SelectSubset<T, SubjectDetailCreateArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubjectDetails.
     * @param {SubjectDetailCreateManyArgs} args - Arguments to create many SubjectDetails.
     * @example
     * // Create many SubjectDetails
     * const subjectDetail = await prisma.subjectDetail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectDetailCreateManyArgs>(args?: SelectSubset<T, SubjectDetailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubjectDetail.
     * @param {SubjectDetailDeleteArgs} args - Arguments to delete one SubjectDetail.
     * @example
     * // Delete one SubjectDetail
     * const SubjectDetail = await prisma.subjectDetail.delete({
     *   where: {
     *     // ... filter to delete one SubjectDetail
     *   }
     * })
     * 
     */
    delete<T extends SubjectDetailDeleteArgs>(args: SelectSubset<T, SubjectDetailDeleteArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubjectDetail.
     * @param {SubjectDetailUpdateArgs} args - Arguments to update one SubjectDetail.
     * @example
     * // Update one SubjectDetail
     * const subjectDetail = await prisma.subjectDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectDetailUpdateArgs>(args: SelectSubset<T, SubjectDetailUpdateArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubjectDetails.
     * @param {SubjectDetailDeleteManyArgs} args - Arguments to filter SubjectDetails to delete.
     * @example
     * // Delete a few SubjectDetails
     * const { count } = await prisma.subjectDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDetailDeleteManyArgs>(args?: SelectSubset<T, SubjectDetailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubjectDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubjectDetails
     * const subjectDetail = await prisma.subjectDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectDetailUpdateManyArgs>(args: SelectSubset<T, SubjectDetailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubjectDetail.
     * @param {SubjectDetailUpsertArgs} args - Arguments to update or create a SubjectDetail.
     * @example
     * // Update or create a SubjectDetail
     * const subjectDetail = await prisma.subjectDetail.upsert({
     *   create: {
     *     // ... data to create a SubjectDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubjectDetail we want to update
     *   }
     * })
     */
    upsert<T extends SubjectDetailUpsertArgs>(args: SelectSubset<T, SubjectDetailUpsertArgs<ExtArgs>>): Prisma__SubjectDetailClient<$Result.GetResult<Prisma.$SubjectDetailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubjectDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectDetailCountArgs} args - Arguments to filter SubjectDetails to count.
     * @example
     * // Count the number of SubjectDetails
     * const count = await prisma.subjectDetail.count({
     *   where: {
     *     // ... the filter for the SubjectDetails we want to count
     *   }
     * })
    **/
    count<T extends SubjectDetailCountArgs>(
      args?: Subset<T, SubjectDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubjectDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectDetailAggregateArgs>(args: Subset<T, SubjectDetailAggregateArgs>): Prisma.PrismaPromise<GetSubjectDetailAggregateType<T>>

    /**
     * Group by SubjectDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectDetailGroupByArgs['orderBy'] }
        : { orderBy?: SubjectDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubjectDetail model
   */
  readonly fields: SubjectDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubjectDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubjectDetail model
   */
  interface SubjectDetailFieldRefs {
    readonly id: FieldRef<"SubjectDetail", 'String'>
    readonly background_image_url: FieldRef<"SubjectDetail", 'String'>
    readonly title: FieldRef<"SubjectDetail", 'String'>
    readonly title_color: FieldRef<"SubjectDetail", 'String'>
    readonly subtitle: FieldRef<"SubjectDetail", 'String'>
    readonly primary_color_hex: FieldRef<"SubjectDetail", 'String'>
    readonly created_at: FieldRef<"SubjectDetail", 'DateTime'>
    readonly updated_at: FieldRef<"SubjectDetail", 'DateTime'>
    readonly subject_id: FieldRef<"SubjectDetail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SubjectDetail findUnique
   */
  export type SubjectDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * Filter, which SubjectDetail to fetch.
     */
    where: SubjectDetailWhereUniqueInput
  }

  /**
   * SubjectDetail findUniqueOrThrow
   */
  export type SubjectDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * Filter, which SubjectDetail to fetch.
     */
    where: SubjectDetailWhereUniqueInput
  }

  /**
   * SubjectDetail findFirst
   */
  export type SubjectDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * Filter, which SubjectDetail to fetch.
     */
    where?: SubjectDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectDetails to fetch.
     */
    orderBy?: SubjectDetailOrderByWithRelationInput | SubjectDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectDetails.
     */
    cursor?: SubjectDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectDetails.
     */
    distinct?: SubjectDetailScalarFieldEnum | SubjectDetailScalarFieldEnum[]
  }

  /**
   * SubjectDetail findFirstOrThrow
   */
  export type SubjectDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * Filter, which SubjectDetail to fetch.
     */
    where?: SubjectDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectDetails to fetch.
     */
    orderBy?: SubjectDetailOrderByWithRelationInput | SubjectDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectDetails.
     */
    cursor?: SubjectDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectDetails.
     */
    distinct?: SubjectDetailScalarFieldEnum | SubjectDetailScalarFieldEnum[]
  }

  /**
   * SubjectDetail findMany
   */
  export type SubjectDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * Filter, which SubjectDetails to fetch.
     */
    where?: SubjectDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectDetails to fetch.
     */
    orderBy?: SubjectDetailOrderByWithRelationInput | SubjectDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubjectDetails.
     */
    cursor?: SubjectDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectDetails.
     */
    skip?: number
    distinct?: SubjectDetailScalarFieldEnum | SubjectDetailScalarFieldEnum[]
  }

  /**
   * SubjectDetail create
   */
  export type SubjectDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a SubjectDetail.
     */
    data: XOR<SubjectDetailCreateInput, SubjectDetailUncheckedCreateInput>
  }

  /**
   * SubjectDetail createMany
   */
  export type SubjectDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubjectDetails.
     */
    data: SubjectDetailCreateManyInput | SubjectDetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubjectDetail update
   */
  export type SubjectDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a SubjectDetail.
     */
    data: XOR<SubjectDetailUpdateInput, SubjectDetailUncheckedUpdateInput>
    /**
     * Choose, which SubjectDetail to update.
     */
    where: SubjectDetailWhereUniqueInput
  }

  /**
   * SubjectDetail updateMany
   */
  export type SubjectDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubjectDetails.
     */
    data: XOR<SubjectDetailUpdateManyMutationInput, SubjectDetailUncheckedUpdateManyInput>
    /**
     * Filter which SubjectDetails to update
     */
    where?: SubjectDetailWhereInput
    /**
     * Limit how many SubjectDetails to update.
     */
    limit?: number
  }

  /**
   * SubjectDetail upsert
   */
  export type SubjectDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the SubjectDetail to update in case it exists.
     */
    where: SubjectDetailWhereUniqueInput
    /**
     * In case the SubjectDetail found by the `where` argument doesn't exist, create a new SubjectDetail with this data.
     */
    create: XOR<SubjectDetailCreateInput, SubjectDetailUncheckedCreateInput>
    /**
     * In case the SubjectDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectDetailUpdateInput, SubjectDetailUncheckedUpdateInput>
  }

  /**
   * SubjectDetail delete
   */
  export type SubjectDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
    /**
     * Filter which SubjectDetail to delete.
     */
    where: SubjectDetailWhereUniqueInput
  }

  /**
   * SubjectDetail deleteMany
   */
  export type SubjectDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectDetails to delete
     */
    where?: SubjectDetailWhereInput
    /**
     * Limit how many SubjectDetails to delete.
     */
    limit?: number
  }

  /**
   * SubjectDetail without action
   */
  export type SubjectDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectDetail
     */
    select?: SubjectDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectDetail
     */
    omit?: SubjectDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectDetailInclude<ExtArgs> | null
  }


  /**
   * Model SubjectLevel
   */

  export type AggregateSubjectLevel = {
    _count: SubjectLevelCountAggregateOutputType | null
    _avg: SubjectLevelAvgAggregateOutputType | null
    _sum: SubjectLevelSumAggregateOutputType | null
    _min: SubjectLevelMinAggregateOutputType | null
    _max: SubjectLevelMaxAggregateOutputType | null
  }

  export type SubjectLevelAvgAggregateOutputType = {
    order: number | null
    number_of_questions: number | null
    approximate_time_minutes: number | null
  }

  export type SubjectLevelSumAggregateOutputType = {
    order: number | null
    number_of_questions: number | null
    approximate_time_minutes: number | null
  }

  export type SubjectLevelMinAggregateOutputType = {
    id: string | null
    reference_title: string | null
    title: string | null
    order: number | null
    number_of_questions: number | null
    approximate_time_minutes: number | null
    created_at: Date | null
    updated_at: Date | null
    subject_id: string | null
  }

  export type SubjectLevelMaxAggregateOutputType = {
    id: string | null
    reference_title: string | null
    title: string | null
    order: number | null
    number_of_questions: number | null
    approximate_time_minutes: number | null
    created_at: Date | null
    updated_at: Date | null
    subject_id: string | null
  }

  export type SubjectLevelCountAggregateOutputType = {
    id: number
    reference_title: number
    title: number
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at: number
    updated_at: number
    subject_id: number
    _all: number
  }


  export type SubjectLevelAvgAggregateInputType = {
    order?: true
    number_of_questions?: true
    approximate_time_minutes?: true
  }

  export type SubjectLevelSumAggregateInputType = {
    order?: true
    number_of_questions?: true
    approximate_time_minutes?: true
  }

  export type SubjectLevelMinAggregateInputType = {
    id?: true
    reference_title?: true
    title?: true
    order?: true
    number_of_questions?: true
    approximate_time_minutes?: true
    created_at?: true
    updated_at?: true
    subject_id?: true
  }

  export type SubjectLevelMaxAggregateInputType = {
    id?: true
    reference_title?: true
    title?: true
    order?: true
    number_of_questions?: true
    approximate_time_minutes?: true
    created_at?: true
    updated_at?: true
    subject_id?: true
  }

  export type SubjectLevelCountAggregateInputType = {
    id?: true
    reference_title?: true
    title?: true
    order?: true
    number_of_questions?: true
    approximate_time_minutes?: true
    created_at?: true
    updated_at?: true
    subject_id?: true
    _all?: true
  }

  export type SubjectLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectLevel to aggregate.
     */
    where?: SubjectLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectLevels to fetch.
     */
    orderBy?: SubjectLevelOrderByWithRelationInput | SubjectLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubjectLevels
    **/
    _count?: true | SubjectLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectLevelMaxAggregateInputType
  }

  export type GetSubjectLevelAggregateType<T extends SubjectLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateSubjectLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubjectLevel[P]>
      : GetScalarType<T[P], AggregateSubjectLevel[P]>
  }




  export type SubjectLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectLevelWhereInput
    orderBy?: SubjectLevelOrderByWithAggregationInput | SubjectLevelOrderByWithAggregationInput[]
    by: SubjectLevelScalarFieldEnum[] | SubjectLevelScalarFieldEnum
    having?: SubjectLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectLevelCountAggregateInputType | true
    _avg?: SubjectLevelAvgAggregateInputType
    _sum?: SubjectLevelSumAggregateInputType
    _min?: SubjectLevelMinAggregateInputType
    _max?: SubjectLevelMaxAggregateInputType
  }

  export type SubjectLevelGroupByOutputType = {
    id: string
    reference_title: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at: Date
    updated_at: Date
    subject_id: string
    _count: SubjectLevelCountAggregateOutputType | null
    _avg: SubjectLevelAvgAggregateOutputType | null
    _sum: SubjectLevelSumAggregateOutputType | null
    _min: SubjectLevelMinAggregateOutputType | null
    _max: SubjectLevelMaxAggregateOutputType | null
  }

  type GetSubjectLevelGroupByPayload<T extends SubjectLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectLevelGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectLevelGroupByOutputType[P]>
        }
      >
    >


  export type SubjectLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reference_title?: boolean
    title?: boolean
    order?: boolean
    number_of_questions?: boolean
    approximate_time_minutes?: boolean
    created_at?: boolean
    updated_at?: boolean
    subject_id?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    questionnaires?: boolean | SubjectLevel$questionnairesArgs<ExtArgs>
    _count?: boolean | SubjectLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjectLevel"]>



  export type SubjectLevelSelectScalar = {
    id?: boolean
    reference_title?: boolean
    title?: boolean
    order?: boolean
    number_of_questions?: boolean
    approximate_time_minutes?: boolean
    created_at?: boolean
    updated_at?: boolean
    subject_id?: boolean
  }

  export type SubjectLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reference_title" | "title" | "order" | "number_of_questions" | "approximate_time_minutes" | "created_at" | "updated_at" | "subject_id", ExtArgs["result"]["subjectLevel"]>
  export type SubjectLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    questionnaires?: boolean | SubjectLevel$questionnairesArgs<ExtArgs>
    _count?: boolean | SubjectLevelCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SubjectLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubjectLevel"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      questionnaires: Prisma.$QuestionnairePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reference_title: string | null
      title: string
      order: number
      number_of_questions: number
      approximate_time_minutes: number
      created_at: Date
      updated_at: Date
      subject_id: string
    }, ExtArgs["result"]["subjectLevel"]>
    composites: {}
  }

  type SubjectLevelGetPayload<S extends boolean | null | undefined | SubjectLevelDefaultArgs> = $Result.GetResult<Prisma.$SubjectLevelPayload, S>

  type SubjectLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectLevelCountAggregateInputType | true
    }

  export interface SubjectLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubjectLevel'], meta: { name: 'SubjectLevel' } }
    /**
     * Find zero or one SubjectLevel that matches the filter.
     * @param {SubjectLevelFindUniqueArgs} args - Arguments to find a SubjectLevel
     * @example
     * // Get one SubjectLevel
     * const subjectLevel = await prisma.subjectLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectLevelFindUniqueArgs>(args: SelectSubset<T, SubjectLevelFindUniqueArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubjectLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectLevelFindUniqueOrThrowArgs} args - Arguments to find a SubjectLevel
     * @example
     * // Get one SubjectLevel
     * const subjectLevel = await prisma.subjectLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubjectLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectLevelFindFirstArgs} args - Arguments to find a SubjectLevel
     * @example
     * // Get one SubjectLevel
     * const subjectLevel = await prisma.subjectLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectLevelFindFirstArgs>(args?: SelectSubset<T, SubjectLevelFindFirstArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubjectLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectLevelFindFirstOrThrowArgs} args - Arguments to find a SubjectLevel
     * @example
     * // Get one SubjectLevel
     * const subjectLevel = await prisma.subjectLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubjectLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubjectLevels
     * const subjectLevels = await prisma.subjectLevel.findMany()
     * 
     * // Get first 10 SubjectLevels
     * const subjectLevels = await prisma.subjectLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectLevelWithIdOnly = await prisma.subjectLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectLevelFindManyArgs>(args?: SelectSubset<T, SubjectLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubjectLevel.
     * @param {SubjectLevelCreateArgs} args - Arguments to create a SubjectLevel.
     * @example
     * // Create one SubjectLevel
     * const SubjectLevel = await prisma.subjectLevel.create({
     *   data: {
     *     // ... data to create a SubjectLevel
     *   }
     * })
     * 
     */
    create<T extends SubjectLevelCreateArgs>(args: SelectSubset<T, SubjectLevelCreateArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubjectLevels.
     * @param {SubjectLevelCreateManyArgs} args - Arguments to create many SubjectLevels.
     * @example
     * // Create many SubjectLevels
     * const subjectLevel = await prisma.subjectLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectLevelCreateManyArgs>(args?: SelectSubset<T, SubjectLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubjectLevel.
     * @param {SubjectLevelDeleteArgs} args - Arguments to delete one SubjectLevel.
     * @example
     * // Delete one SubjectLevel
     * const SubjectLevel = await prisma.subjectLevel.delete({
     *   where: {
     *     // ... filter to delete one SubjectLevel
     *   }
     * })
     * 
     */
    delete<T extends SubjectLevelDeleteArgs>(args: SelectSubset<T, SubjectLevelDeleteArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubjectLevel.
     * @param {SubjectLevelUpdateArgs} args - Arguments to update one SubjectLevel.
     * @example
     * // Update one SubjectLevel
     * const subjectLevel = await prisma.subjectLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectLevelUpdateArgs>(args: SelectSubset<T, SubjectLevelUpdateArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubjectLevels.
     * @param {SubjectLevelDeleteManyArgs} args - Arguments to filter SubjectLevels to delete.
     * @example
     * // Delete a few SubjectLevels
     * const { count } = await prisma.subjectLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectLevelDeleteManyArgs>(args?: SelectSubset<T, SubjectLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubjectLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubjectLevels
     * const subjectLevel = await prisma.subjectLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectLevelUpdateManyArgs>(args: SelectSubset<T, SubjectLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubjectLevel.
     * @param {SubjectLevelUpsertArgs} args - Arguments to update or create a SubjectLevel.
     * @example
     * // Update or create a SubjectLevel
     * const subjectLevel = await prisma.subjectLevel.upsert({
     *   create: {
     *     // ... data to create a SubjectLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubjectLevel we want to update
     *   }
     * })
     */
    upsert<T extends SubjectLevelUpsertArgs>(args: SelectSubset<T, SubjectLevelUpsertArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubjectLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectLevelCountArgs} args - Arguments to filter SubjectLevels to count.
     * @example
     * // Count the number of SubjectLevels
     * const count = await prisma.subjectLevel.count({
     *   where: {
     *     // ... the filter for the SubjectLevels we want to count
     *   }
     * })
    **/
    count<T extends SubjectLevelCountArgs>(
      args?: Subset<T, SubjectLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubjectLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectLevelAggregateArgs>(args: Subset<T, SubjectLevelAggregateArgs>): Prisma.PrismaPromise<GetSubjectLevelAggregateType<T>>

    /**
     * Group by SubjectLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectLevelGroupByArgs['orderBy'] }
        : { orderBy?: SubjectLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubjectLevel model
   */
  readonly fields: SubjectLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubjectLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionnaires<T extends SubjectLevel$questionnairesArgs<ExtArgs> = {}>(args?: Subset<T, SubjectLevel$questionnairesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubjectLevel model
   */
  interface SubjectLevelFieldRefs {
    readonly id: FieldRef<"SubjectLevel", 'String'>
    readonly reference_title: FieldRef<"SubjectLevel", 'String'>
    readonly title: FieldRef<"SubjectLevel", 'String'>
    readonly order: FieldRef<"SubjectLevel", 'Int'>
    readonly number_of_questions: FieldRef<"SubjectLevel", 'Int'>
    readonly approximate_time_minutes: FieldRef<"SubjectLevel", 'Int'>
    readonly created_at: FieldRef<"SubjectLevel", 'DateTime'>
    readonly updated_at: FieldRef<"SubjectLevel", 'DateTime'>
    readonly subject_id: FieldRef<"SubjectLevel", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SubjectLevel findUnique
   */
  export type SubjectLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * Filter, which SubjectLevel to fetch.
     */
    where: SubjectLevelWhereUniqueInput
  }

  /**
   * SubjectLevel findUniqueOrThrow
   */
  export type SubjectLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * Filter, which SubjectLevel to fetch.
     */
    where: SubjectLevelWhereUniqueInput
  }

  /**
   * SubjectLevel findFirst
   */
  export type SubjectLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * Filter, which SubjectLevel to fetch.
     */
    where?: SubjectLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectLevels to fetch.
     */
    orderBy?: SubjectLevelOrderByWithRelationInput | SubjectLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectLevels.
     */
    cursor?: SubjectLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectLevels.
     */
    distinct?: SubjectLevelScalarFieldEnum | SubjectLevelScalarFieldEnum[]
  }

  /**
   * SubjectLevel findFirstOrThrow
   */
  export type SubjectLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * Filter, which SubjectLevel to fetch.
     */
    where?: SubjectLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectLevels to fetch.
     */
    orderBy?: SubjectLevelOrderByWithRelationInput | SubjectLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectLevels.
     */
    cursor?: SubjectLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectLevels.
     */
    distinct?: SubjectLevelScalarFieldEnum | SubjectLevelScalarFieldEnum[]
  }

  /**
   * SubjectLevel findMany
   */
  export type SubjectLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * Filter, which SubjectLevels to fetch.
     */
    where?: SubjectLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectLevels to fetch.
     */
    orderBy?: SubjectLevelOrderByWithRelationInput | SubjectLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubjectLevels.
     */
    cursor?: SubjectLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectLevels.
     */
    skip?: number
    distinct?: SubjectLevelScalarFieldEnum | SubjectLevelScalarFieldEnum[]
  }

  /**
   * SubjectLevel create
   */
  export type SubjectLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a SubjectLevel.
     */
    data: XOR<SubjectLevelCreateInput, SubjectLevelUncheckedCreateInput>
  }

  /**
   * SubjectLevel createMany
   */
  export type SubjectLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubjectLevels.
     */
    data: SubjectLevelCreateManyInput | SubjectLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubjectLevel update
   */
  export type SubjectLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a SubjectLevel.
     */
    data: XOR<SubjectLevelUpdateInput, SubjectLevelUncheckedUpdateInput>
    /**
     * Choose, which SubjectLevel to update.
     */
    where: SubjectLevelWhereUniqueInput
  }

  /**
   * SubjectLevel updateMany
   */
  export type SubjectLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubjectLevels.
     */
    data: XOR<SubjectLevelUpdateManyMutationInput, SubjectLevelUncheckedUpdateManyInput>
    /**
     * Filter which SubjectLevels to update
     */
    where?: SubjectLevelWhereInput
    /**
     * Limit how many SubjectLevels to update.
     */
    limit?: number
  }

  /**
   * SubjectLevel upsert
   */
  export type SubjectLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the SubjectLevel to update in case it exists.
     */
    where: SubjectLevelWhereUniqueInput
    /**
     * In case the SubjectLevel found by the `where` argument doesn't exist, create a new SubjectLevel with this data.
     */
    create: XOR<SubjectLevelCreateInput, SubjectLevelUncheckedCreateInput>
    /**
     * In case the SubjectLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectLevelUpdateInput, SubjectLevelUncheckedUpdateInput>
  }

  /**
   * SubjectLevel delete
   */
  export type SubjectLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
    /**
     * Filter which SubjectLevel to delete.
     */
    where: SubjectLevelWhereUniqueInput
  }

  /**
   * SubjectLevel deleteMany
   */
  export type SubjectLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectLevels to delete
     */
    where?: SubjectLevelWhereInput
    /**
     * Limit how many SubjectLevels to delete.
     */
    limit?: number
  }

  /**
   * SubjectLevel.questionnaires
   */
  export type SubjectLevel$questionnairesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    where?: QuestionnaireWhereInput
    orderBy?: QuestionnaireOrderByWithRelationInput | QuestionnaireOrderByWithRelationInput[]
    cursor?: QuestionnaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionnaireScalarFieldEnum | QuestionnaireScalarFieldEnum[]
  }

  /**
   * SubjectLevel without action
   */
  export type SubjectLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectLevel
     */
    select?: SubjectLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectLevel
     */
    omit?: SubjectLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectLevelInclude<ExtArgs> | null
  }


  /**
   * Model TestSubject
   */

  export type AggregateTestSubject = {
    _count: TestSubjectCountAggregateOutputType | null
    _avg: TestSubjectAvgAggregateOutputType | null
    _sum: TestSubjectSumAggregateOutputType | null
    _min: TestSubjectMinAggregateOutputType | null
    _max: TestSubjectMaxAggregateOutputType | null
  }

  export type TestSubjectAvgAggregateOutputType = {
    subject_order_in_test: number | null
  }

  export type TestSubjectSumAggregateOutputType = {
    subject_order_in_test: number | null
  }

  export type TestSubjectMinAggregateOutputType = {
    test_type_id: string | null
    subject_id: string | null
    assigned_at: Date | null
    subject_order_in_test: number | null
  }

  export type TestSubjectMaxAggregateOutputType = {
    test_type_id: string | null
    subject_id: string | null
    assigned_at: Date | null
    subject_order_in_test: number | null
  }

  export type TestSubjectCountAggregateOutputType = {
    test_type_id: number
    subject_id: number
    assigned_at: number
    subject_order_in_test: number
    _all: number
  }


  export type TestSubjectAvgAggregateInputType = {
    subject_order_in_test?: true
  }

  export type TestSubjectSumAggregateInputType = {
    subject_order_in_test?: true
  }

  export type TestSubjectMinAggregateInputType = {
    test_type_id?: true
    subject_id?: true
    assigned_at?: true
    subject_order_in_test?: true
  }

  export type TestSubjectMaxAggregateInputType = {
    test_type_id?: true
    subject_id?: true
    assigned_at?: true
    subject_order_in_test?: true
  }

  export type TestSubjectCountAggregateInputType = {
    test_type_id?: true
    subject_id?: true
    assigned_at?: true
    subject_order_in_test?: true
    _all?: true
  }

  export type TestSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestSubject to aggregate.
     */
    where?: TestSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestSubjects to fetch.
     */
    orderBy?: TestSubjectOrderByWithRelationInput | TestSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestSubjects
    **/
    _count?: true | TestSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestSubjectMaxAggregateInputType
  }

  export type GetTestSubjectAggregateType<T extends TestSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateTestSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestSubject[P]>
      : GetScalarType<T[P], AggregateTestSubject[P]>
  }




  export type TestSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestSubjectWhereInput
    orderBy?: TestSubjectOrderByWithAggregationInput | TestSubjectOrderByWithAggregationInput[]
    by: TestSubjectScalarFieldEnum[] | TestSubjectScalarFieldEnum
    having?: TestSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestSubjectCountAggregateInputType | true
    _avg?: TestSubjectAvgAggregateInputType
    _sum?: TestSubjectSumAggregateInputType
    _min?: TestSubjectMinAggregateInputType
    _max?: TestSubjectMaxAggregateInputType
  }

  export type TestSubjectGroupByOutputType = {
    test_type_id: string
    subject_id: string
    assigned_at: Date
    subject_order_in_test: number | null
    _count: TestSubjectCountAggregateOutputType | null
    _avg: TestSubjectAvgAggregateOutputType | null
    _sum: TestSubjectSumAggregateOutputType | null
    _min: TestSubjectMinAggregateOutputType | null
    _max: TestSubjectMaxAggregateOutputType | null
  }

  type GetTestSubjectGroupByPayload<T extends TestSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], TestSubjectGroupByOutputType[P]>
        }
      >
    >


  export type TestSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    test_type_id?: boolean
    subject_id?: boolean
    assigned_at?: boolean
    subject_order_in_test?: boolean
    test_type?: boolean | TestTypeDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testSubject"]>



  export type TestSubjectSelectScalar = {
    test_type_id?: boolean
    subject_id?: boolean
    assigned_at?: boolean
    subject_order_in_test?: boolean
  }

  export type TestSubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"test_type_id" | "subject_id" | "assigned_at" | "subject_order_in_test", ExtArgs["result"]["testSubject"]>
  export type TestSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test_type?: boolean | TestTypeDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $TestSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestSubject"
    objects: {
      test_type: Prisma.$TestTypePayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      test_type_id: string
      subject_id: string
      assigned_at: Date
      subject_order_in_test: number | null
    }, ExtArgs["result"]["testSubject"]>
    composites: {}
  }

  type TestSubjectGetPayload<S extends boolean | null | undefined | TestSubjectDefaultArgs> = $Result.GetResult<Prisma.$TestSubjectPayload, S>

  type TestSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestSubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestSubjectCountAggregateInputType | true
    }

  export interface TestSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestSubject'], meta: { name: 'TestSubject' } }
    /**
     * Find zero or one TestSubject that matches the filter.
     * @param {TestSubjectFindUniqueArgs} args - Arguments to find a TestSubject
     * @example
     * // Get one TestSubject
     * const testSubject = await prisma.testSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestSubjectFindUniqueArgs>(args: SelectSubset<T, TestSubjectFindUniqueArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestSubject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestSubjectFindUniqueOrThrowArgs} args - Arguments to find a TestSubject
     * @example
     * // Get one TestSubject
     * const testSubject = await prisma.testSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, TestSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestSubjectFindFirstArgs} args - Arguments to find a TestSubject
     * @example
     * // Get one TestSubject
     * const testSubject = await prisma.testSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestSubjectFindFirstArgs>(args?: SelectSubset<T, TestSubjectFindFirstArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestSubjectFindFirstOrThrowArgs} args - Arguments to find a TestSubject
     * @example
     * // Get one TestSubject
     * const testSubject = await prisma.testSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, TestSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestSubjects
     * const testSubjects = await prisma.testSubject.findMany()
     * 
     * // Get first 10 TestSubjects
     * const testSubjects = await prisma.testSubject.findMany({ take: 10 })
     * 
     * // Only select the `test_type_id`
     * const testSubjectWithTest_type_idOnly = await prisma.testSubject.findMany({ select: { test_type_id: true } })
     * 
     */
    findMany<T extends TestSubjectFindManyArgs>(args?: SelectSubset<T, TestSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestSubject.
     * @param {TestSubjectCreateArgs} args - Arguments to create a TestSubject.
     * @example
     * // Create one TestSubject
     * const TestSubject = await prisma.testSubject.create({
     *   data: {
     *     // ... data to create a TestSubject
     *   }
     * })
     * 
     */
    create<T extends TestSubjectCreateArgs>(args: SelectSubset<T, TestSubjectCreateArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestSubjects.
     * @param {TestSubjectCreateManyArgs} args - Arguments to create many TestSubjects.
     * @example
     * // Create many TestSubjects
     * const testSubject = await prisma.testSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestSubjectCreateManyArgs>(args?: SelectSubset<T, TestSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TestSubject.
     * @param {TestSubjectDeleteArgs} args - Arguments to delete one TestSubject.
     * @example
     * // Delete one TestSubject
     * const TestSubject = await prisma.testSubject.delete({
     *   where: {
     *     // ... filter to delete one TestSubject
     *   }
     * })
     * 
     */
    delete<T extends TestSubjectDeleteArgs>(args: SelectSubset<T, TestSubjectDeleteArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestSubject.
     * @param {TestSubjectUpdateArgs} args - Arguments to update one TestSubject.
     * @example
     * // Update one TestSubject
     * const testSubject = await prisma.testSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestSubjectUpdateArgs>(args: SelectSubset<T, TestSubjectUpdateArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestSubjects.
     * @param {TestSubjectDeleteManyArgs} args - Arguments to filter TestSubjects to delete.
     * @example
     * // Delete a few TestSubjects
     * const { count } = await prisma.testSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestSubjectDeleteManyArgs>(args?: SelectSubset<T, TestSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestSubjects
     * const testSubject = await prisma.testSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestSubjectUpdateManyArgs>(args: SelectSubset<T, TestSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestSubject.
     * @param {TestSubjectUpsertArgs} args - Arguments to update or create a TestSubject.
     * @example
     * // Update or create a TestSubject
     * const testSubject = await prisma.testSubject.upsert({
     *   create: {
     *     // ... data to create a TestSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestSubject we want to update
     *   }
     * })
     */
    upsert<T extends TestSubjectUpsertArgs>(args: SelectSubset<T, TestSubjectUpsertArgs<ExtArgs>>): Prisma__TestSubjectClient<$Result.GetResult<Prisma.$TestSubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestSubjectCountArgs} args - Arguments to filter TestSubjects to count.
     * @example
     * // Count the number of TestSubjects
     * const count = await prisma.testSubject.count({
     *   where: {
     *     // ... the filter for the TestSubjects we want to count
     *   }
     * })
    **/
    count<T extends TestSubjectCountArgs>(
      args?: Subset<T, TestSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestSubjectAggregateArgs>(args: Subset<T, TestSubjectAggregateArgs>): Prisma.PrismaPromise<GetTestSubjectAggregateType<T>>

    /**
     * Group by TestSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestSubjectGroupByArgs['orderBy'] }
        : { orderBy?: TestSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestSubject model
   */
  readonly fields: TestSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test_type<T extends TestTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestTypeDefaultArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestSubject model
   */
  interface TestSubjectFieldRefs {
    readonly test_type_id: FieldRef<"TestSubject", 'String'>
    readonly subject_id: FieldRef<"TestSubject", 'String'>
    readonly assigned_at: FieldRef<"TestSubject", 'DateTime'>
    readonly subject_order_in_test: FieldRef<"TestSubject", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TestSubject findUnique
   */
  export type TestSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TestSubject to fetch.
     */
    where: TestSubjectWhereUniqueInput
  }

  /**
   * TestSubject findUniqueOrThrow
   */
  export type TestSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TestSubject to fetch.
     */
    where: TestSubjectWhereUniqueInput
  }

  /**
   * TestSubject findFirst
   */
  export type TestSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TestSubject to fetch.
     */
    where?: TestSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestSubjects to fetch.
     */
    orderBy?: TestSubjectOrderByWithRelationInput | TestSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestSubjects.
     */
    cursor?: TestSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestSubjects.
     */
    distinct?: TestSubjectScalarFieldEnum | TestSubjectScalarFieldEnum[]
  }

  /**
   * TestSubject findFirstOrThrow
   */
  export type TestSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TestSubject to fetch.
     */
    where?: TestSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestSubjects to fetch.
     */
    orderBy?: TestSubjectOrderByWithRelationInput | TestSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestSubjects.
     */
    cursor?: TestSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestSubjects.
     */
    distinct?: TestSubjectScalarFieldEnum | TestSubjectScalarFieldEnum[]
  }

  /**
   * TestSubject findMany
   */
  export type TestSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * Filter, which TestSubjects to fetch.
     */
    where?: TestSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestSubjects to fetch.
     */
    orderBy?: TestSubjectOrderByWithRelationInput | TestSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestSubjects.
     */
    cursor?: TestSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestSubjects.
     */
    skip?: number
    distinct?: TestSubjectScalarFieldEnum | TestSubjectScalarFieldEnum[]
  }

  /**
   * TestSubject create
   */
  export type TestSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a TestSubject.
     */
    data: XOR<TestSubjectCreateInput, TestSubjectUncheckedCreateInput>
  }

  /**
   * TestSubject createMany
   */
  export type TestSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestSubjects.
     */
    data: TestSubjectCreateManyInput | TestSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestSubject update
   */
  export type TestSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a TestSubject.
     */
    data: XOR<TestSubjectUpdateInput, TestSubjectUncheckedUpdateInput>
    /**
     * Choose, which TestSubject to update.
     */
    where: TestSubjectWhereUniqueInput
  }

  /**
   * TestSubject updateMany
   */
  export type TestSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestSubjects.
     */
    data: XOR<TestSubjectUpdateManyMutationInput, TestSubjectUncheckedUpdateManyInput>
    /**
     * Filter which TestSubjects to update
     */
    where?: TestSubjectWhereInput
    /**
     * Limit how many TestSubjects to update.
     */
    limit?: number
  }

  /**
   * TestSubject upsert
   */
  export type TestSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the TestSubject to update in case it exists.
     */
    where: TestSubjectWhereUniqueInput
    /**
     * In case the TestSubject found by the `where` argument doesn't exist, create a new TestSubject with this data.
     */
    create: XOR<TestSubjectCreateInput, TestSubjectUncheckedCreateInput>
    /**
     * In case the TestSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestSubjectUpdateInput, TestSubjectUncheckedUpdateInput>
  }

  /**
   * TestSubject delete
   */
  export type TestSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
    /**
     * Filter which TestSubject to delete.
     */
    where: TestSubjectWhereUniqueInput
  }

  /**
   * TestSubject deleteMany
   */
  export type TestSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestSubjects to delete
     */
    where?: TestSubjectWhereInput
    /**
     * Limit how many TestSubjects to delete.
     */
    limit?: number
  }

  /**
   * TestSubject without action
   */
  export type TestSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestSubject
     */
    select?: TestSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestSubject
     */
    omit?: TestSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestSubjectInclude<ExtArgs> | null
  }


  /**
   * Model GlossaryCategory
   */

  export type AggregateGlossaryCategory = {
    _count: GlossaryCategoryCountAggregateOutputType | null
    _min: GlossaryCategoryMinAggregateOutputType | null
    _max: GlossaryCategoryMaxAggregateOutputType | null
  }

  export type GlossaryCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    active: boolean | null
  }

  export type GlossaryCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    active: boolean | null
  }

  export type GlossaryCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    created_at: number
    updated_at: number
    active: number
    _all: number
  }


  export type GlossaryCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    updated_at?: true
    active?: true
  }

  export type GlossaryCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    updated_at?: true
    active?: true
  }

  export type GlossaryCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    created_at?: true
    updated_at?: true
    active?: true
    _all?: true
  }

  export type GlossaryCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlossaryCategory to aggregate.
     */
    where?: GlossaryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryCategories to fetch.
     */
    orderBy?: GlossaryCategoryOrderByWithRelationInput | GlossaryCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlossaryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlossaryCategories
    **/
    _count?: true | GlossaryCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlossaryCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlossaryCategoryMaxAggregateInputType
  }

  export type GetGlossaryCategoryAggregateType<T extends GlossaryCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGlossaryCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlossaryCategory[P]>
      : GetScalarType<T[P], AggregateGlossaryCategory[P]>
  }




  export type GlossaryCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlossaryCategoryWhereInput
    orderBy?: GlossaryCategoryOrderByWithAggregationInput | GlossaryCategoryOrderByWithAggregationInput[]
    by: GlossaryCategoryScalarFieldEnum[] | GlossaryCategoryScalarFieldEnum
    having?: GlossaryCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlossaryCategoryCountAggregateInputType | true
    _min?: GlossaryCategoryMinAggregateInputType
    _max?: GlossaryCategoryMaxAggregateInputType
  }

  export type GlossaryCategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    created_at: Date
    updated_at: Date
    active: boolean
    _count: GlossaryCategoryCountAggregateOutputType | null
    _min: GlossaryCategoryMinAggregateOutputType | null
    _max: GlossaryCategoryMaxAggregateOutputType | null
  }

  type GetGlossaryCategoryGroupByPayload<T extends GlossaryCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlossaryCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlossaryCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlossaryCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], GlossaryCategoryGroupByOutputType[P]>
        }
      >
    >


  export type GlossaryCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    active?: boolean
    terms?: boolean | GlossaryCategory$termsArgs<ExtArgs>
    _count?: boolean | GlossaryCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["glossaryCategory"]>



  export type GlossaryCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    active?: boolean
  }

  export type GlossaryCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "created_at" | "updated_at" | "active", ExtArgs["result"]["glossaryCategory"]>
  export type GlossaryCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    terms?: boolean | GlossaryCategory$termsArgs<ExtArgs>
    _count?: boolean | GlossaryCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GlossaryCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlossaryCategory"
    objects: {
      terms: Prisma.$GlossaryTermPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      created_at: Date
      updated_at: Date
      active: boolean
    }, ExtArgs["result"]["glossaryCategory"]>
    composites: {}
  }

  type GlossaryCategoryGetPayload<S extends boolean | null | undefined | GlossaryCategoryDefaultArgs> = $Result.GetResult<Prisma.$GlossaryCategoryPayload, S>

  type GlossaryCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GlossaryCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GlossaryCategoryCountAggregateInputType | true
    }

  export interface GlossaryCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlossaryCategory'], meta: { name: 'GlossaryCategory' } }
    /**
     * Find zero or one GlossaryCategory that matches the filter.
     * @param {GlossaryCategoryFindUniqueArgs} args - Arguments to find a GlossaryCategory
     * @example
     * // Get one GlossaryCategory
     * const glossaryCategory = await prisma.glossaryCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlossaryCategoryFindUniqueArgs>(args: SelectSubset<T, GlossaryCategoryFindUniqueArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GlossaryCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GlossaryCategoryFindUniqueOrThrowArgs} args - Arguments to find a GlossaryCategory
     * @example
     * // Get one GlossaryCategory
     * const glossaryCategory = await prisma.glossaryCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlossaryCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, GlossaryCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GlossaryCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCategoryFindFirstArgs} args - Arguments to find a GlossaryCategory
     * @example
     * // Get one GlossaryCategory
     * const glossaryCategory = await prisma.glossaryCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlossaryCategoryFindFirstArgs>(args?: SelectSubset<T, GlossaryCategoryFindFirstArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GlossaryCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCategoryFindFirstOrThrowArgs} args - Arguments to find a GlossaryCategory
     * @example
     * // Get one GlossaryCategory
     * const glossaryCategory = await prisma.glossaryCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlossaryCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, GlossaryCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GlossaryCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlossaryCategories
     * const glossaryCategories = await prisma.glossaryCategory.findMany()
     * 
     * // Get first 10 GlossaryCategories
     * const glossaryCategories = await prisma.glossaryCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const glossaryCategoryWithIdOnly = await prisma.glossaryCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlossaryCategoryFindManyArgs>(args?: SelectSubset<T, GlossaryCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GlossaryCategory.
     * @param {GlossaryCategoryCreateArgs} args - Arguments to create a GlossaryCategory.
     * @example
     * // Create one GlossaryCategory
     * const GlossaryCategory = await prisma.glossaryCategory.create({
     *   data: {
     *     // ... data to create a GlossaryCategory
     *   }
     * })
     * 
     */
    create<T extends GlossaryCategoryCreateArgs>(args: SelectSubset<T, GlossaryCategoryCreateArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GlossaryCategories.
     * @param {GlossaryCategoryCreateManyArgs} args - Arguments to create many GlossaryCategories.
     * @example
     * // Create many GlossaryCategories
     * const glossaryCategory = await prisma.glossaryCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlossaryCategoryCreateManyArgs>(args?: SelectSubset<T, GlossaryCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GlossaryCategory.
     * @param {GlossaryCategoryDeleteArgs} args - Arguments to delete one GlossaryCategory.
     * @example
     * // Delete one GlossaryCategory
     * const GlossaryCategory = await prisma.glossaryCategory.delete({
     *   where: {
     *     // ... filter to delete one GlossaryCategory
     *   }
     * })
     * 
     */
    delete<T extends GlossaryCategoryDeleteArgs>(args: SelectSubset<T, GlossaryCategoryDeleteArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GlossaryCategory.
     * @param {GlossaryCategoryUpdateArgs} args - Arguments to update one GlossaryCategory.
     * @example
     * // Update one GlossaryCategory
     * const glossaryCategory = await prisma.glossaryCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlossaryCategoryUpdateArgs>(args: SelectSubset<T, GlossaryCategoryUpdateArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GlossaryCategories.
     * @param {GlossaryCategoryDeleteManyArgs} args - Arguments to filter GlossaryCategories to delete.
     * @example
     * // Delete a few GlossaryCategories
     * const { count } = await prisma.glossaryCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlossaryCategoryDeleteManyArgs>(args?: SelectSubset<T, GlossaryCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlossaryCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlossaryCategories
     * const glossaryCategory = await prisma.glossaryCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlossaryCategoryUpdateManyArgs>(args: SelectSubset<T, GlossaryCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GlossaryCategory.
     * @param {GlossaryCategoryUpsertArgs} args - Arguments to update or create a GlossaryCategory.
     * @example
     * // Update or create a GlossaryCategory
     * const glossaryCategory = await prisma.glossaryCategory.upsert({
     *   create: {
     *     // ... data to create a GlossaryCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlossaryCategory we want to update
     *   }
     * })
     */
    upsert<T extends GlossaryCategoryUpsertArgs>(args: SelectSubset<T, GlossaryCategoryUpsertArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GlossaryCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCategoryCountArgs} args - Arguments to filter GlossaryCategories to count.
     * @example
     * // Count the number of GlossaryCategories
     * const count = await prisma.glossaryCategory.count({
     *   where: {
     *     // ... the filter for the GlossaryCategories we want to count
     *   }
     * })
    **/
    count<T extends GlossaryCategoryCountArgs>(
      args?: Subset<T, GlossaryCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlossaryCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlossaryCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlossaryCategoryAggregateArgs>(args: Subset<T, GlossaryCategoryAggregateArgs>): Prisma.PrismaPromise<GetGlossaryCategoryAggregateType<T>>

    /**
     * Group by GlossaryCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlossaryCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlossaryCategoryGroupByArgs['orderBy'] }
        : { orderBy?: GlossaryCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlossaryCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlossaryCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlossaryCategory model
   */
  readonly fields: GlossaryCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlossaryCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlossaryCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    terms<T extends GlossaryCategory$termsArgs<ExtArgs> = {}>(args?: Subset<T, GlossaryCategory$termsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlossaryCategory model
   */
  interface GlossaryCategoryFieldRefs {
    readonly id: FieldRef<"GlossaryCategory", 'String'>
    readonly name: FieldRef<"GlossaryCategory", 'String'>
    readonly description: FieldRef<"GlossaryCategory", 'String'>
    readonly created_at: FieldRef<"GlossaryCategory", 'DateTime'>
    readonly updated_at: FieldRef<"GlossaryCategory", 'DateTime'>
    readonly active: FieldRef<"GlossaryCategory", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * GlossaryCategory findUnique
   */
  export type GlossaryCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryCategory to fetch.
     */
    where: GlossaryCategoryWhereUniqueInput
  }

  /**
   * GlossaryCategory findUniqueOrThrow
   */
  export type GlossaryCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryCategory to fetch.
     */
    where: GlossaryCategoryWhereUniqueInput
  }

  /**
   * GlossaryCategory findFirst
   */
  export type GlossaryCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryCategory to fetch.
     */
    where?: GlossaryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryCategories to fetch.
     */
    orderBy?: GlossaryCategoryOrderByWithRelationInput | GlossaryCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlossaryCategories.
     */
    cursor?: GlossaryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlossaryCategories.
     */
    distinct?: GlossaryCategoryScalarFieldEnum | GlossaryCategoryScalarFieldEnum[]
  }

  /**
   * GlossaryCategory findFirstOrThrow
   */
  export type GlossaryCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryCategory to fetch.
     */
    where?: GlossaryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryCategories to fetch.
     */
    orderBy?: GlossaryCategoryOrderByWithRelationInput | GlossaryCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlossaryCategories.
     */
    cursor?: GlossaryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlossaryCategories.
     */
    distinct?: GlossaryCategoryScalarFieldEnum | GlossaryCategoryScalarFieldEnum[]
  }

  /**
   * GlossaryCategory findMany
   */
  export type GlossaryCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryCategories to fetch.
     */
    where?: GlossaryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryCategories to fetch.
     */
    orderBy?: GlossaryCategoryOrderByWithRelationInput | GlossaryCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlossaryCategories.
     */
    cursor?: GlossaryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryCategories.
     */
    skip?: number
    distinct?: GlossaryCategoryScalarFieldEnum | GlossaryCategoryScalarFieldEnum[]
  }

  /**
   * GlossaryCategory create
   */
  export type GlossaryCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GlossaryCategory.
     */
    data: XOR<GlossaryCategoryCreateInput, GlossaryCategoryUncheckedCreateInput>
  }

  /**
   * GlossaryCategory createMany
   */
  export type GlossaryCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlossaryCategories.
     */
    data: GlossaryCategoryCreateManyInput | GlossaryCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GlossaryCategory update
   */
  export type GlossaryCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GlossaryCategory.
     */
    data: XOR<GlossaryCategoryUpdateInput, GlossaryCategoryUncheckedUpdateInput>
    /**
     * Choose, which GlossaryCategory to update.
     */
    where: GlossaryCategoryWhereUniqueInput
  }

  /**
   * GlossaryCategory updateMany
   */
  export type GlossaryCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlossaryCategories.
     */
    data: XOR<GlossaryCategoryUpdateManyMutationInput, GlossaryCategoryUncheckedUpdateManyInput>
    /**
     * Filter which GlossaryCategories to update
     */
    where?: GlossaryCategoryWhereInput
    /**
     * Limit how many GlossaryCategories to update.
     */
    limit?: number
  }

  /**
   * GlossaryCategory upsert
   */
  export type GlossaryCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GlossaryCategory to update in case it exists.
     */
    where: GlossaryCategoryWhereUniqueInput
    /**
     * In case the GlossaryCategory found by the `where` argument doesn't exist, create a new GlossaryCategory with this data.
     */
    create: XOR<GlossaryCategoryCreateInput, GlossaryCategoryUncheckedCreateInput>
    /**
     * In case the GlossaryCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlossaryCategoryUpdateInput, GlossaryCategoryUncheckedUpdateInput>
  }

  /**
   * GlossaryCategory delete
   */
  export type GlossaryCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
    /**
     * Filter which GlossaryCategory to delete.
     */
    where: GlossaryCategoryWhereUniqueInput
  }

  /**
   * GlossaryCategory deleteMany
   */
  export type GlossaryCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlossaryCategories to delete
     */
    where?: GlossaryCategoryWhereInput
    /**
     * Limit how many GlossaryCategories to delete.
     */
    limit?: number
  }

  /**
   * GlossaryCategory.terms
   */
  export type GlossaryCategory$termsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    where?: GlossaryTermWhereInput
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    cursor?: GlossaryTermWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GlossaryTermScalarFieldEnum | GlossaryTermScalarFieldEnum[]
  }

  /**
   * GlossaryCategory without action
   */
  export type GlossaryCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryCategory
     */
    select?: GlossaryCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryCategory
     */
    omit?: GlossaryCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryCategoryInclude<ExtArgs> | null
  }


  /**
   * Model GlossaryTerm
   */

  export type AggregateGlossaryTerm = {
    _count: GlossaryTermCountAggregateOutputType | null
    _min: GlossaryTermMinAggregateOutputType | null
    _max: GlossaryTermMaxAggregateOutputType | null
  }

  export type GlossaryTermMinAggregateOutputType = {
    id: string | null
    word: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    active: boolean | null
    category_id: string | null
  }

  export type GlossaryTermMaxAggregateOutputType = {
    id: string | null
    word: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    active: boolean | null
    category_id: string | null
  }

  export type GlossaryTermCountAggregateOutputType = {
    id: number
    word: number
    description: number
    created_at: number
    updated_at: number
    active: number
    category_id: number
    _all: number
  }


  export type GlossaryTermMinAggregateInputType = {
    id?: true
    word?: true
    description?: true
    created_at?: true
    updated_at?: true
    active?: true
    category_id?: true
  }

  export type GlossaryTermMaxAggregateInputType = {
    id?: true
    word?: true
    description?: true
    created_at?: true
    updated_at?: true
    active?: true
    category_id?: true
  }

  export type GlossaryTermCountAggregateInputType = {
    id?: true
    word?: true
    description?: true
    created_at?: true
    updated_at?: true
    active?: true
    category_id?: true
    _all?: true
  }

  export type GlossaryTermAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlossaryTerm to aggregate.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlossaryTerms
    **/
    _count?: true | GlossaryTermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlossaryTermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlossaryTermMaxAggregateInputType
  }

  export type GetGlossaryTermAggregateType<T extends GlossaryTermAggregateArgs> = {
        [P in keyof T & keyof AggregateGlossaryTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlossaryTerm[P]>
      : GetScalarType<T[P], AggregateGlossaryTerm[P]>
  }




  export type GlossaryTermGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlossaryTermWhereInput
    orderBy?: GlossaryTermOrderByWithAggregationInput | GlossaryTermOrderByWithAggregationInput[]
    by: GlossaryTermScalarFieldEnum[] | GlossaryTermScalarFieldEnum
    having?: GlossaryTermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlossaryTermCountAggregateInputType | true
    _min?: GlossaryTermMinAggregateInputType
    _max?: GlossaryTermMaxAggregateInputType
  }

  export type GlossaryTermGroupByOutputType = {
    id: string
    word: string
    description: string
    created_at: Date
    updated_at: Date
    active: boolean
    category_id: string
    _count: GlossaryTermCountAggregateOutputType | null
    _min: GlossaryTermMinAggregateOutputType | null
    _max: GlossaryTermMaxAggregateOutputType | null
  }

  type GetGlossaryTermGroupByPayload<T extends GlossaryTermGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlossaryTermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlossaryTermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlossaryTermGroupByOutputType[P]>
            : GetScalarType<T[P], GlossaryTermGroupByOutputType[P]>
        }
      >
    >


  export type GlossaryTermSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    active?: boolean
    category_id?: boolean
    category?: boolean | GlossaryCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["glossaryTerm"]>



  export type GlossaryTermSelectScalar = {
    id?: boolean
    word?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    active?: boolean
    category_id?: boolean
  }

  export type GlossaryTermOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "word" | "description" | "created_at" | "updated_at" | "active" | "category_id", ExtArgs["result"]["glossaryTerm"]>
  export type GlossaryTermInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | GlossaryCategoryDefaultArgs<ExtArgs>
  }

  export type $GlossaryTermPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlossaryTerm"
    objects: {
      category: Prisma.$GlossaryCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      word: string
      description: string
      created_at: Date
      updated_at: Date
      active: boolean
      category_id: string
    }, ExtArgs["result"]["glossaryTerm"]>
    composites: {}
  }

  type GlossaryTermGetPayload<S extends boolean | null | undefined | GlossaryTermDefaultArgs> = $Result.GetResult<Prisma.$GlossaryTermPayload, S>

  type GlossaryTermCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GlossaryTermFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GlossaryTermCountAggregateInputType | true
    }

  export interface GlossaryTermDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlossaryTerm'], meta: { name: 'GlossaryTerm' } }
    /**
     * Find zero or one GlossaryTerm that matches the filter.
     * @param {GlossaryTermFindUniqueArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlossaryTermFindUniqueArgs>(args: SelectSubset<T, GlossaryTermFindUniqueArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GlossaryTerm that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GlossaryTermFindUniqueOrThrowArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlossaryTermFindUniqueOrThrowArgs>(args: SelectSubset<T, GlossaryTermFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GlossaryTerm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermFindFirstArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlossaryTermFindFirstArgs>(args?: SelectSubset<T, GlossaryTermFindFirstArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GlossaryTerm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermFindFirstOrThrowArgs} args - Arguments to find a GlossaryTerm
     * @example
     * // Get one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlossaryTermFindFirstOrThrowArgs>(args?: SelectSubset<T, GlossaryTermFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GlossaryTerms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlossaryTerms
     * const glossaryTerms = await prisma.glossaryTerm.findMany()
     * 
     * // Get first 10 GlossaryTerms
     * const glossaryTerms = await prisma.glossaryTerm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const glossaryTermWithIdOnly = await prisma.glossaryTerm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlossaryTermFindManyArgs>(args?: SelectSubset<T, GlossaryTermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GlossaryTerm.
     * @param {GlossaryTermCreateArgs} args - Arguments to create a GlossaryTerm.
     * @example
     * // Create one GlossaryTerm
     * const GlossaryTerm = await prisma.glossaryTerm.create({
     *   data: {
     *     // ... data to create a GlossaryTerm
     *   }
     * })
     * 
     */
    create<T extends GlossaryTermCreateArgs>(args: SelectSubset<T, GlossaryTermCreateArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GlossaryTerms.
     * @param {GlossaryTermCreateManyArgs} args - Arguments to create many GlossaryTerms.
     * @example
     * // Create many GlossaryTerms
     * const glossaryTerm = await prisma.glossaryTerm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlossaryTermCreateManyArgs>(args?: SelectSubset<T, GlossaryTermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GlossaryTerm.
     * @param {GlossaryTermDeleteArgs} args - Arguments to delete one GlossaryTerm.
     * @example
     * // Delete one GlossaryTerm
     * const GlossaryTerm = await prisma.glossaryTerm.delete({
     *   where: {
     *     // ... filter to delete one GlossaryTerm
     *   }
     * })
     * 
     */
    delete<T extends GlossaryTermDeleteArgs>(args: SelectSubset<T, GlossaryTermDeleteArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GlossaryTerm.
     * @param {GlossaryTermUpdateArgs} args - Arguments to update one GlossaryTerm.
     * @example
     * // Update one GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlossaryTermUpdateArgs>(args: SelectSubset<T, GlossaryTermUpdateArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GlossaryTerms.
     * @param {GlossaryTermDeleteManyArgs} args - Arguments to filter GlossaryTerms to delete.
     * @example
     * // Delete a few GlossaryTerms
     * const { count } = await prisma.glossaryTerm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlossaryTermDeleteManyArgs>(args?: SelectSubset<T, GlossaryTermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlossaryTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlossaryTerms
     * const glossaryTerm = await prisma.glossaryTerm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlossaryTermUpdateManyArgs>(args: SelectSubset<T, GlossaryTermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GlossaryTerm.
     * @param {GlossaryTermUpsertArgs} args - Arguments to update or create a GlossaryTerm.
     * @example
     * // Update or create a GlossaryTerm
     * const glossaryTerm = await prisma.glossaryTerm.upsert({
     *   create: {
     *     // ... data to create a GlossaryTerm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlossaryTerm we want to update
     *   }
     * })
     */
    upsert<T extends GlossaryTermUpsertArgs>(args: SelectSubset<T, GlossaryTermUpsertArgs<ExtArgs>>): Prisma__GlossaryTermClient<$Result.GetResult<Prisma.$GlossaryTermPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GlossaryTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermCountArgs} args - Arguments to filter GlossaryTerms to count.
     * @example
     * // Count the number of GlossaryTerms
     * const count = await prisma.glossaryTerm.count({
     *   where: {
     *     // ... the filter for the GlossaryTerms we want to count
     *   }
     * })
    **/
    count<T extends GlossaryTermCountArgs>(
      args?: Subset<T, GlossaryTermCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlossaryTermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlossaryTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlossaryTermAggregateArgs>(args: Subset<T, GlossaryTermAggregateArgs>): Prisma.PrismaPromise<GetGlossaryTermAggregateType<T>>

    /**
     * Group by GlossaryTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossaryTermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlossaryTermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlossaryTermGroupByArgs['orderBy'] }
        : { orderBy?: GlossaryTermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlossaryTermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlossaryTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlossaryTerm model
   */
  readonly fields: GlossaryTermFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlossaryTerm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlossaryTermClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends GlossaryCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GlossaryCategoryDefaultArgs<ExtArgs>>): Prisma__GlossaryCategoryClient<$Result.GetResult<Prisma.$GlossaryCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlossaryTerm model
   */
  interface GlossaryTermFieldRefs {
    readonly id: FieldRef<"GlossaryTerm", 'String'>
    readonly word: FieldRef<"GlossaryTerm", 'String'>
    readonly description: FieldRef<"GlossaryTerm", 'String'>
    readonly created_at: FieldRef<"GlossaryTerm", 'DateTime'>
    readonly updated_at: FieldRef<"GlossaryTerm", 'DateTime'>
    readonly active: FieldRef<"GlossaryTerm", 'Boolean'>
    readonly category_id: FieldRef<"GlossaryTerm", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GlossaryTerm findUnique
   */
  export type GlossaryTermFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm findUniqueOrThrow
   */
  export type GlossaryTermFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm findFirst
   */
  export type GlossaryTermFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlossaryTerms.
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlossaryTerms.
     */
    distinct?: GlossaryTermScalarFieldEnum | GlossaryTermScalarFieldEnum[]
  }

  /**
   * GlossaryTerm findFirstOrThrow
   */
  export type GlossaryTermFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryTerm to fetch.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlossaryTerms.
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlossaryTerms.
     */
    distinct?: GlossaryTermScalarFieldEnum | GlossaryTermScalarFieldEnum[]
  }

  /**
   * GlossaryTerm findMany
   */
  export type GlossaryTermFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * Filter, which GlossaryTerms to fetch.
     */
    where?: GlossaryTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlossaryTerms to fetch.
     */
    orderBy?: GlossaryTermOrderByWithRelationInput | GlossaryTermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlossaryTerms.
     */
    cursor?: GlossaryTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlossaryTerms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlossaryTerms.
     */
    skip?: number
    distinct?: GlossaryTermScalarFieldEnum | GlossaryTermScalarFieldEnum[]
  }

  /**
   * GlossaryTerm create
   */
  export type GlossaryTermCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * The data needed to create a GlossaryTerm.
     */
    data: XOR<GlossaryTermCreateInput, GlossaryTermUncheckedCreateInput>
  }

  /**
   * GlossaryTerm createMany
   */
  export type GlossaryTermCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlossaryTerms.
     */
    data: GlossaryTermCreateManyInput | GlossaryTermCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GlossaryTerm update
   */
  export type GlossaryTermUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * The data needed to update a GlossaryTerm.
     */
    data: XOR<GlossaryTermUpdateInput, GlossaryTermUncheckedUpdateInput>
    /**
     * Choose, which GlossaryTerm to update.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm updateMany
   */
  export type GlossaryTermUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlossaryTerms.
     */
    data: XOR<GlossaryTermUpdateManyMutationInput, GlossaryTermUncheckedUpdateManyInput>
    /**
     * Filter which GlossaryTerms to update
     */
    where?: GlossaryTermWhereInput
    /**
     * Limit how many GlossaryTerms to update.
     */
    limit?: number
  }

  /**
   * GlossaryTerm upsert
   */
  export type GlossaryTermUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * The filter to search for the GlossaryTerm to update in case it exists.
     */
    where: GlossaryTermWhereUniqueInput
    /**
     * In case the GlossaryTerm found by the `where` argument doesn't exist, create a new GlossaryTerm with this data.
     */
    create: XOR<GlossaryTermCreateInput, GlossaryTermUncheckedCreateInput>
    /**
     * In case the GlossaryTerm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlossaryTermUpdateInput, GlossaryTermUncheckedUpdateInput>
  }

  /**
   * GlossaryTerm delete
   */
  export type GlossaryTermDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
    /**
     * Filter which GlossaryTerm to delete.
     */
    where: GlossaryTermWhereUniqueInput
  }

  /**
   * GlossaryTerm deleteMany
   */
  export type GlossaryTermDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlossaryTerms to delete
     */
    where?: GlossaryTermWhereInput
    /**
     * Limit how many GlossaryTerms to delete.
     */
    limit?: number
  }

  /**
   * GlossaryTerm without action
   */
  export type GlossaryTermDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlossaryTerm
     */
    select?: GlossaryTermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlossaryTerm
     */
    omit?: GlossaryTermOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GlossaryTermInclude<ExtArgs> | null
  }


  /**
   * Model Questionnaire
   */

  export type AggregateQuestionnaire = {
    _count: QuestionnaireCountAggregateOutputType | null
    _avg: QuestionnaireAvgAggregateOutputType | null
    _sum: QuestionnaireSumAggregateOutputType | null
    _min: QuestionnaireMinAggregateOutputType | null
    _max: QuestionnaireMaxAggregateOutputType | null
  }

  export type QuestionnaireAvgAggregateOutputType = {
    order: number | null
  }

  export type QuestionnaireSumAggregateOutputType = {
    order: number | null
  }

  export type QuestionnaireMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    order: number | null
    published: boolean | null
    subject_level_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionnaireMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    order: number | null
    published: boolean | null
    subject_level_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionnaireCountAggregateOutputType = {
    id: number
    name: number
    description: number
    order: number
    published: number
    subject_level_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type QuestionnaireAvgAggregateInputType = {
    order?: true
  }

  export type QuestionnaireSumAggregateInputType = {
    order?: true
  }

  export type QuestionnaireMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    published?: true
    subject_level_id?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionnaireMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    published?: true
    subject_level_id?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionnaireCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    order?: true
    published?: true
    subject_level_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type QuestionnaireAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questionnaire to aggregate.
     */
    where?: QuestionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questionnaires to fetch.
     */
    orderBy?: QuestionnaireOrderByWithRelationInput | QuestionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questionnaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questionnaires
    **/
    _count?: true | QuestionnaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionnaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionnaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionnaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionnaireMaxAggregateInputType
  }

  export type GetQuestionnaireAggregateType<T extends QuestionnaireAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionnaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionnaire[P]>
      : GetScalarType<T[P], AggregateQuestionnaire[P]>
  }




  export type QuestionnaireGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionnaireWhereInput
    orderBy?: QuestionnaireOrderByWithAggregationInput | QuestionnaireOrderByWithAggregationInput[]
    by: QuestionnaireScalarFieldEnum[] | QuestionnaireScalarFieldEnum
    having?: QuestionnaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionnaireCountAggregateInputType | true
    _avg?: QuestionnaireAvgAggregateInputType
    _sum?: QuestionnaireSumAggregateInputType
    _min?: QuestionnaireMinAggregateInputType
    _max?: QuestionnaireMaxAggregateInputType
  }

  export type QuestionnaireGroupByOutputType = {
    id: string
    name: string
    description: string | null
    order: number | null
    published: boolean
    subject_level_id: string
    created_at: Date
    updated_at: Date
    _count: QuestionnaireCountAggregateOutputType | null
    _avg: QuestionnaireAvgAggregateOutputType | null
    _sum: QuestionnaireSumAggregateOutputType | null
    _min: QuestionnaireMinAggregateOutputType | null
    _max: QuestionnaireMaxAggregateOutputType | null
  }

  type GetQuestionnaireGroupByPayload<T extends QuestionnaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionnaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionnaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionnaireGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionnaireGroupByOutputType[P]>
        }
      >
    >


  export type QuestionnaireSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    published?: boolean
    subject_level_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    subjectLevel?: boolean | SubjectLevelDefaultArgs<ExtArgs>
    questions?: boolean | Questionnaire$questionsArgs<ExtArgs>
    userAttempts?: boolean | Questionnaire$userAttemptsArgs<ExtArgs>
    _count?: boolean | QuestionnaireCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionnaire"]>



  export type QuestionnaireSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    published?: boolean
    subject_level_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type QuestionnaireOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "order" | "published" | "subject_level_id" | "created_at" | "updated_at", ExtArgs["result"]["questionnaire"]>
  export type QuestionnaireInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjectLevel?: boolean | SubjectLevelDefaultArgs<ExtArgs>
    questions?: boolean | Questionnaire$questionsArgs<ExtArgs>
    userAttempts?: boolean | Questionnaire$userAttemptsArgs<ExtArgs>
    _count?: boolean | QuestionnaireCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $QuestionnairePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Questionnaire"
    objects: {
      subjectLevel: Prisma.$SubjectLevelPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      userAttempts: Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      order: number | null
      published: boolean
      subject_level_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["questionnaire"]>
    composites: {}
  }

  type QuestionnaireGetPayload<S extends boolean | null | undefined | QuestionnaireDefaultArgs> = $Result.GetResult<Prisma.$QuestionnairePayload, S>

  type QuestionnaireCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionnaireFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionnaireCountAggregateInputType | true
    }

  export interface QuestionnaireDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Questionnaire'], meta: { name: 'Questionnaire' } }
    /**
     * Find zero or one Questionnaire that matches the filter.
     * @param {QuestionnaireFindUniqueArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionnaireFindUniqueArgs>(args: SelectSubset<T, QuestionnaireFindUniqueArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Questionnaire that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionnaireFindUniqueOrThrowArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionnaireFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionnaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Questionnaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireFindFirstArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionnaireFindFirstArgs>(args?: SelectSubset<T, QuestionnaireFindFirstArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Questionnaire that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireFindFirstOrThrowArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionnaireFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionnaireFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questionnaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questionnaires
     * const questionnaires = await prisma.questionnaire.findMany()
     * 
     * // Get first 10 Questionnaires
     * const questionnaires = await prisma.questionnaire.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionnaireWithIdOnly = await prisma.questionnaire.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionnaireFindManyArgs>(args?: SelectSubset<T, QuestionnaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Questionnaire.
     * @param {QuestionnaireCreateArgs} args - Arguments to create a Questionnaire.
     * @example
     * // Create one Questionnaire
     * const Questionnaire = await prisma.questionnaire.create({
     *   data: {
     *     // ... data to create a Questionnaire
     *   }
     * })
     * 
     */
    create<T extends QuestionnaireCreateArgs>(args: SelectSubset<T, QuestionnaireCreateArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questionnaires.
     * @param {QuestionnaireCreateManyArgs} args - Arguments to create many Questionnaires.
     * @example
     * // Create many Questionnaires
     * const questionnaire = await prisma.questionnaire.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionnaireCreateManyArgs>(args?: SelectSubset<T, QuestionnaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questionnaire.
     * @param {QuestionnaireDeleteArgs} args - Arguments to delete one Questionnaire.
     * @example
     * // Delete one Questionnaire
     * const Questionnaire = await prisma.questionnaire.delete({
     *   where: {
     *     // ... filter to delete one Questionnaire
     *   }
     * })
     * 
     */
    delete<T extends QuestionnaireDeleteArgs>(args: SelectSubset<T, QuestionnaireDeleteArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Questionnaire.
     * @param {QuestionnaireUpdateArgs} args - Arguments to update one Questionnaire.
     * @example
     * // Update one Questionnaire
     * const questionnaire = await prisma.questionnaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionnaireUpdateArgs>(args: SelectSubset<T, QuestionnaireUpdateArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questionnaires.
     * @param {QuestionnaireDeleteManyArgs} args - Arguments to filter Questionnaires to delete.
     * @example
     * // Delete a few Questionnaires
     * const { count } = await prisma.questionnaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionnaireDeleteManyArgs>(args?: SelectSubset<T, QuestionnaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questionnaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questionnaires
     * const questionnaire = await prisma.questionnaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionnaireUpdateManyArgs>(args: SelectSubset<T, QuestionnaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questionnaire.
     * @param {QuestionnaireUpsertArgs} args - Arguments to update or create a Questionnaire.
     * @example
     * // Update or create a Questionnaire
     * const questionnaire = await prisma.questionnaire.upsert({
     *   create: {
     *     // ... data to create a Questionnaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questionnaire we want to update
     *   }
     * })
     */
    upsert<T extends QuestionnaireUpsertArgs>(args: SelectSubset<T, QuestionnaireUpsertArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questionnaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireCountArgs} args - Arguments to filter Questionnaires to count.
     * @example
     * // Count the number of Questionnaires
     * const count = await prisma.questionnaire.count({
     *   where: {
     *     // ... the filter for the Questionnaires we want to count
     *   }
     * })
    **/
    count<T extends QuestionnaireCountArgs>(
      args?: Subset<T, QuestionnaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionnaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questionnaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionnaireAggregateArgs>(args: Subset<T, QuestionnaireAggregateArgs>): Prisma.PrismaPromise<GetQuestionnaireAggregateType<T>>

    /**
     * Group by Questionnaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionnaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionnaireGroupByArgs['orderBy'] }
        : { orderBy?: QuestionnaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionnaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionnaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Questionnaire model
   */
  readonly fields: QuestionnaireFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Questionnaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionnaireClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subjectLevel<T extends SubjectLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectLevelDefaultArgs<ExtArgs>>): Prisma__SubjectLevelClient<$Result.GetResult<Prisma.$SubjectLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends Questionnaire$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Questionnaire$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAttempts<T extends Questionnaire$userAttemptsArgs<ExtArgs> = {}>(args?: Subset<T, Questionnaire$userAttemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Questionnaire model
   */
  interface QuestionnaireFieldRefs {
    readonly id: FieldRef<"Questionnaire", 'String'>
    readonly name: FieldRef<"Questionnaire", 'String'>
    readonly description: FieldRef<"Questionnaire", 'String'>
    readonly order: FieldRef<"Questionnaire", 'Int'>
    readonly published: FieldRef<"Questionnaire", 'Boolean'>
    readonly subject_level_id: FieldRef<"Questionnaire", 'String'>
    readonly created_at: FieldRef<"Questionnaire", 'DateTime'>
    readonly updated_at: FieldRef<"Questionnaire", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Questionnaire findUnique
   */
  export type QuestionnaireFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * Filter, which Questionnaire to fetch.
     */
    where: QuestionnaireWhereUniqueInput
  }

  /**
   * Questionnaire findUniqueOrThrow
   */
  export type QuestionnaireFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * Filter, which Questionnaire to fetch.
     */
    where: QuestionnaireWhereUniqueInput
  }

  /**
   * Questionnaire findFirst
   */
  export type QuestionnaireFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * Filter, which Questionnaire to fetch.
     */
    where?: QuestionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questionnaires to fetch.
     */
    orderBy?: QuestionnaireOrderByWithRelationInput | QuestionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questionnaires.
     */
    cursor?: QuestionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questionnaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questionnaires.
     */
    distinct?: QuestionnaireScalarFieldEnum | QuestionnaireScalarFieldEnum[]
  }

  /**
   * Questionnaire findFirstOrThrow
   */
  export type QuestionnaireFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * Filter, which Questionnaire to fetch.
     */
    where?: QuestionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questionnaires to fetch.
     */
    orderBy?: QuestionnaireOrderByWithRelationInput | QuestionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questionnaires.
     */
    cursor?: QuestionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questionnaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questionnaires.
     */
    distinct?: QuestionnaireScalarFieldEnum | QuestionnaireScalarFieldEnum[]
  }

  /**
   * Questionnaire findMany
   */
  export type QuestionnaireFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * Filter, which Questionnaires to fetch.
     */
    where?: QuestionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questionnaires to fetch.
     */
    orderBy?: QuestionnaireOrderByWithRelationInput | QuestionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questionnaires.
     */
    cursor?: QuestionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questionnaires.
     */
    skip?: number
    distinct?: QuestionnaireScalarFieldEnum | QuestionnaireScalarFieldEnum[]
  }

  /**
   * Questionnaire create
   */
  export type QuestionnaireCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * The data needed to create a Questionnaire.
     */
    data: XOR<QuestionnaireCreateInput, QuestionnaireUncheckedCreateInput>
  }

  /**
   * Questionnaire createMany
   */
  export type QuestionnaireCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questionnaires.
     */
    data: QuestionnaireCreateManyInput | QuestionnaireCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Questionnaire update
   */
  export type QuestionnaireUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * The data needed to update a Questionnaire.
     */
    data: XOR<QuestionnaireUpdateInput, QuestionnaireUncheckedUpdateInput>
    /**
     * Choose, which Questionnaire to update.
     */
    where: QuestionnaireWhereUniqueInput
  }

  /**
   * Questionnaire updateMany
   */
  export type QuestionnaireUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questionnaires.
     */
    data: XOR<QuestionnaireUpdateManyMutationInput, QuestionnaireUncheckedUpdateManyInput>
    /**
     * Filter which Questionnaires to update
     */
    where?: QuestionnaireWhereInput
    /**
     * Limit how many Questionnaires to update.
     */
    limit?: number
  }

  /**
   * Questionnaire upsert
   */
  export type QuestionnaireUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * The filter to search for the Questionnaire to update in case it exists.
     */
    where: QuestionnaireWhereUniqueInput
    /**
     * In case the Questionnaire found by the `where` argument doesn't exist, create a new Questionnaire with this data.
     */
    create: XOR<QuestionnaireCreateInput, QuestionnaireUncheckedCreateInput>
    /**
     * In case the Questionnaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionnaireUpdateInput, QuestionnaireUncheckedUpdateInput>
  }

  /**
   * Questionnaire delete
   */
  export type QuestionnaireDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
    /**
     * Filter which Questionnaire to delete.
     */
    where: QuestionnaireWhereUniqueInput
  }

  /**
   * Questionnaire deleteMany
   */
  export type QuestionnaireDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questionnaires to delete
     */
    where?: QuestionnaireWhereInput
    /**
     * Limit how many Questionnaires to delete.
     */
    limit?: number
  }

  /**
   * Questionnaire.questions
   */
  export type Questionnaire$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Questionnaire.userAttempts
   */
  export type Questionnaire$userAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    where?: UserQuestionnaireAttemptWhereInput
    orderBy?: UserQuestionnaireAttemptOrderByWithRelationInput | UserQuestionnaireAttemptOrderByWithRelationInput[]
    cursor?: UserQuestionnaireAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionnaireAttemptScalarFieldEnum | UserQuestionnaireAttemptScalarFieldEnum[]
  }

  /**
   * Questionnaire without action
   */
  export type QuestionnaireDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questionnaire
     */
    select?: QuestionnaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Questionnaire
     */
    omit?: QuestionnaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    points: number | null
    order: number | null
    difficulty: number | null
  }

  export type QuestionSumAggregateOutputType = {
    points: number | null
    order: number | null
    difficulty: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    text: string | null
    question_type: $Enums.QuestionType | null
    explanation: string | null
    extra_info: string | null
    points: number | null
    order: number | null
    difficulty: number | null
    tags: string | null
    active: boolean | null
    questionnaire_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    text: string | null
    question_type: $Enums.QuestionType | null
    explanation: string | null
    extra_info: string | null
    points: number | null
    order: number | null
    difficulty: number | null
    tags: string | null
    active: boolean | null
    questionnaire_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    text: number
    question_type: number
    explanation: number
    extra_info: number
    points: number
    order: number
    difficulty: number
    tags: number
    active: number
    questionnaire_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    points?: true
    order?: true
    difficulty?: true
  }

  export type QuestionSumAggregateInputType = {
    points?: true
    order?: true
    difficulty?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    text?: true
    question_type?: true
    explanation?: true
    extra_info?: true
    points?: true
    order?: true
    difficulty?: true
    tags?: true
    active?: true
    questionnaire_id?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    text?: true
    question_type?: true
    explanation?: true
    extra_info?: true
    points?: true
    order?: true
    difficulty?: true
    tags?: true
    active?: true
    questionnaire_id?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    text?: true
    question_type?: true
    explanation?: true
    extra_info?: true
    points?: true
    order?: true
    difficulty?: true
    tags?: true
    active?: true
    questionnaire_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    text: string
    question_type: $Enums.QuestionType
    explanation: string | null
    extra_info: string | null
    points: number
    order: number | null
    difficulty: number | null
    tags: string | null
    active: boolean
    questionnaire_id: string
    created_at: Date
    updated_at: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    question_type?: boolean
    explanation?: boolean
    extra_info?: boolean
    points?: boolean
    order?: boolean
    difficulty?: boolean
    tags?: boolean
    active?: boolean
    questionnaire_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    questionnaire?: boolean | QuestionnaireDefaultArgs<ExtArgs>
    answerOptions?: boolean | Question$answerOptionsArgs<ExtArgs>
    userAnswers?: boolean | Question$userAnswersArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>



  export type QuestionSelectScalar = {
    id?: boolean
    text?: boolean
    question_type?: boolean
    explanation?: boolean
    extra_info?: boolean
    points?: boolean
    order?: boolean
    difficulty?: boolean
    tags?: boolean
    active?: boolean
    questionnaire_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "question_type" | "explanation" | "extra_info" | "points" | "order" | "difficulty" | "tags" | "active" | "questionnaire_id" | "created_at" | "updated_at", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionnaire?: boolean | QuestionnaireDefaultArgs<ExtArgs>
    answerOptions?: boolean | Question$answerOptionsArgs<ExtArgs>
    userAnswers?: boolean | Question$userAnswersArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      questionnaire: Prisma.$QuestionnairePayload<ExtArgs>
      answerOptions: Prisma.$AnswerOptionPayload<ExtArgs>[]
      userAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      question_type: $Enums.QuestionType
      explanation: string | null
      extra_info: string | null
      points: number
      order: number | null
      difficulty: number | null
      tags: string | null
      active: boolean
      questionnaire_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionnaire<T extends QuestionnaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionnaireDefaultArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    answerOptions<T extends Question$answerOptionsArgs<ExtArgs> = {}>(args?: Subset<T, Question$answerOptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAnswers<T extends Question$userAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Question$userAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly text: FieldRef<"Question", 'String'>
    readonly question_type: FieldRef<"Question", 'QuestionType'>
    readonly explanation: FieldRef<"Question", 'String'>
    readonly extra_info: FieldRef<"Question", 'String'>
    readonly points: FieldRef<"Question", 'Int'>
    readonly order: FieldRef<"Question", 'Int'>
    readonly difficulty: FieldRef<"Question", 'Int'>
    readonly tags: FieldRef<"Question", 'String'>
    readonly active: FieldRef<"Question", 'Boolean'>
    readonly questionnaire_id: FieldRef<"Question", 'String'>
    readonly created_at: FieldRef<"Question", 'DateTime'>
    readonly updated_at: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.answerOptions
   */
  export type Question$answerOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    where?: AnswerOptionWhereInput
    orderBy?: AnswerOptionOrderByWithRelationInput | AnswerOptionOrderByWithRelationInput[]
    cursor?: AnswerOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerOptionScalarFieldEnum | AnswerOptionScalarFieldEnum[]
  }

  /**
   * Question.userAnswers
   */
  export type Question$userAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model AnswerOption
   */

  export type AggregateAnswerOption = {
    _count: AnswerOptionCountAggregateOutputType | null
    _avg: AnswerOptionAvgAggregateOutputType | null
    _sum: AnswerOptionSumAggregateOutputType | null
    _min: AnswerOptionMinAggregateOutputType | null
    _max: AnswerOptionMaxAggregateOutputType | null
  }

  export type AnswerOptionAvgAggregateOutputType = {
    order: number | null
  }

  export type AnswerOptionSumAggregateOutputType = {
    order: number | null
  }

  export type AnswerOptionMinAggregateOutputType = {
    id: string | null
    text: string | null
    is_correct: boolean | null
    order: number | null
    question_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AnswerOptionMaxAggregateOutputType = {
    id: string | null
    text: string | null
    is_correct: boolean | null
    order: number | null
    question_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AnswerOptionCountAggregateOutputType = {
    id: number
    text: number
    is_correct: number
    order: number
    question_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AnswerOptionAvgAggregateInputType = {
    order?: true
  }

  export type AnswerOptionSumAggregateInputType = {
    order?: true
  }

  export type AnswerOptionMinAggregateInputType = {
    id?: true
    text?: true
    is_correct?: true
    order?: true
    question_id?: true
    created_at?: true
    updated_at?: true
  }

  export type AnswerOptionMaxAggregateInputType = {
    id?: true
    text?: true
    is_correct?: true
    order?: true
    question_id?: true
    created_at?: true
    updated_at?: true
  }

  export type AnswerOptionCountAggregateInputType = {
    id?: true
    text?: true
    is_correct?: true
    order?: true
    question_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AnswerOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnswerOption to aggregate.
     */
    where?: AnswerOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerOptions to fetch.
     */
    orderBy?: AnswerOptionOrderByWithRelationInput | AnswerOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnswerOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnswerOptions
    **/
    _count?: true | AnswerOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnswerOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnswerOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswerOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswerOptionMaxAggregateInputType
  }

  export type GetAnswerOptionAggregateType<T extends AnswerOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswerOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswerOption[P]>
      : GetScalarType<T[P], AggregateAnswerOption[P]>
  }




  export type AnswerOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerOptionWhereInput
    orderBy?: AnswerOptionOrderByWithAggregationInput | AnswerOptionOrderByWithAggregationInput[]
    by: AnswerOptionScalarFieldEnum[] | AnswerOptionScalarFieldEnum
    having?: AnswerOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswerOptionCountAggregateInputType | true
    _avg?: AnswerOptionAvgAggregateInputType
    _sum?: AnswerOptionSumAggregateInputType
    _min?: AnswerOptionMinAggregateInputType
    _max?: AnswerOptionMaxAggregateInputType
  }

  export type AnswerOptionGroupByOutputType = {
    id: string
    text: string
    is_correct: boolean
    order: number | null
    question_id: string
    created_at: Date
    updated_at: Date
    _count: AnswerOptionCountAggregateOutputType | null
    _avg: AnswerOptionAvgAggregateOutputType | null
    _sum: AnswerOptionSumAggregateOutputType | null
    _min: AnswerOptionMinAggregateOutputType | null
    _max: AnswerOptionMaxAggregateOutputType | null
  }

  type GetAnswerOptionGroupByPayload<T extends AnswerOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnswerOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswerOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswerOptionGroupByOutputType[P]>
            : GetScalarType<T[P], AnswerOptionGroupByOutputType[P]>
        }
      >
    >


  export type AnswerOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    is_correct?: boolean
    order?: boolean
    question_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    userAnswers?: boolean | AnswerOption$userAnswersArgs<ExtArgs>
    _count?: boolean | AnswerOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answerOption"]>



  export type AnswerOptionSelectScalar = {
    id?: boolean
    text?: boolean
    is_correct?: boolean
    order?: boolean
    question_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AnswerOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "is_correct" | "order" | "question_id" | "created_at" | "updated_at", ExtArgs["result"]["answerOption"]>
  export type AnswerOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    userAnswers?: boolean | AnswerOption$userAnswersArgs<ExtArgs>
    _count?: boolean | AnswerOptionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AnswerOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnswerOption"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      userAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      is_correct: boolean
      order: number | null
      question_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["answerOption"]>
    composites: {}
  }

  type AnswerOptionGetPayload<S extends boolean | null | undefined | AnswerOptionDefaultArgs> = $Result.GetResult<Prisma.$AnswerOptionPayload, S>

  type AnswerOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnswerOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnswerOptionCountAggregateInputType | true
    }

  export interface AnswerOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnswerOption'], meta: { name: 'AnswerOption' } }
    /**
     * Find zero or one AnswerOption that matches the filter.
     * @param {AnswerOptionFindUniqueArgs} args - Arguments to find a AnswerOption
     * @example
     * // Get one AnswerOption
     * const answerOption = await prisma.answerOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnswerOptionFindUniqueArgs>(args: SelectSubset<T, AnswerOptionFindUniqueArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnswerOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnswerOptionFindUniqueOrThrowArgs} args - Arguments to find a AnswerOption
     * @example
     * // Get one AnswerOption
     * const answerOption = await prisma.answerOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnswerOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, AnswerOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnswerOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerOptionFindFirstArgs} args - Arguments to find a AnswerOption
     * @example
     * // Get one AnswerOption
     * const answerOption = await prisma.answerOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnswerOptionFindFirstArgs>(args?: SelectSubset<T, AnswerOptionFindFirstArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnswerOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerOptionFindFirstOrThrowArgs} args - Arguments to find a AnswerOption
     * @example
     * // Get one AnswerOption
     * const answerOption = await prisma.answerOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnswerOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, AnswerOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnswerOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnswerOptions
     * const answerOptions = await prisma.answerOption.findMany()
     * 
     * // Get first 10 AnswerOptions
     * const answerOptions = await prisma.answerOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const answerOptionWithIdOnly = await prisma.answerOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnswerOptionFindManyArgs>(args?: SelectSubset<T, AnswerOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnswerOption.
     * @param {AnswerOptionCreateArgs} args - Arguments to create a AnswerOption.
     * @example
     * // Create one AnswerOption
     * const AnswerOption = await prisma.answerOption.create({
     *   data: {
     *     // ... data to create a AnswerOption
     *   }
     * })
     * 
     */
    create<T extends AnswerOptionCreateArgs>(args: SelectSubset<T, AnswerOptionCreateArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnswerOptions.
     * @param {AnswerOptionCreateManyArgs} args - Arguments to create many AnswerOptions.
     * @example
     * // Create many AnswerOptions
     * const answerOption = await prisma.answerOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnswerOptionCreateManyArgs>(args?: SelectSubset<T, AnswerOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AnswerOption.
     * @param {AnswerOptionDeleteArgs} args - Arguments to delete one AnswerOption.
     * @example
     * // Delete one AnswerOption
     * const AnswerOption = await prisma.answerOption.delete({
     *   where: {
     *     // ... filter to delete one AnswerOption
     *   }
     * })
     * 
     */
    delete<T extends AnswerOptionDeleteArgs>(args: SelectSubset<T, AnswerOptionDeleteArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnswerOption.
     * @param {AnswerOptionUpdateArgs} args - Arguments to update one AnswerOption.
     * @example
     * // Update one AnswerOption
     * const answerOption = await prisma.answerOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnswerOptionUpdateArgs>(args: SelectSubset<T, AnswerOptionUpdateArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnswerOptions.
     * @param {AnswerOptionDeleteManyArgs} args - Arguments to filter AnswerOptions to delete.
     * @example
     * // Delete a few AnswerOptions
     * const { count } = await prisma.answerOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnswerOptionDeleteManyArgs>(args?: SelectSubset<T, AnswerOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnswerOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnswerOptions
     * const answerOption = await prisma.answerOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnswerOptionUpdateManyArgs>(args: SelectSubset<T, AnswerOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnswerOption.
     * @param {AnswerOptionUpsertArgs} args - Arguments to update or create a AnswerOption.
     * @example
     * // Update or create a AnswerOption
     * const answerOption = await prisma.answerOption.upsert({
     *   create: {
     *     // ... data to create a AnswerOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnswerOption we want to update
     *   }
     * })
     */
    upsert<T extends AnswerOptionUpsertArgs>(args: SelectSubset<T, AnswerOptionUpsertArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnswerOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerOptionCountArgs} args - Arguments to filter AnswerOptions to count.
     * @example
     * // Count the number of AnswerOptions
     * const count = await prisma.answerOption.count({
     *   where: {
     *     // ... the filter for the AnswerOptions we want to count
     *   }
     * })
    **/
    count<T extends AnswerOptionCountArgs>(
      args?: Subset<T, AnswerOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswerOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnswerOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswerOptionAggregateArgs>(args: Subset<T, AnswerOptionAggregateArgs>): Prisma.PrismaPromise<GetAnswerOptionAggregateType<T>>

    /**
     * Group by AnswerOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnswerOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnswerOptionGroupByArgs['orderBy'] }
        : { orderBy?: AnswerOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnswerOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswerOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnswerOption model
   */
  readonly fields: AnswerOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnswerOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnswerOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userAnswers<T extends AnswerOption$userAnswersArgs<ExtArgs> = {}>(args?: Subset<T, AnswerOption$userAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnswerOption model
   */
  interface AnswerOptionFieldRefs {
    readonly id: FieldRef<"AnswerOption", 'String'>
    readonly text: FieldRef<"AnswerOption", 'String'>
    readonly is_correct: FieldRef<"AnswerOption", 'Boolean'>
    readonly order: FieldRef<"AnswerOption", 'Int'>
    readonly question_id: FieldRef<"AnswerOption", 'String'>
    readonly created_at: FieldRef<"AnswerOption", 'DateTime'>
    readonly updated_at: FieldRef<"AnswerOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnswerOption findUnique
   */
  export type AnswerOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerOption to fetch.
     */
    where: AnswerOptionWhereUniqueInput
  }

  /**
   * AnswerOption findUniqueOrThrow
   */
  export type AnswerOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerOption to fetch.
     */
    where: AnswerOptionWhereUniqueInput
  }

  /**
   * AnswerOption findFirst
   */
  export type AnswerOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerOption to fetch.
     */
    where?: AnswerOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerOptions to fetch.
     */
    orderBy?: AnswerOptionOrderByWithRelationInput | AnswerOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnswerOptions.
     */
    cursor?: AnswerOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnswerOptions.
     */
    distinct?: AnswerOptionScalarFieldEnum | AnswerOptionScalarFieldEnum[]
  }

  /**
   * AnswerOption findFirstOrThrow
   */
  export type AnswerOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerOption to fetch.
     */
    where?: AnswerOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerOptions to fetch.
     */
    orderBy?: AnswerOptionOrderByWithRelationInput | AnswerOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnswerOptions.
     */
    cursor?: AnswerOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnswerOptions.
     */
    distinct?: AnswerOptionScalarFieldEnum | AnswerOptionScalarFieldEnum[]
  }

  /**
   * AnswerOption findMany
   */
  export type AnswerOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerOptions to fetch.
     */
    where?: AnswerOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerOptions to fetch.
     */
    orderBy?: AnswerOptionOrderByWithRelationInput | AnswerOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnswerOptions.
     */
    cursor?: AnswerOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerOptions.
     */
    skip?: number
    distinct?: AnswerOptionScalarFieldEnum | AnswerOptionScalarFieldEnum[]
  }

  /**
   * AnswerOption create
   */
  export type AnswerOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a AnswerOption.
     */
    data: XOR<AnswerOptionCreateInput, AnswerOptionUncheckedCreateInput>
  }

  /**
   * AnswerOption createMany
   */
  export type AnswerOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnswerOptions.
     */
    data: AnswerOptionCreateManyInput | AnswerOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnswerOption update
   */
  export type AnswerOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a AnswerOption.
     */
    data: XOR<AnswerOptionUpdateInput, AnswerOptionUncheckedUpdateInput>
    /**
     * Choose, which AnswerOption to update.
     */
    where: AnswerOptionWhereUniqueInput
  }

  /**
   * AnswerOption updateMany
   */
  export type AnswerOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnswerOptions.
     */
    data: XOR<AnswerOptionUpdateManyMutationInput, AnswerOptionUncheckedUpdateManyInput>
    /**
     * Filter which AnswerOptions to update
     */
    where?: AnswerOptionWhereInput
    /**
     * Limit how many AnswerOptions to update.
     */
    limit?: number
  }

  /**
   * AnswerOption upsert
   */
  export type AnswerOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the AnswerOption to update in case it exists.
     */
    where: AnswerOptionWhereUniqueInput
    /**
     * In case the AnswerOption found by the `where` argument doesn't exist, create a new AnswerOption with this data.
     */
    create: XOR<AnswerOptionCreateInput, AnswerOptionUncheckedCreateInput>
    /**
     * In case the AnswerOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnswerOptionUpdateInput, AnswerOptionUncheckedUpdateInput>
  }

  /**
   * AnswerOption delete
   */
  export type AnswerOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    /**
     * Filter which AnswerOption to delete.
     */
    where: AnswerOptionWhereUniqueInput
  }

  /**
   * AnswerOption deleteMany
   */
  export type AnswerOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnswerOptions to delete
     */
    where?: AnswerOptionWhereInput
    /**
     * Limit how many AnswerOptions to delete.
     */
    limit?: number
  }

  /**
   * AnswerOption.userAnswers
   */
  export type AnswerOption$userAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * AnswerOption without action
   */
  export type AnswerOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
  }


  /**
   * Model UserQuestionnaireAttempt
   */

  export type AggregateUserQuestionnaireAttempt = {
    _count: UserQuestionnaireAttemptCountAggregateOutputType | null
    _avg: UserQuestionnaireAttemptAvgAggregateOutputType | null
    _sum: UserQuestionnaireAttemptSumAggregateOutputType | null
    _min: UserQuestionnaireAttemptMinAggregateOutputType | null
    _max: UserQuestionnaireAttemptMaxAggregateOutputType | null
  }

  export type UserQuestionnaireAttemptAvgAggregateOutputType = {
    score: number | null
    time_spent_seconds: number | null
    correct_answers_count: number | null
    total_questions_count: number | null
    attempt_number: number | null
  }

  export type UserQuestionnaireAttemptSumAggregateOutputType = {
    score: number | null
    time_spent_seconds: number | null
    correct_answers_count: number | null
    total_questions_count: number | null
    attempt_number: number | null
  }

  export type UserQuestionnaireAttemptMinAggregateOutputType = {
    id: string | null
    score: number | null
    status: $Enums.AttemptStatus | null
    started_at: Date | null
    completed_at: Date | null
    time_spent_seconds: number | null
    correct_answers_count: number | null
    total_questions_count: number | null
    attempt_number: number | null
    user_id: string | null
    questionnaire_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserQuestionnaireAttemptMaxAggregateOutputType = {
    id: string | null
    score: number | null
    status: $Enums.AttemptStatus | null
    started_at: Date | null
    completed_at: Date | null
    time_spent_seconds: number | null
    correct_answers_count: number | null
    total_questions_count: number | null
    attempt_number: number | null
    user_id: string | null
    questionnaire_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserQuestionnaireAttemptCountAggregateOutputType = {
    id: number
    score: number
    status: number
    started_at: number
    completed_at: number
    time_spent_seconds: number
    correct_answers_count: number
    total_questions_count: number
    attempt_number: number
    user_id: number
    questionnaire_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserQuestionnaireAttemptAvgAggregateInputType = {
    score?: true
    time_spent_seconds?: true
    correct_answers_count?: true
    total_questions_count?: true
    attempt_number?: true
  }

  export type UserQuestionnaireAttemptSumAggregateInputType = {
    score?: true
    time_spent_seconds?: true
    correct_answers_count?: true
    total_questions_count?: true
    attempt_number?: true
  }

  export type UserQuestionnaireAttemptMinAggregateInputType = {
    id?: true
    score?: true
    status?: true
    started_at?: true
    completed_at?: true
    time_spent_seconds?: true
    correct_answers_count?: true
    total_questions_count?: true
    attempt_number?: true
    user_id?: true
    questionnaire_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserQuestionnaireAttemptMaxAggregateInputType = {
    id?: true
    score?: true
    status?: true
    started_at?: true
    completed_at?: true
    time_spent_seconds?: true
    correct_answers_count?: true
    total_questions_count?: true
    attempt_number?: true
    user_id?: true
    questionnaire_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserQuestionnaireAttemptCountAggregateInputType = {
    id?: true
    score?: true
    status?: true
    started_at?: true
    completed_at?: true
    time_spent_seconds?: true
    correct_answers_count?: true
    total_questions_count?: true
    attempt_number?: true
    user_id?: true
    questionnaire_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserQuestionnaireAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionnaireAttempt to aggregate.
     */
    where?: UserQuestionnaireAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionnaireAttempts to fetch.
     */
    orderBy?: UserQuestionnaireAttemptOrderByWithRelationInput | UserQuestionnaireAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserQuestionnaireAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionnaireAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionnaireAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserQuestionnaireAttempts
    **/
    _count?: true | UserQuestionnaireAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserQuestionnaireAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserQuestionnaireAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserQuestionnaireAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserQuestionnaireAttemptMaxAggregateInputType
  }

  export type GetUserQuestionnaireAttemptAggregateType<T extends UserQuestionnaireAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateUserQuestionnaireAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserQuestionnaireAttempt[P]>
      : GetScalarType<T[P], AggregateUserQuestionnaireAttempt[P]>
  }




  export type UserQuestionnaireAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionnaireAttemptWhereInput
    orderBy?: UserQuestionnaireAttemptOrderByWithAggregationInput | UserQuestionnaireAttemptOrderByWithAggregationInput[]
    by: UserQuestionnaireAttemptScalarFieldEnum[] | UserQuestionnaireAttemptScalarFieldEnum
    having?: UserQuestionnaireAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserQuestionnaireAttemptCountAggregateInputType | true
    _avg?: UserQuestionnaireAttemptAvgAggregateInputType
    _sum?: UserQuestionnaireAttemptSumAggregateInputType
    _min?: UserQuestionnaireAttemptMinAggregateInputType
    _max?: UserQuestionnaireAttemptMaxAggregateInputType
  }

  export type UserQuestionnaireAttemptGroupByOutputType = {
    id: string
    score: number | null
    status: $Enums.AttemptStatus
    started_at: Date
    completed_at: Date | null
    time_spent_seconds: number | null
    correct_answers_count: number | null
    total_questions_count: number | null
    attempt_number: number
    user_id: string
    questionnaire_id: string
    created_at: Date
    updated_at: Date
    _count: UserQuestionnaireAttemptCountAggregateOutputType | null
    _avg: UserQuestionnaireAttemptAvgAggregateOutputType | null
    _sum: UserQuestionnaireAttemptSumAggregateOutputType | null
    _min: UserQuestionnaireAttemptMinAggregateOutputType | null
    _max: UserQuestionnaireAttemptMaxAggregateOutputType | null
  }

  type GetUserQuestionnaireAttemptGroupByPayload<T extends UserQuestionnaireAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserQuestionnaireAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserQuestionnaireAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserQuestionnaireAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], UserQuestionnaireAttemptGroupByOutputType[P]>
        }
      >
    >


  export type UserQuestionnaireAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    status?: boolean
    started_at?: boolean
    completed_at?: boolean
    time_spent_seconds?: boolean
    correct_answers_count?: boolean
    total_questions_count?: boolean
    attempt_number?: boolean
    user_id?: boolean
    questionnaire_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionnaire?: boolean | QuestionnaireDefaultArgs<ExtArgs>
    answers?: boolean | UserQuestionnaireAttempt$answersArgs<ExtArgs>
    _count?: boolean | UserQuestionnaireAttemptCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuestionnaireAttempt"]>



  export type UserQuestionnaireAttemptSelectScalar = {
    id?: boolean
    score?: boolean
    status?: boolean
    started_at?: boolean
    completed_at?: boolean
    time_spent_seconds?: boolean
    correct_answers_count?: boolean
    total_questions_count?: boolean
    attempt_number?: boolean
    user_id?: boolean
    questionnaire_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserQuestionnaireAttemptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "score" | "status" | "started_at" | "completed_at" | "time_spent_seconds" | "correct_answers_count" | "total_questions_count" | "attempt_number" | "user_id" | "questionnaire_id" | "created_at" | "updated_at", ExtArgs["result"]["userQuestionnaireAttempt"]>
  export type UserQuestionnaireAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionnaire?: boolean | QuestionnaireDefaultArgs<ExtArgs>
    answers?: boolean | UserQuestionnaireAttempt$answersArgs<ExtArgs>
    _count?: boolean | UserQuestionnaireAttemptCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserQuestionnaireAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserQuestionnaireAttempt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      questionnaire: Prisma.$QuestionnairePayload<ExtArgs>
      answers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      score: number | null
      status: $Enums.AttemptStatus
      started_at: Date
      completed_at: Date | null
      time_spent_seconds: number | null
      correct_answers_count: number | null
      total_questions_count: number | null
      attempt_number: number
      user_id: string
      questionnaire_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["userQuestionnaireAttempt"]>
    composites: {}
  }

  type UserQuestionnaireAttemptGetPayload<S extends boolean | null | undefined | UserQuestionnaireAttemptDefaultArgs> = $Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload, S>

  type UserQuestionnaireAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserQuestionnaireAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserQuestionnaireAttemptCountAggregateInputType | true
    }

  export interface UserQuestionnaireAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserQuestionnaireAttempt'], meta: { name: 'UserQuestionnaireAttempt' } }
    /**
     * Find zero or one UserQuestionnaireAttempt that matches the filter.
     * @param {UserQuestionnaireAttemptFindUniqueArgs} args - Arguments to find a UserQuestionnaireAttempt
     * @example
     * // Get one UserQuestionnaireAttempt
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserQuestionnaireAttemptFindUniqueArgs>(args: SelectSubset<T, UserQuestionnaireAttemptFindUniqueArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserQuestionnaireAttempt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserQuestionnaireAttemptFindUniqueOrThrowArgs} args - Arguments to find a UserQuestionnaireAttempt
     * @example
     * // Get one UserQuestionnaireAttempt
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserQuestionnaireAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, UserQuestionnaireAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuestionnaireAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionnaireAttemptFindFirstArgs} args - Arguments to find a UserQuestionnaireAttempt
     * @example
     * // Get one UserQuestionnaireAttempt
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserQuestionnaireAttemptFindFirstArgs>(args?: SelectSubset<T, UserQuestionnaireAttemptFindFirstArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuestionnaireAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionnaireAttemptFindFirstOrThrowArgs} args - Arguments to find a UserQuestionnaireAttempt
     * @example
     * // Get one UserQuestionnaireAttempt
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserQuestionnaireAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, UserQuestionnaireAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserQuestionnaireAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionnaireAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserQuestionnaireAttempts
     * const userQuestionnaireAttempts = await prisma.userQuestionnaireAttempt.findMany()
     * 
     * // Get first 10 UserQuestionnaireAttempts
     * const userQuestionnaireAttempts = await prisma.userQuestionnaireAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userQuestionnaireAttemptWithIdOnly = await prisma.userQuestionnaireAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserQuestionnaireAttemptFindManyArgs>(args?: SelectSubset<T, UserQuestionnaireAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserQuestionnaireAttempt.
     * @param {UserQuestionnaireAttemptCreateArgs} args - Arguments to create a UserQuestionnaireAttempt.
     * @example
     * // Create one UserQuestionnaireAttempt
     * const UserQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.create({
     *   data: {
     *     // ... data to create a UserQuestionnaireAttempt
     *   }
     * })
     * 
     */
    create<T extends UserQuestionnaireAttemptCreateArgs>(args: SelectSubset<T, UserQuestionnaireAttemptCreateArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserQuestionnaireAttempts.
     * @param {UserQuestionnaireAttemptCreateManyArgs} args - Arguments to create many UserQuestionnaireAttempts.
     * @example
     * // Create many UserQuestionnaireAttempts
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserQuestionnaireAttemptCreateManyArgs>(args?: SelectSubset<T, UserQuestionnaireAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserQuestionnaireAttempt.
     * @param {UserQuestionnaireAttemptDeleteArgs} args - Arguments to delete one UserQuestionnaireAttempt.
     * @example
     * // Delete one UserQuestionnaireAttempt
     * const UserQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.delete({
     *   where: {
     *     // ... filter to delete one UserQuestionnaireAttempt
     *   }
     * })
     * 
     */
    delete<T extends UserQuestionnaireAttemptDeleteArgs>(args: SelectSubset<T, UserQuestionnaireAttemptDeleteArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserQuestionnaireAttempt.
     * @param {UserQuestionnaireAttemptUpdateArgs} args - Arguments to update one UserQuestionnaireAttempt.
     * @example
     * // Update one UserQuestionnaireAttempt
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserQuestionnaireAttemptUpdateArgs>(args: SelectSubset<T, UserQuestionnaireAttemptUpdateArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserQuestionnaireAttempts.
     * @param {UserQuestionnaireAttemptDeleteManyArgs} args - Arguments to filter UserQuestionnaireAttempts to delete.
     * @example
     * // Delete a few UserQuestionnaireAttempts
     * const { count } = await prisma.userQuestionnaireAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserQuestionnaireAttemptDeleteManyArgs>(args?: SelectSubset<T, UserQuestionnaireAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuestionnaireAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionnaireAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserQuestionnaireAttempts
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserQuestionnaireAttemptUpdateManyArgs>(args: SelectSubset<T, UserQuestionnaireAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserQuestionnaireAttempt.
     * @param {UserQuestionnaireAttemptUpsertArgs} args - Arguments to update or create a UserQuestionnaireAttempt.
     * @example
     * // Update or create a UserQuestionnaireAttempt
     * const userQuestionnaireAttempt = await prisma.userQuestionnaireAttempt.upsert({
     *   create: {
     *     // ... data to create a UserQuestionnaireAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserQuestionnaireAttempt we want to update
     *   }
     * })
     */
    upsert<T extends UserQuestionnaireAttemptUpsertArgs>(args: SelectSubset<T, UserQuestionnaireAttemptUpsertArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserQuestionnaireAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionnaireAttemptCountArgs} args - Arguments to filter UserQuestionnaireAttempts to count.
     * @example
     * // Count the number of UserQuestionnaireAttempts
     * const count = await prisma.userQuestionnaireAttempt.count({
     *   where: {
     *     // ... the filter for the UserQuestionnaireAttempts we want to count
     *   }
     * })
    **/
    count<T extends UserQuestionnaireAttemptCountArgs>(
      args?: Subset<T, UserQuestionnaireAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserQuestionnaireAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserQuestionnaireAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionnaireAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserQuestionnaireAttemptAggregateArgs>(args: Subset<T, UserQuestionnaireAttemptAggregateArgs>): Prisma.PrismaPromise<GetUserQuestionnaireAttemptAggregateType<T>>

    /**
     * Group by UserQuestionnaireAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionnaireAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserQuestionnaireAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserQuestionnaireAttemptGroupByArgs['orderBy'] }
        : { orderBy?: UserQuestionnaireAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserQuestionnaireAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserQuestionnaireAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserQuestionnaireAttempt model
   */
  readonly fields: UserQuestionnaireAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserQuestionnaireAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserQuestionnaireAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionnaire<T extends QuestionnaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionnaireDefaultArgs<ExtArgs>>): Prisma__QuestionnaireClient<$Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    answers<T extends UserQuestionnaireAttempt$answersArgs<ExtArgs> = {}>(args?: Subset<T, UserQuestionnaireAttempt$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserQuestionnaireAttempt model
   */
  interface UserQuestionnaireAttemptFieldRefs {
    readonly id: FieldRef<"UserQuestionnaireAttempt", 'String'>
    readonly score: FieldRef<"UserQuestionnaireAttempt", 'Float'>
    readonly status: FieldRef<"UserQuestionnaireAttempt", 'AttemptStatus'>
    readonly started_at: FieldRef<"UserQuestionnaireAttempt", 'DateTime'>
    readonly completed_at: FieldRef<"UserQuestionnaireAttempt", 'DateTime'>
    readonly time_spent_seconds: FieldRef<"UserQuestionnaireAttempt", 'Int'>
    readonly correct_answers_count: FieldRef<"UserQuestionnaireAttempt", 'Int'>
    readonly total_questions_count: FieldRef<"UserQuestionnaireAttempt", 'Int'>
    readonly attempt_number: FieldRef<"UserQuestionnaireAttempt", 'Int'>
    readonly user_id: FieldRef<"UserQuestionnaireAttempt", 'String'>
    readonly questionnaire_id: FieldRef<"UserQuestionnaireAttempt", 'String'>
    readonly created_at: FieldRef<"UserQuestionnaireAttempt", 'DateTime'>
    readonly updated_at: FieldRef<"UserQuestionnaireAttempt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserQuestionnaireAttempt findUnique
   */
  export type UserQuestionnaireAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionnaireAttempt to fetch.
     */
    where: UserQuestionnaireAttemptWhereUniqueInput
  }

  /**
   * UserQuestionnaireAttempt findUniqueOrThrow
   */
  export type UserQuestionnaireAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionnaireAttempt to fetch.
     */
    where: UserQuestionnaireAttemptWhereUniqueInput
  }

  /**
   * UserQuestionnaireAttempt findFirst
   */
  export type UserQuestionnaireAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionnaireAttempt to fetch.
     */
    where?: UserQuestionnaireAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionnaireAttempts to fetch.
     */
    orderBy?: UserQuestionnaireAttemptOrderByWithRelationInput | UserQuestionnaireAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionnaireAttempts.
     */
    cursor?: UserQuestionnaireAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionnaireAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionnaireAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionnaireAttempts.
     */
    distinct?: UserQuestionnaireAttemptScalarFieldEnum | UserQuestionnaireAttemptScalarFieldEnum[]
  }

  /**
   * UserQuestionnaireAttempt findFirstOrThrow
   */
  export type UserQuestionnaireAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionnaireAttempt to fetch.
     */
    where?: UserQuestionnaireAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionnaireAttempts to fetch.
     */
    orderBy?: UserQuestionnaireAttemptOrderByWithRelationInput | UserQuestionnaireAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionnaireAttempts.
     */
    cursor?: UserQuestionnaireAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionnaireAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionnaireAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionnaireAttempts.
     */
    distinct?: UserQuestionnaireAttemptScalarFieldEnum | UserQuestionnaireAttemptScalarFieldEnum[]
  }

  /**
   * UserQuestionnaireAttempt findMany
   */
  export type UserQuestionnaireAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionnaireAttempts to fetch.
     */
    where?: UserQuestionnaireAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionnaireAttempts to fetch.
     */
    orderBy?: UserQuestionnaireAttemptOrderByWithRelationInput | UserQuestionnaireAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserQuestionnaireAttempts.
     */
    cursor?: UserQuestionnaireAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionnaireAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionnaireAttempts.
     */
    skip?: number
    distinct?: UserQuestionnaireAttemptScalarFieldEnum | UserQuestionnaireAttemptScalarFieldEnum[]
  }

  /**
   * UserQuestionnaireAttempt create
   */
  export type UserQuestionnaireAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a UserQuestionnaireAttempt.
     */
    data: XOR<UserQuestionnaireAttemptCreateInput, UserQuestionnaireAttemptUncheckedCreateInput>
  }

  /**
   * UserQuestionnaireAttempt createMany
   */
  export type UserQuestionnaireAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserQuestionnaireAttempts.
     */
    data: UserQuestionnaireAttemptCreateManyInput | UserQuestionnaireAttemptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserQuestionnaireAttempt update
   */
  export type UserQuestionnaireAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a UserQuestionnaireAttempt.
     */
    data: XOR<UserQuestionnaireAttemptUpdateInput, UserQuestionnaireAttemptUncheckedUpdateInput>
    /**
     * Choose, which UserQuestionnaireAttempt to update.
     */
    where: UserQuestionnaireAttemptWhereUniqueInput
  }

  /**
   * UserQuestionnaireAttempt updateMany
   */
  export type UserQuestionnaireAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserQuestionnaireAttempts.
     */
    data: XOR<UserQuestionnaireAttemptUpdateManyMutationInput, UserQuestionnaireAttemptUncheckedUpdateManyInput>
    /**
     * Filter which UserQuestionnaireAttempts to update
     */
    where?: UserQuestionnaireAttemptWhereInput
    /**
     * Limit how many UserQuestionnaireAttempts to update.
     */
    limit?: number
  }

  /**
   * UserQuestionnaireAttempt upsert
   */
  export type UserQuestionnaireAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the UserQuestionnaireAttempt to update in case it exists.
     */
    where: UserQuestionnaireAttemptWhereUniqueInput
    /**
     * In case the UserQuestionnaireAttempt found by the `where` argument doesn't exist, create a new UserQuestionnaireAttempt with this data.
     */
    create: XOR<UserQuestionnaireAttemptCreateInput, UserQuestionnaireAttemptUncheckedCreateInput>
    /**
     * In case the UserQuestionnaireAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserQuestionnaireAttemptUpdateInput, UserQuestionnaireAttemptUncheckedUpdateInput>
  }

  /**
   * UserQuestionnaireAttempt delete
   */
  export type UserQuestionnaireAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
    /**
     * Filter which UserQuestionnaireAttempt to delete.
     */
    where: UserQuestionnaireAttemptWhereUniqueInput
  }

  /**
   * UserQuestionnaireAttempt deleteMany
   */
  export type UserQuestionnaireAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionnaireAttempts to delete
     */
    where?: UserQuestionnaireAttemptWhereInput
    /**
     * Limit how many UserQuestionnaireAttempts to delete.
     */
    limit?: number
  }

  /**
   * UserQuestionnaireAttempt.answers
   */
  export type UserQuestionnaireAttempt$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionnaireAttempt without action
   */
  export type UserQuestionnaireAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionnaireAttempt
     */
    select?: UserQuestionnaireAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionnaireAttempt
     */
    omit?: UserQuestionnaireAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionnaireAttemptInclude<ExtArgs> | null
  }


  /**
   * Model UserQuestionAnswer
   */

  export type AggregateUserQuestionAnswer = {
    _count: UserQuestionAnswerCountAggregateOutputType | null
    _avg: UserQuestionAnswerAvgAggregateOutputType | null
    _sum: UserQuestionAnswerSumAggregateOutputType | null
    _min: UserQuestionAnswerMinAggregateOutputType | null
    _max: UserQuestionAnswerMaxAggregateOutputType | null
  }

  export type UserQuestionAnswerAvgAggregateOutputType = {
    time_to_answer_seconds: number | null
    points_earned: number | null
  }

  export type UserQuestionAnswerSumAggregateOutputType = {
    time_to_answer_seconds: number | null
    points_earned: number | null
  }

  export type UserQuestionAnswerMinAggregateOutputType = {
    id: string | null
    is_correct: boolean | null
    answered_at: Date | null
    time_to_answer_seconds: number | null
    points_earned: number | null
    user_id: string | null
    question_id: string | null
    selected_answer_option_id: string | null
    answered_text: string | null
    user_questionnaire_attempt_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserQuestionAnswerMaxAggregateOutputType = {
    id: string | null
    is_correct: boolean | null
    answered_at: Date | null
    time_to_answer_seconds: number | null
    points_earned: number | null
    user_id: string | null
    question_id: string | null
    selected_answer_option_id: string | null
    answered_text: string | null
    user_questionnaire_attempt_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserQuestionAnswerCountAggregateOutputType = {
    id: number
    is_correct: number
    answered_at: number
    time_to_answer_seconds: number
    points_earned: number
    user_id: number
    question_id: number
    selected_answer_option_id: number
    answered_text: number
    user_questionnaire_attempt_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserQuestionAnswerAvgAggregateInputType = {
    time_to_answer_seconds?: true
    points_earned?: true
  }

  export type UserQuestionAnswerSumAggregateInputType = {
    time_to_answer_seconds?: true
    points_earned?: true
  }

  export type UserQuestionAnswerMinAggregateInputType = {
    id?: true
    is_correct?: true
    answered_at?: true
    time_to_answer_seconds?: true
    points_earned?: true
    user_id?: true
    question_id?: true
    selected_answer_option_id?: true
    answered_text?: true
    user_questionnaire_attempt_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserQuestionAnswerMaxAggregateInputType = {
    id?: true
    is_correct?: true
    answered_at?: true
    time_to_answer_seconds?: true
    points_earned?: true
    user_id?: true
    question_id?: true
    selected_answer_option_id?: true
    answered_text?: true
    user_questionnaire_attempt_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserQuestionAnswerCountAggregateInputType = {
    id?: true
    is_correct?: true
    answered_at?: true
    time_to_answer_seconds?: true
    points_earned?: true
    user_id?: true
    question_id?: true
    selected_answer_option_id?: true
    answered_text?: true
    user_questionnaire_attempt_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserQuestionAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionAnswer to aggregate.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserQuestionAnswers
    **/
    _count?: true | UserQuestionAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserQuestionAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserQuestionAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserQuestionAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserQuestionAnswerMaxAggregateInputType
  }

  export type GetUserQuestionAnswerAggregateType<T extends UserQuestionAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateUserQuestionAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserQuestionAnswer[P]>
      : GetScalarType<T[P], AggregateUserQuestionAnswer[P]>
  }




  export type UserQuestionAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithAggregationInput | UserQuestionAnswerOrderByWithAggregationInput[]
    by: UserQuestionAnswerScalarFieldEnum[] | UserQuestionAnswerScalarFieldEnum
    having?: UserQuestionAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserQuestionAnswerCountAggregateInputType | true
    _avg?: UserQuestionAnswerAvgAggregateInputType
    _sum?: UserQuestionAnswerSumAggregateInputType
    _min?: UserQuestionAnswerMinAggregateInputType
    _max?: UserQuestionAnswerMaxAggregateInputType
  }

  export type UserQuestionAnswerGroupByOutputType = {
    id: string
    is_correct: boolean | null
    answered_at: Date
    time_to_answer_seconds: number | null
    points_earned: number | null
    user_id: string
    question_id: string
    selected_answer_option_id: string | null
    answered_text: string | null
    user_questionnaire_attempt_id: string
    created_at: Date
    updated_at: Date
    _count: UserQuestionAnswerCountAggregateOutputType | null
    _avg: UserQuestionAnswerAvgAggregateOutputType | null
    _sum: UserQuestionAnswerSumAggregateOutputType | null
    _min: UserQuestionAnswerMinAggregateOutputType | null
    _max: UserQuestionAnswerMaxAggregateOutputType | null
  }

  type GetUserQuestionAnswerGroupByPayload<T extends UserQuestionAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserQuestionAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserQuestionAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserQuestionAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], UserQuestionAnswerGroupByOutputType[P]>
        }
      >
    >


  export type UserQuestionAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    is_correct?: boolean
    answered_at?: boolean
    time_to_answer_seconds?: boolean
    points_earned?: boolean
    user_id?: boolean
    question_id?: boolean
    selected_answer_option_id?: boolean
    answered_text?: boolean
    user_questionnaire_attempt_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedAnswerOption?: boolean | UserQuestionAnswer$selectedAnswerOptionArgs<ExtArgs>
    userQuestionnaireAttempt?: boolean | UserQuestionnaireAttemptDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuestionAnswer"]>



  export type UserQuestionAnswerSelectScalar = {
    id?: boolean
    is_correct?: boolean
    answered_at?: boolean
    time_to_answer_seconds?: boolean
    points_earned?: boolean
    user_id?: boolean
    question_id?: boolean
    selected_answer_option_id?: boolean
    answered_text?: boolean
    user_questionnaire_attempt_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserQuestionAnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "is_correct" | "answered_at" | "time_to_answer_seconds" | "points_earned" | "user_id" | "question_id" | "selected_answer_option_id" | "answered_text" | "user_questionnaire_attempt_id" | "created_at" | "updated_at", ExtArgs["result"]["userQuestionAnswer"]>
  export type UserQuestionAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    selectedAnswerOption?: boolean | UserQuestionAnswer$selectedAnswerOptionArgs<ExtArgs>
    userQuestionnaireAttempt?: boolean | UserQuestionnaireAttemptDefaultArgs<ExtArgs>
  }

  export type $UserQuestionAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserQuestionAnswer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
      selectedAnswerOption: Prisma.$AnswerOptionPayload<ExtArgs> | null
      userQuestionnaireAttempt: Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      is_correct: boolean | null
      answered_at: Date
      time_to_answer_seconds: number | null
      points_earned: number | null
      user_id: string
      question_id: string
      selected_answer_option_id: string | null
      answered_text: string | null
      user_questionnaire_attempt_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["userQuestionAnswer"]>
    composites: {}
  }

  type UserQuestionAnswerGetPayload<S extends boolean | null | undefined | UserQuestionAnswerDefaultArgs> = $Result.GetResult<Prisma.$UserQuestionAnswerPayload, S>

  type UserQuestionAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserQuestionAnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserQuestionAnswerCountAggregateInputType | true
    }

  export interface UserQuestionAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserQuestionAnswer'], meta: { name: 'UserQuestionAnswer' } }
    /**
     * Find zero or one UserQuestionAnswer that matches the filter.
     * @param {UserQuestionAnswerFindUniqueArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserQuestionAnswerFindUniqueArgs>(args: SelectSubset<T, UserQuestionAnswerFindUniqueArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserQuestionAnswer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserQuestionAnswerFindUniqueOrThrowArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserQuestionAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuestionAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindFirstArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserQuestionAnswerFindFirstArgs>(args?: SelectSubset<T, UserQuestionAnswerFindFirstArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuestionAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindFirstOrThrowArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserQuestionAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserQuestionAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserQuestionAnswers
     * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany()
     * 
     * // Get first 10 UserQuestionAnswers
     * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userQuestionAnswerWithIdOnly = await prisma.userQuestionAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserQuestionAnswerFindManyArgs>(args?: SelectSubset<T, UserQuestionAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserQuestionAnswer.
     * @param {UserQuestionAnswerCreateArgs} args - Arguments to create a UserQuestionAnswer.
     * @example
     * // Create one UserQuestionAnswer
     * const UserQuestionAnswer = await prisma.userQuestionAnswer.create({
     *   data: {
     *     // ... data to create a UserQuestionAnswer
     *   }
     * })
     * 
     */
    create<T extends UserQuestionAnswerCreateArgs>(args: SelectSubset<T, UserQuestionAnswerCreateArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserQuestionAnswers.
     * @param {UserQuestionAnswerCreateManyArgs} args - Arguments to create many UserQuestionAnswers.
     * @example
     * // Create many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserQuestionAnswerCreateManyArgs>(args?: SelectSubset<T, UserQuestionAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserQuestionAnswer.
     * @param {UserQuestionAnswerDeleteArgs} args - Arguments to delete one UserQuestionAnswer.
     * @example
     * // Delete one UserQuestionAnswer
     * const UserQuestionAnswer = await prisma.userQuestionAnswer.delete({
     *   where: {
     *     // ... filter to delete one UserQuestionAnswer
     *   }
     * })
     * 
     */
    delete<T extends UserQuestionAnswerDeleteArgs>(args: SelectSubset<T, UserQuestionAnswerDeleteArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserQuestionAnswer.
     * @param {UserQuestionAnswerUpdateArgs} args - Arguments to update one UserQuestionAnswer.
     * @example
     * // Update one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserQuestionAnswerUpdateArgs>(args: SelectSubset<T, UserQuestionAnswerUpdateArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserQuestionAnswers.
     * @param {UserQuestionAnswerDeleteManyArgs} args - Arguments to filter UserQuestionAnswers to delete.
     * @example
     * // Delete a few UserQuestionAnswers
     * const { count } = await prisma.userQuestionAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserQuestionAnswerDeleteManyArgs>(args?: SelectSubset<T, UserQuestionAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserQuestionAnswerUpdateManyArgs>(args: SelectSubset<T, UserQuestionAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserQuestionAnswer.
     * @param {UserQuestionAnswerUpsertArgs} args - Arguments to update or create a UserQuestionAnswer.
     * @example
     * // Update or create a UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.upsert({
     *   create: {
     *     // ... data to create a UserQuestionAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserQuestionAnswer we want to update
     *   }
     * })
     */
    upsert<T extends UserQuestionAnswerUpsertArgs>(args: SelectSubset<T, UserQuestionAnswerUpsertArgs<ExtArgs>>): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerCountArgs} args - Arguments to filter UserQuestionAnswers to count.
     * @example
     * // Count the number of UserQuestionAnswers
     * const count = await prisma.userQuestionAnswer.count({
     *   where: {
     *     // ... the filter for the UserQuestionAnswers we want to count
     *   }
     * })
    **/
    count<T extends UserQuestionAnswerCountArgs>(
      args?: Subset<T, UserQuestionAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserQuestionAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserQuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserQuestionAnswerAggregateArgs>(args: Subset<T, UserQuestionAnswerAggregateArgs>): Prisma.PrismaPromise<GetUserQuestionAnswerAggregateType<T>>

    /**
     * Group by UserQuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserQuestionAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserQuestionAnswerGroupByArgs['orderBy'] }
        : { orderBy?: UserQuestionAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserQuestionAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserQuestionAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserQuestionAnswer model
   */
  readonly fields: UserQuestionAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserQuestionAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserQuestionAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    selectedAnswerOption<T extends UserQuestionAnswer$selectedAnswerOptionArgs<ExtArgs> = {}>(args?: Subset<T, UserQuestionAnswer$selectedAnswerOptionArgs<ExtArgs>>): Prisma__AnswerOptionClient<$Result.GetResult<Prisma.$AnswerOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userQuestionnaireAttempt<T extends UserQuestionnaireAttemptDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserQuestionnaireAttemptDefaultArgs<ExtArgs>>): Prisma__UserQuestionnaireAttemptClient<$Result.GetResult<Prisma.$UserQuestionnaireAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserQuestionAnswer model
   */
  interface UserQuestionAnswerFieldRefs {
    readonly id: FieldRef<"UserQuestionAnswer", 'String'>
    readonly is_correct: FieldRef<"UserQuestionAnswer", 'Boolean'>
    readonly answered_at: FieldRef<"UserQuestionAnswer", 'DateTime'>
    readonly time_to_answer_seconds: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly points_earned: FieldRef<"UserQuestionAnswer", 'Float'>
    readonly user_id: FieldRef<"UserQuestionAnswer", 'String'>
    readonly question_id: FieldRef<"UserQuestionAnswer", 'String'>
    readonly selected_answer_option_id: FieldRef<"UserQuestionAnswer", 'String'>
    readonly answered_text: FieldRef<"UserQuestionAnswer", 'String'>
    readonly user_questionnaire_attempt_id: FieldRef<"UserQuestionAnswer", 'String'>
    readonly created_at: FieldRef<"UserQuestionAnswer", 'DateTime'>
    readonly updated_at: FieldRef<"UserQuestionAnswer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserQuestionAnswer findUnique
   */
  export type UserQuestionAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer findUniqueOrThrow
   */
  export type UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer findFirst
   */
  export type UserQuestionAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionAnswers.
     */
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer findFirstOrThrow
   */
  export type UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionAnswers.
     */
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer findMany
   */
  export type UserQuestionAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswers to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer create
   */
  export type UserQuestionAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a UserQuestionAnswer.
     */
    data: XOR<UserQuestionAnswerCreateInput, UserQuestionAnswerUncheckedCreateInput>
  }

  /**
   * UserQuestionAnswer createMany
   */
  export type UserQuestionAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserQuestionAnswers.
     */
    data: UserQuestionAnswerCreateManyInput | UserQuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserQuestionAnswer update
   */
  export type UserQuestionAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a UserQuestionAnswer.
     */
    data: XOR<UserQuestionAnswerUpdateInput, UserQuestionAnswerUncheckedUpdateInput>
    /**
     * Choose, which UserQuestionAnswer to update.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer updateMany
   */
  export type UserQuestionAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserQuestionAnswers.
     */
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyInput>
    /**
     * Filter which UserQuestionAnswers to update
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * Limit how many UserQuestionAnswers to update.
     */
    limit?: number
  }

  /**
   * UserQuestionAnswer upsert
   */
  export type UserQuestionAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the UserQuestionAnswer to update in case it exists.
     */
    where: UserQuestionAnswerWhereUniqueInput
    /**
     * In case the UserQuestionAnswer found by the `where` argument doesn't exist, create a new UserQuestionAnswer with this data.
     */
    create: XOR<UserQuestionAnswerCreateInput, UserQuestionAnswerUncheckedCreateInput>
    /**
     * In case the UserQuestionAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserQuestionAnswerUpdateInput, UserQuestionAnswerUncheckedUpdateInput>
  }

  /**
   * UserQuestionAnswer delete
   */
  export type UserQuestionAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter which UserQuestionAnswer to delete.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer deleteMany
   */
  export type UserQuestionAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionAnswers to delete
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * Limit how many UserQuestionAnswers to delete.
     */
    limit?: number
  }

  /**
   * UserQuestionAnswer.selectedAnswerOption
   */
  export type UserQuestionAnswer$selectedAnswerOptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerOption
     */
    select?: AnswerOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerOption
     */
    omit?: AnswerOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerOptionInclude<ExtArgs> | null
    where?: AnswerOptionWhereInput
  }

  /**
   * UserQuestionAnswer without action
   */
  export type UserQuestionAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuestionAnswer
     */
    omit?: UserQuestionAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
  }


  /**
   * Model UserTestSelection
   */

  export type AggregateUserTestSelection = {
    _count: UserTestSelectionCountAggregateOutputType | null
    _min: UserTestSelectionMinAggregateOutputType | null
    _max: UserTestSelectionMaxAggregateOutputType | null
  }

  export type UserTestSelectionMinAggregateOutputType = {
    id: string | null
    is_active: boolean | null
    selected_at: Date | null
    user_id: string | null
    test_type_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserTestSelectionMaxAggregateOutputType = {
    id: string | null
    is_active: boolean | null
    selected_at: Date | null
    user_id: string | null
    test_type_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserTestSelectionCountAggregateOutputType = {
    id: number
    is_active: number
    selected_at: number
    user_id: number
    test_type_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserTestSelectionMinAggregateInputType = {
    id?: true
    is_active?: true
    selected_at?: true
    user_id?: true
    test_type_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserTestSelectionMaxAggregateInputType = {
    id?: true
    is_active?: true
    selected_at?: true
    user_id?: true
    test_type_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserTestSelectionCountAggregateInputType = {
    id?: true
    is_active?: true
    selected_at?: true
    user_id?: true
    test_type_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserTestSelectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTestSelection to aggregate.
     */
    where?: UserTestSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTestSelections to fetch.
     */
    orderBy?: UserTestSelectionOrderByWithRelationInput | UserTestSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTestSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTestSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTestSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTestSelections
    **/
    _count?: true | UserTestSelectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTestSelectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTestSelectionMaxAggregateInputType
  }

  export type GetUserTestSelectionAggregateType<T extends UserTestSelectionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTestSelection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTestSelection[P]>
      : GetScalarType<T[P], AggregateUserTestSelection[P]>
  }




  export type UserTestSelectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTestSelectionWhereInput
    orderBy?: UserTestSelectionOrderByWithAggregationInput | UserTestSelectionOrderByWithAggregationInput[]
    by: UserTestSelectionScalarFieldEnum[] | UserTestSelectionScalarFieldEnum
    having?: UserTestSelectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTestSelectionCountAggregateInputType | true
    _min?: UserTestSelectionMinAggregateInputType
    _max?: UserTestSelectionMaxAggregateInputType
  }

  export type UserTestSelectionGroupByOutputType = {
    id: string
    is_active: boolean
    selected_at: Date
    user_id: string
    test_type_id: string
    created_at: Date
    updated_at: Date
    _count: UserTestSelectionCountAggregateOutputType | null
    _min: UserTestSelectionMinAggregateOutputType | null
    _max: UserTestSelectionMaxAggregateOutputType | null
  }

  type GetUserTestSelectionGroupByPayload<T extends UserTestSelectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTestSelectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTestSelectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTestSelectionGroupByOutputType[P]>
            : GetScalarType<T[P], UserTestSelectionGroupByOutputType[P]>
        }
      >
    >


  export type UserTestSelectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    is_active?: boolean
    selected_at?: boolean
    user_id?: boolean
    test_type_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTestSelection"]>



  export type UserTestSelectionSelectScalar = {
    id?: boolean
    is_active?: boolean
    selected_at?: boolean
    user_id?: boolean
    test_type_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserTestSelectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "is_active" | "selected_at" | "user_id" | "test_type_id" | "created_at" | "updated_at", ExtArgs["result"]["userTestSelection"]>
  export type UserTestSelectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
  }

  export type $UserTestSelectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserTestSelection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      testType: Prisma.$TestTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      is_active: boolean
      selected_at: Date
      user_id: string
      test_type_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["userTestSelection"]>
    composites: {}
  }

  type UserTestSelectionGetPayload<S extends boolean | null | undefined | UserTestSelectionDefaultArgs> = $Result.GetResult<Prisma.$UserTestSelectionPayload, S>

  type UserTestSelectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserTestSelectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserTestSelectionCountAggregateInputType | true
    }

  export interface UserTestSelectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTestSelection'], meta: { name: 'UserTestSelection' } }
    /**
     * Find zero or one UserTestSelection that matches the filter.
     * @param {UserTestSelectionFindUniqueArgs} args - Arguments to find a UserTestSelection
     * @example
     * // Get one UserTestSelection
     * const userTestSelection = await prisma.userTestSelection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserTestSelectionFindUniqueArgs>(args: SelectSubset<T, UserTestSelectionFindUniqueArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserTestSelection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserTestSelectionFindUniqueOrThrowArgs} args - Arguments to find a UserTestSelection
     * @example
     * // Get one UserTestSelection
     * const userTestSelection = await prisma.userTestSelection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserTestSelectionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserTestSelectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTestSelection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestSelectionFindFirstArgs} args - Arguments to find a UserTestSelection
     * @example
     * // Get one UserTestSelection
     * const userTestSelection = await prisma.userTestSelection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserTestSelectionFindFirstArgs>(args?: SelectSubset<T, UserTestSelectionFindFirstArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTestSelection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestSelectionFindFirstOrThrowArgs} args - Arguments to find a UserTestSelection
     * @example
     * // Get one UserTestSelection
     * const userTestSelection = await prisma.userTestSelection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserTestSelectionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserTestSelectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserTestSelections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestSelectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTestSelections
     * const userTestSelections = await prisma.userTestSelection.findMany()
     * 
     * // Get first 10 UserTestSelections
     * const userTestSelections = await prisma.userTestSelection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTestSelectionWithIdOnly = await prisma.userTestSelection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserTestSelectionFindManyArgs>(args?: SelectSubset<T, UserTestSelectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserTestSelection.
     * @param {UserTestSelectionCreateArgs} args - Arguments to create a UserTestSelection.
     * @example
     * // Create one UserTestSelection
     * const UserTestSelection = await prisma.userTestSelection.create({
     *   data: {
     *     // ... data to create a UserTestSelection
     *   }
     * })
     * 
     */
    create<T extends UserTestSelectionCreateArgs>(args: SelectSubset<T, UserTestSelectionCreateArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserTestSelections.
     * @param {UserTestSelectionCreateManyArgs} args - Arguments to create many UserTestSelections.
     * @example
     * // Create many UserTestSelections
     * const userTestSelection = await prisma.userTestSelection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserTestSelectionCreateManyArgs>(args?: SelectSubset<T, UserTestSelectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserTestSelection.
     * @param {UserTestSelectionDeleteArgs} args - Arguments to delete one UserTestSelection.
     * @example
     * // Delete one UserTestSelection
     * const UserTestSelection = await prisma.userTestSelection.delete({
     *   where: {
     *     // ... filter to delete one UserTestSelection
     *   }
     * })
     * 
     */
    delete<T extends UserTestSelectionDeleteArgs>(args: SelectSubset<T, UserTestSelectionDeleteArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserTestSelection.
     * @param {UserTestSelectionUpdateArgs} args - Arguments to update one UserTestSelection.
     * @example
     * // Update one UserTestSelection
     * const userTestSelection = await prisma.userTestSelection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserTestSelectionUpdateArgs>(args: SelectSubset<T, UserTestSelectionUpdateArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserTestSelections.
     * @param {UserTestSelectionDeleteManyArgs} args - Arguments to filter UserTestSelections to delete.
     * @example
     * // Delete a few UserTestSelections
     * const { count } = await prisma.userTestSelection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserTestSelectionDeleteManyArgs>(args?: SelectSubset<T, UserTestSelectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTestSelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestSelectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTestSelections
     * const userTestSelection = await prisma.userTestSelection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserTestSelectionUpdateManyArgs>(args: SelectSubset<T, UserTestSelectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserTestSelection.
     * @param {UserTestSelectionUpsertArgs} args - Arguments to update or create a UserTestSelection.
     * @example
     * // Update or create a UserTestSelection
     * const userTestSelection = await prisma.userTestSelection.upsert({
     *   create: {
     *     // ... data to create a UserTestSelection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTestSelection we want to update
     *   }
     * })
     */
    upsert<T extends UserTestSelectionUpsertArgs>(args: SelectSubset<T, UserTestSelectionUpsertArgs<ExtArgs>>): Prisma__UserTestSelectionClient<$Result.GetResult<Prisma.$UserTestSelectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserTestSelections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestSelectionCountArgs} args - Arguments to filter UserTestSelections to count.
     * @example
     * // Count the number of UserTestSelections
     * const count = await prisma.userTestSelection.count({
     *   where: {
     *     // ... the filter for the UserTestSelections we want to count
     *   }
     * })
    **/
    count<T extends UserTestSelectionCountArgs>(
      args?: Subset<T, UserTestSelectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTestSelectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTestSelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestSelectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTestSelectionAggregateArgs>(args: Subset<T, UserTestSelectionAggregateArgs>): Prisma.PrismaPromise<GetUserTestSelectionAggregateType<T>>

    /**
     * Group by UserTestSelection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTestSelectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTestSelectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTestSelectionGroupByArgs['orderBy'] }
        : { orderBy?: UserTestSelectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTestSelectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTestSelectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserTestSelection model
   */
  readonly fields: UserTestSelectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTestSelection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTestSelectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    testType<T extends TestTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestTypeDefaultArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserTestSelection model
   */
  interface UserTestSelectionFieldRefs {
    readonly id: FieldRef<"UserTestSelection", 'String'>
    readonly is_active: FieldRef<"UserTestSelection", 'Boolean'>
    readonly selected_at: FieldRef<"UserTestSelection", 'DateTime'>
    readonly user_id: FieldRef<"UserTestSelection", 'String'>
    readonly test_type_id: FieldRef<"UserTestSelection", 'String'>
    readonly created_at: FieldRef<"UserTestSelection", 'DateTime'>
    readonly updated_at: FieldRef<"UserTestSelection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserTestSelection findUnique
   */
  export type UserTestSelectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * Filter, which UserTestSelection to fetch.
     */
    where: UserTestSelectionWhereUniqueInput
  }

  /**
   * UserTestSelection findUniqueOrThrow
   */
  export type UserTestSelectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * Filter, which UserTestSelection to fetch.
     */
    where: UserTestSelectionWhereUniqueInput
  }

  /**
   * UserTestSelection findFirst
   */
  export type UserTestSelectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * Filter, which UserTestSelection to fetch.
     */
    where?: UserTestSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTestSelections to fetch.
     */
    orderBy?: UserTestSelectionOrderByWithRelationInput | UserTestSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTestSelections.
     */
    cursor?: UserTestSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTestSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTestSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTestSelections.
     */
    distinct?: UserTestSelectionScalarFieldEnum | UserTestSelectionScalarFieldEnum[]
  }

  /**
   * UserTestSelection findFirstOrThrow
   */
  export type UserTestSelectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * Filter, which UserTestSelection to fetch.
     */
    where?: UserTestSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTestSelections to fetch.
     */
    orderBy?: UserTestSelectionOrderByWithRelationInput | UserTestSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTestSelections.
     */
    cursor?: UserTestSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTestSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTestSelections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTestSelections.
     */
    distinct?: UserTestSelectionScalarFieldEnum | UserTestSelectionScalarFieldEnum[]
  }

  /**
   * UserTestSelection findMany
   */
  export type UserTestSelectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * Filter, which UserTestSelections to fetch.
     */
    where?: UserTestSelectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTestSelections to fetch.
     */
    orderBy?: UserTestSelectionOrderByWithRelationInput | UserTestSelectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTestSelections.
     */
    cursor?: UserTestSelectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTestSelections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTestSelections.
     */
    skip?: number
    distinct?: UserTestSelectionScalarFieldEnum | UserTestSelectionScalarFieldEnum[]
  }

  /**
   * UserTestSelection create
   */
  export type UserTestSelectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserTestSelection.
     */
    data: XOR<UserTestSelectionCreateInput, UserTestSelectionUncheckedCreateInput>
  }

  /**
   * UserTestSelection createMany
   */
  export type UserTestSelectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTestSelections.
     */
    data: UserTestSelectionCreateManyInput | UserTestSelectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserTestSelection update
   */
  export type UserTestSelectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserTestSelection.
     */
    data: XOR<UserTestSelectionUpdateInput, UserTestSelectionUncheckedUpdateInput>
    /**
     * Choose, which UserTestSelection to update.
     */
    where: UserTestSelectionWhereUniqueInput
  }

  /**
   * UserTestSelection updateMany
   */
  export type UserTestSelectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTestSelections.
     */
    data: XOR<UserTestSelectionUpdateManyMutationInput, UserTestSelectionUncheckedUpdateManyInput>
    /**
     * Filter which UserTestSelections to update
     */
    where?: UserTestSelectionWhereInput
    /**
     * Limit how many UserTestSelections to update.
     */
    limit?: number
  }

  /**
   * UserTestSelection upsert
   */
  export type UserTestSelectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserTestSelection to update in case it exists.
     */
    where: UserTestSelectionWhereUniqueInput
    /**
     * In case the UserTestSelection found by the `where` argument doesn't exist, create a new UserTestSelection with this data.
     */
    create: XOR<UserTestSelectionCreateInput, UserTestSelectionUncheckedCreateInput>
    /**
     * In case the UserTestSelection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTestSelectionUpdateInput, UserTestSelectionUncheckedUpdateInput>
  }

  /**
   * UserTestSelection delete
   */
  export type UserTestSelectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
    /**
     * Filter which UserTestSelection to delete.
     */
    where: UserTestSelectionWhereUniqueInput
  }

  /**
   * UserTestSelection deleteMany
   */
  export type UserTestSelectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTestSelections to delete
     */
    where?: UserTestSelectionWhereInput
    /**
     * Limit how many UserTestSelections to delete.
     */
    limit?: number
  }

  /**
   * UserTestSelection without action
   */
  export type UserTestSelectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTestSelection
     */
    select?: UserTestSelectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTestSelection
     */
    omit?: UserTestSelectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTestSelectionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AppUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password_hash: 'password_hash',
    name: 'name',
    company_name: 'company_name',
    phone: 'phone',
    website: 'website',
    active: 'active',
    created_at: 'created_at',
    updated_at: 'updated_at',
    email_verified: 'email_verified',
    email_verified_at: 'email_verified_at',
    reset_token: 'reset_token',
    reset_token_expires: 'reset_token_expires'
  };

  export type AppUserScalarFieldEnum = (typeof AppUserScalarFieldEnum)[keyof typeof AppUserScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    key: 'key',
    name: 'name',
    active: 'active',
    created_at: 'created_at',
    updated_at: 'updated_at',
    last_used_at: 'last_used_at',
    expires_at: 'expires_at'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const AppSessionScalarFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    token: 'token',
    refresh_token: 'refresh_token',
    ip_address: 'ip_address',
    user_agent: 'user_agent',
    expires_at: 'expires_at',
    created_at: 'created_at',
    updated_at: 'updated_at',
    revoked: 'revoked',
    revoked_at: 'revoked_at'
  };

  export type AppSessionScalarFieldEnum = (typeof AppSessionScalarFieldEnum)[keyof typeof AppSessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    api_key_id: 'api_key_id',
    email: 'email',
    username: 'username',
    password_hash: 'password_hash',
    name: 'name',
    active: 'active',
    created_at: 'created_at',
    updated_at: 'updated_at',
    email_verified: 'email_verified',
    email_verified_at: 'email_verified_at',
    reset_token: 'reset_token',
    reset_token_expires: 'reset_token_expires',
    ip_address: 'ip_address',
    user_agent: 'user_agent'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    api_key: 'api_key',
    active: 'active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const UserAccountScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    account_id: 'account_id',
    created_at: 'created_at',
    created_by: 'created_by'
  };

  export type UserAccountScalarFieldEnum = (typeof UserAccountScalarFieldEnum)[keyof typeof UserAccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    token: 'token',
    refresh_token: 'refresh_token',
    ip_address: 'ip_address',
    user_agent: 'user_agent',
    expires_at: 'expires_at',
    created_at: 'created_at',
    updated_at: 'updated_at',
    revoked: 'revoked',
    revoked_at: 'revoked_at'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AuthLogScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    event_type: 'event_type',
    status: 'status',
    ip_address: 'ip_address',
    user_agent: 'user_agent',
    details: 'details',
    created_at: 'created_at'
  };

  export type AuthLogScalarFieldEnum = (typeof AuthLogScalarFieldEnum)[keyof typeof AuthLogScalarFieldEnum]


  export const EmailVerificationScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    expires_at: 'expires_at',
    created_at: 'created_at'
  };

  export type EmailVerificationScalarFieldEnum = (typeof EmailVerificationScalarFieldEnum)[keyof typeof EmailVerificationScalarFieldEnum]


  export const PasswordResetScalarFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    token: 'token',
    expires_at: 'expires_at',
    created_at: 'created_at',
    updated_at: 'updated_at',
    used: 'used'
  };

  export type PasswordResetScalarFieldEnum = (typeof PasswordResetScalarFieldEnum)[keyof typeof PasswordResetScalarFieldEnum]


  export const AuthEventScalarFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    event_type: 'event_type',
    ip_address: 'ip_address',
    user_agent: 'user_agent',
    created_at: 'created_at',
    additional_info: 'additional_info'
  };

  export type AuthEventScalarFieldEnum = (typeof AuthEventScalarFieldEnum)[keyof typeof AuthEventScalarFieldEnum]


  export const TestTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    api_key_id: 'api_key_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TestTypeScalarFieldEnum = (typeof TestTypeScalarFieldEnum)[keyof typeof TestTypeScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slug_materia: 'slug_materia',
    approximate_total_minutes: 'approximate_total_minutes',
    total_questions: 'total_questions',
    order: 'order',
    api_key_id: 'api_key_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const SubjectDetailScalarFieldEnum: {
    id: 'id',
    background_image_url: 'background_image_url',
    title: 'title',
    title_color: 'title_color',
    subtitle: 'subtitle',
    primary_color_hex: 'primary_color_hex',
    created_at: 'created_at',
    updated_at: 'updated_at',
    subject_id: 'subject_id'
  };

  export type SubjectDetailScalarFieldEnum = (typeof SubjectDetailScalarFieldEnum)[keyof typeof SubjectDetailScalarFieldEnum]


  export const SubjectLevelScalarFieldEnum: {
    id: 'id',
    reference_title: 'reference_title',
    title: 'title',
    order: 'order',
    number_of_questions: 'number_of_questions',
    approximate_time_minutes: 'approximate_time_minutes',
    created_at: 'created_at',
    updated_at: 'updated_at',
    subject_id: 'subject_id'
  };

  export type SubjectLevelScalarFieldEnum = (typeof SubjectLevelScalarFieldEnum)[keyof typeof SubjectLevelScalarFieldEnum]


  export const TestSubjectScalarFieldEnum: {
    test_type_id: 'test_type_id',
    subject_id: 'subject_id',
    assigned_at: 'assigned_at',
    subject_order_in_test: 'subject_order_in_test'
  };

  export type TestSubjectScalarFieldEnum = (typeof TestSubjectScalarFieldEnum)[keyof typeof TestSubjectScalarFieldEnum]


  export const GlossaryCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    active: 'active'
  };

  export type GlossaryCategoryScalarFieldEnum = (typeof GlossaryCategoryScalarFieldEnum)[keyof typeof GlossaryCategoryScalarFieldEnum]


  export const GlossaryTermScalarFieldEnum: {
    id: 'id',
    word: 'word',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    active: 'active',
    category_id: 'category_id'
  };

  export type GlossaryTermScalarFieldEnum = (typeof GlossaryTermScalarFieldEnum)[keyof typeof GlossaryTermScalarFieldEnum]


  export const QuestionnaireScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    order: 'order',
    published: 'published',
    subject_level_id: 'subject_level_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type QuestionnaireScalarFieldEnum = (typeof QuestionnaireScalarFieldEnum)[keyof typeof QuestionnaireScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    text: 'text',
    question_type: 'question_type',
    explanation: 'explanation',
    extra_info: 'extra_info',
    points: 'points',
    order: 'order',
    difficulty: 'difficulty',
    tags: 'tags',
    active: 'active',
    questionnaire_id: 'questionnaire_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const AnswerOptionScalarFieldEnum: {
    id: 'id',
    text: 'text',
    is_correct: 'is_correct',
    order: 'order',
    question_id: 'question_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AnswerOptionScalarFieldEnum = (typeof AnswerOptionScalarFieldEnum)[keyof typeof AnswerOptionScalarFieldEnum]


  export const UserQuestionnaireAttemptScalarFieldEnum: {
    id: 'id',
    score: 'score',
    status: 'status',
    started_at: 'started_at',
    completed_at: 'completed_at',
    time_spent_seconds: 'time_spent_seconds',
    correct_answers_count: 'correct_answers_count',
    total_questions_count: 'total_questions_count',
    attempt_number: 'attempt_number',
    user_id: 'user_id',
    questionnaire_id: 'questionnaire_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserQuestionnaireAttemptScalarFieldEnum = (typeof UserQuestionnaireAttemptScalarFieldEnum)[keyof typeof UserQuestionnaireAttemptScalarFieldEnum]


  export const UserQuestionAnswerScalarFieldEnum: {
    id: 'id',
    is_correct: 'is_correct',
    answered_at: 'answered_at',
    time_to_answer_seconds: 'time_to_answer_seconds',
    points_earned: 'points_earned',
    user_id: 'user_id',
    question_id: 'question_id',
    selected_answer_option_id: 'selected_answer_option_id',
    answered_text: 'answered_text',
    user_questionnaire_attempt_id: 'user_questionnaire_attempt_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserQuestionAnswerScalarFieldEnum = (typeof UserQuestionAnswerScalarFieldEnum)[keyof typeof UserQuestionAnswerScalarFieldEnum]


  export const UserTestSelectionScalarFieldEnum: {
    id: 'id',
    is_active: 'is_active',
    selected_at: 'selected_at',
    user_id: 'user_id',
    test_type_id: 'test_type_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserTestSelectionScalarFieldEnum = (typeof UserTestSelectionScalarFieldEnum)[keyof typeof UserTestSelectionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const AppUserOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password_hash: 'password_hash',
    name: 'name',
    company_name: 'company_name',
    phone: 'phone',
    website: 'website',
    reset_token: 'reset_token'
  };

  export type AppUserOrderByRelevanceFieldEnum = (typeof AppUserOrderByRelevanceFieldEnum)[keyof typeof AppUserOrderByRelevanceFieldEnum]


  export const ApiKeyOrderByRelevanceFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    key: 'key',
    name: 'name'
  };

  export type ApiKeyOrderByRelevanceFieldEnum = (typeof ApiKeyOrderByRelevanceFieldEnum)[keyof typeof ApiKeyOrderByRelevanceFieldEnum]


  export const AppSessionOrderByRelevanceFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    token: 'token',
    refresh_token: 'refresh_token',
    ip_address: 'ip_address',
    user_agent: 'user_agent'
  };

  export type AppSessionOrderByRelevanceFieldEnum = (typeof AppSessionOrderByRelevanceFieldEnum)[keyof typeof AppSessionOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    api_key_id: 'api_key_id',
    email: 'email',
    username: 'username',
    password_hash: 'password_hash',
    name: 'name',
    reset_token: 'reset_token',
    ip_address: 'ip_address',
    user_agent: 'user_agent'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    api_key: 'api_key'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const UserAccountOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    account_id: 'account_id',
    created_by: 'created_by'
  };

  export type UserAccountOrderByRelevanceFieldEnum = (typeof UserAccountOrderByRelevanceFieldEnum)[keyof typeof UserAccountOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    token: 'token',
    refresh_token: 'refresh_token',
    ip_address: 'ip_address',
    user_agent: 'user_agent'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const AuthLogOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    ip_address: 'ip_address',
    user_agent: 'user_agent',
    details: 'details'
  };

  export type AuthLogOrderByRelevanceFieldEnum = (typeof AuthLogOrderByRelevanceFieldEnum)[keyof typeof AuthLogOrderByRelevanceFieldEnum]


  export const EmailVerificationOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token'
  };

  export type EmailVerificationOrderByRelevanceFieldEnum = (typeof EmailVerificationOrderByRelevanceFieldEnum)[keyof typeof EmailVerificationOrderByRelevanceFieldEnum]


  export const PasswordResetOrderByRelevanceFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    token: 'token'
  };

  export type PasswordResetOrderByRelevanceFieldEnum = (typeof PasswordResetOrderByRelevanceFieldEnum)[keyof typeof PasswordResetOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const AuthEventOrderByRelevanceFieldEnum: {
    id: 'id',
    app_user_id: 'app_user_id',
    event_type: 'event_type',
    ip_address: 'ip_address',
    user_agent: 'user_agent'
  };

  export type AuthEventOrderByRelevanceFieldEnum = (typeof AuthEventOrderByRelevanceFieldEnum)[keyof typeof AuthEventOrderByRelevanceFieldEnum]


  export const TestTypeOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    api_key_id: 'api_key_id'
  };

  export type TestTypeOrderByRelevanceFieldEnum = (typeof TestTypeOrderByRelevanceFieldEnum)[keyof typeof TestTypeOrderByRelevanceFieldEnum]


  export const SubjectOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slug_materia: 'slug_materia',
    api_key_id: 'api_key_id'
  };

  export type SubjectOrderByRelevanceFieldEnum = (typeof SubjectOrderByRelevanceFieldEnum)[keyof typeof SubjectOrderByRelevanceFieldEnum]


  export const SubjectDetailOrderByRelevanceFieldEnum: {
    id: 'id',
    background_image_url: 'background_image_url',
    title: 'title',
    title_color: 'title_color',
    subtitle: 'subtitle',
    primary_color_hex: 'primary_color_hex',
    subject_id: 'subject_id'
  };

  export type SubjectDetailOrderByRelevanceFieldEnum = (typeof SubjectDetailOrderByRelevanceFieldEnum)[keyof typeof SubjectDetailOrderByRelevanceFieldEnum]


  export const SubjectLevelOrderByRelevanceFieldEnum: {
    id: 'id',
    reference_title: 'reference_title',
    title: 'title',
    subject_id: 'subject_id'
  };

  export type SubjectLevelOrderByRelevanceFieldEnum = (typeof SubjectLevelOrderByRelevanceFieldEnum)[keyof typeof SubjectLevelOrderByRelevanceFieldEnum]


  export const TestSubjectOrderByRelevanceFieldEnum: {
    test_type_id: 'test_type_id',
    subject_id: 'subject_id'
  };

  export type TestSubjectOrderByRelevanceFieldEnum = (typeof TestSubjectOrderByRelevanceFieldEnum)[keyof typeof TestSubjectOrderByRelevanceFieldEnum]


  export const GlossaryCategoryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type GlossaryCategoryOrderByRelevanceFieldEnum = (typeof GlossaryCategoryOrderByRelevanceFieldEnum)[keyof typeof GlossaryCategoryOrderByRelevanceFieldEnum]


  export const GlossaryTermOrderByRelevanceFieldEnum: {
    id: 'id',
    word: 'word',
    description: 'description',
    category_id: 'category_id'
  };

  export type GlossaryTermOrderByRelevanceFieldEnum = (typeof GlossaryTermOrderByRelevanceFieldEnum)[keyof typeof GlossaryTermOrderByRelevanceFieldEnum]


  export const QuestionnaireOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    subject_level_id: 'subject_level_id'
  };

  export type QuestionnaireOrderByRelevanceFieldEnum = (typeof QuestionnaireOrderByRelevanceFieldEnum)[keyof typeof QuestionnaireOrderByRelevanceFieldEnum]


  export const QuestionOrderByRelevanceFieldEnum: {
    id: 'id',
    text: 'text',
    explanation: 'explanation',
    extra_info: 'extra_info',
    tags: 'tags',
    questionnaire_id: 'questionnaire_id'
  };

  export type QuestionOrderByRelevanceFieldEnum = (typeof QuestionOrderByRelevanceFieldEnum)[keyof typeof QuestionOrderByRelevanceFieldEnum]


  export const AnswerOptionOrderByRelevanceFieldEnum: {
    id: 'id',
    text: 'text',
    question_id: 'question_id'
  };

  export type AnswerOptionOrderByRelevanceFieldEnum = (typeof AnswerOptionOrderByRelevanceFieldEnum)[keyof typeof AnswerOptionOrderByRelevanceFieldEnum]


  export const UserQuestionnaireAttemptOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    questionnaire_id: 'questionnaire_id'
  };

  export type UserQuestionnaireAttemptOrderByRelevanceFieldEnum = (typeof UserQuestionnaireAttemptOrderByRelevanceFieldEnum)[keyof typeof UserQuestionnaireAttemptOrderByRelevanceFieldEnum]


  export const UserQuestionAnswerOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    question_id: 'question_id',
    selected_answer_option_id: 'selected_answer_option_id',
    answered_text: 'answered_text',
    user_questionnaire_attempt_id: 'user_questionnaire_attempt_id'
  };

  export type UserQuestionAnswerOrderByRelevanceFieldEnum = (typeof UserQuestionAnswerOrderByRelevanceFieldEnum)[keyof typeof UserQuestionAnswerOrderByRelevanceFieldEnum]


  export const UserTestSelectionOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    test_type_id: 'test_type_id'
  };

  export type UserTestSelectionOrderByRelevanceFieldEnum = (typeof UserTestSelectionOrderByRelevanceFieldEnum)[keyof typeof UserTestSelectionOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'AuthEventType'
   */
  export type EnumAuthEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthEventType'>
    


  /**
   * Reference to a field of type 'AuthEventStatus'
   */
  export type EnumAuthEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthEventStatus'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'AttemptStatus'
   */
  export type EnumAttemptStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttemptStatus'>
    
  /**
   * Deep Input Types
   */


  export type AppUserWhereInput = {
    AND?: AppUserWhereInput | AppUserWhereInput[]
    OR?: AppUserWhereInput[]
    NOT?: AppUserWhereInput | AppUserWhereInput[]
    id?: StringFilter<"AppUser"> | string
    email?: StringFilter<"AppUser"> | string
    username?: StringFilter<"AppUser"> | string
    password_hash?: StringFilter<"AppUser"> | string
    name?: StringNullableFilter<"AppUser"> | string | null
    company_name?: StringNullableFilter<"AppUser"> | string | null
    phone?: StringNullableFilter<"AppUser"> | string | null
    website?: StringNullableFilter<"AppUser"> | string | null
    active?: BoolFilter<"AppUser"> | boolean
    created_at?: DateTimeFilter<"AppUser"> | Date | string
    updated_at?: DateTimeFilter<"AppUser"> | Date | string
    email_verified?: BoolFilter<"AppUser"> | boolean
    email_verified_at?: DateTimeNullableFilter<"AppUser"> | Date | string | null
    reset_token?: StringNullableFilter<"AppUser"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"AppUser"> | Date | string | null
    api_keys?: ApiKeyListRelationFilter
    app_sessions?: AppSessionListRelationFilter
    password_resets?: XOR<PasswordResetNullableScalarRelationFilter, PasswordResetWhereInput> | null
    auth_events?: AuthEventListRelationFilter
  }

  export type AppUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrderInput | SortOrder
    company_name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    reset_token?: SortOrderInput | SortOrder
    reset_token_expires?: SortOrderInput | SortOrder
    api_keys?: ApiKeyOrderByRelationAggregateInput
    app_sessions?: AppSessionOrderByRelationAggregateInput
    password_resets?: PasswordResetOrderByWithRelationInput
    auth_events?: AuthEventOrderByRelationAggregateInput
    _relevance?: AppUserOrderByRelevanceInput
  }

  export type AppUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: AppUserWhereInput | AppUserWhereInput[]
    OR?: AppUserWhereInput[]
    NOT?: AppUserWhereInput | AppUserWhereInput[]
    password_hash?: StringFilter<"AppUser"> | string
    name?: StringNullableFilter<"AppUser"> | string | null
    company_name?: StringNullableFilter<"AppUser"> | string | null
    phone?: StringNullableFilter<"AppUser"> | string | null
    website?: StringNullableFilter<"AppUser"> | string | null
    active?: BoolFilter<"AppUser"> | boolean
    created_at?: DateTimeFilter<"AppUser"> | Date | string
    updated_at?: DateTimeFilter<"AppUser"> | Date | string
    email_verified?: BoolFilter<"AppUser"> | boolean
    email_verified_at?: DateTimeNullableFilter<"AppUser"> | Date | string | null
    reset_token?: StringNullableFilter<"AppUser"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"AppUser"> | Date | string | null
    api_keys?: ApiKeyListRelationFilter
    app_sessions?: AppSessionListRelationFilter
    password_resets?: XOR<PasswordResetNullableScalarRelationFilter, PasswordResetWhereInput> | null
    auth_events?: AuthEventListRelationFilter
  }, "id" | "email" | "username">

  export type AppUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrderInput | SortOrder
    company_name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    reset_token?: SortOrderInput | SortOrder
    reset_token_expires?: SortOrderInput | SortOrder
    _count?: AppUserCountOrderByAggregateInput
    _max?: AppUserMaxOrderByAggregateInput
    _min?: AppUserMinOrderByAggregateInput
  }

  export type AppUserScalarWhereWithAggregatesInput = {
    AND?: AppUserScalarWhereWithAggregatesInput | AppUserScalarWhereWithAggregatesInput[]
    OR?: AppUserScalarWhereWithAggregatesInput[]
    NOT?: AppUserScalarWhereWithAggregatesInput | AppUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppUser"> | string
    email?: StringWithAggregatesFilter<"AppUser"> | string
    username?: StringWithAggregatesFilter<"AppUser"> | string
    password_hash?: StringWithAggregatesFilter<"AppUser"> | string
    name?: StringNullableWithAggregatesFilter<"AppUser"> | string | null
    company_name?: StringNullableWithAggregatesFilter<"AppUser"> | string | null
    phone?: StringNullableWithAggregatesFilter<"AppUser"> | string | null
    website?: StringNullableWithAggregatesFilter<"AppUser"> | string | null
    active?: BoolWithAggregatesFilter<"AppUser"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"AppUser"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"AppUser"> | Date | string
    email_verified?: BoolWithAggregatesFilter<"AppUser"> | boolean
    email_verified_at?: DateTimeNullableWithAggregatesFilter<"AppUser"> | Date | string | null
    reset_token?: StringNullableWithAggregatesFilter<"AppUser"> | string | null
    reset_token_expires?: DateTimeNullableWithAggregatesFilter<"AppUser"> | Date | string | null
  }

  export type ApiKeyWhereInput = {
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    app_user_id?: StringFilter<"ApiKey"> | string
    key?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    active?: BoolFilter<"ApiKey"> | boolean
    created_at?: DateTimeFilter<"ApiKey"> | Date | string
    updated_at?: DateTimeFilter<"ApiKey"> | Date | string
    last_used_at?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
    users?: UserListRelationFilter
    test_types?: TestTypeListRelationFilter
    subjects?: SubjectListRelationFilter
  }

  export type ApiKeyOrderByWithRelationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    last_used_at?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    app_user?: AppUserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    test_types?: TestTypeOrderByRelationAggregateInput
    subjects?: SubjectOrderByRelationAggregateInput
    _relevance?: ApiKeyOrderByRelevanceInput
  }

  export type ApiKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    app_user_id?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    active?: BoolFilter<"ApiKey"> | boolean
    created_at?: DateTimeFilter<"ApiKey"> | Date | string
    updated_at?: DateTimeFilter<"ApiKey"> | Date | string
    last_used_at?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
    users?: UserListRelationFilter
    test_types?: TestTypeListRelationFilter
    subjects?: SubjectListRelationFilter
  }, "id" | "key">

  export type ApiKeyOrderByWithAggregationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    last_used_at?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    OR?: ApiKeyScalarWhereWithAggregatesInput[]
    NOT?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApiKey"> | string
    app_user_id?: StringWithAggregatesFilter<"ApiKey"> | string
    key?: StringWithAggregatesFilter<"ApiKey"> | string
    name?: StringWithAggregatesFilter<"ApiKey"> | string
    active?: BoolWithAggregatesFilter<"ApiKey"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
    last_used_at?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    expires_at?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
  }

  export type AppSessionWhereInput = {
    AND?: AppSessionWhereInput | AppSessionWhereInput[]
    OR?: AppSessionWhereInput[]
    NOT?: AppSessionWhereInput | AppSessionWhereInput[]
    id?: StringFilter<"AppSession"> | string
    app_user_id?: StringFilter<"AppSession"> | string
    token?: StringFilter<"AppSession"> | string
    refresh_token?: StringNullableFilter<"AppSession"> | string | null
    ip_address?: StringNullableFilter<"AppSession"> | string | null
    user_agent?: StringNullableFilter<"AppSession"> | string | null
    expires_at?: DateTimeFilter<"AppSession"> | Date | string
    created_at?: DateTimeFilter<"AppSession"> | Date | string
    updated_at?: DateTimeFilter<"AppSession"> | Date | string
    revoked?: BoolFilter<"AppSession"> | boolean
    revoked_at?: DateTimeNullableFilter<"AppSession"> | Date | string | null
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
  }

  export type AppSessionOrderByWithRelationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrderInput | SortOrder
    app_user?: AppUserOrderByWithRelationInput
    _relevance?: AppSessionOrderByRelevanceInput
  }

  export type AppSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    refresh_token?: string
    AND?: AppSessionWhereInput | AppSessionWhereInput[]
    OR?: AppSessionWhereInput[]
    NOT?: AppSessionWhereInput | AppSessionWhereInput[]
    app_user_id?: StringFilter<"AppSession"> | string
    ip_address?: StringNullableFilter<"AppSession"> | string | null
    user_agent?: StringNullableFilter<"AppSession"> | string | null
    expires_at?: DateTimeFilter<"AppSession"> | Date | string
    created_at?: DateTimeFilter<"AppSession"> | Date | string
    updated_at?: DateTimeFilter<"AppSession"> | Date | string
    revoked?: BoolFilter<"AppSession"> | boolean
    revoked_at?: DateTimeNullableFilter<"AppSession"> | Date | string | null
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
  }, "id" | "token" | "refresh_token">

  export type AppSessionOrderByWithAggregationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrderInput | SortOrder
    _count?: AppSessionCountOrderByAggregateInput
    _max?: AppSessionMaxOrderByAggregateInput
    _min?: AppSessionMinOrderByAggregateInput
  }

  export type AppSessionScalarWhereWithAggregatesInput = {
    AND?: AppSessionScalarWhereWithAggregatesInput | AppSessionScalarWhereWithAggregatesInput[]
    OR?: AppSessionScalarWhereWithAggregatesInput[]
    NOT?: AppSessionScalarWhereWithAggregatesInput | AppSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppSession"> | string
    app_user_id?: StringWithAggregatesFilter<"AppSession"> | string
    token?: StringWithAggregatesFilter<"AppSession"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"AppSession"> | string | null
    ip_address?: StringNullableWithAggregatesFilter<"AppSession"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"AppSession"> | string | null
    expires_at?: DateTimeWithAggregatesFilter<"AppSession"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"AppSession"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"AppSession"> | Date | string
    revoked?: BoolWithAggregatesFilter<"AppSession"> | boolean
    revoked_at?: DateTimeNullableWithAggregatesFilter<"AppSession"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    api_key_id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    email_verified?: BoolFilter<"User"> | boolean
    email_verified_at?: DateTimeNullableFilter<"User"> | Date | string | null
    reset_token?: StringNullableFilter<"User"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"User"> | Date | string | null
    ip_address?: StringNullableFilter<"User"> | string | null
    user_agent?: StringNullableFilter<"User"> | string | null
    api_key?: XOR<ApiKeyScalarRelationFilter, ApiKeyWhereInput>
    accounts?: UserAccountListRelationFilter
    sessions?: SessionListRelationFilter
    auth_logs?: AuthLogListRelationFilter
    questionnaireAttempts?: UserQuestionnaireAttemptListRelationFilter
    questionAnswers?: UserQuestionAnswerListRelationFilter
    testSelections?: UserTestSelectionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    api_key_id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrderInput | SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    reset_token?: SortOrderInput | SortOrder
    reset_token_expires?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    api_key?: ApiKeyOrderByWithRelationInput
    accounts?: UserAccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    auth_logs?: AuthLogOrderByRelationAggregateInput
    questionnaireAttempts?: UserQuestionnaireAttemptOrderByRelationAggregateInput
    questionAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    testSelections?: UserTestSelectionOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email_api_key_id?: UserEmailApi_key_idCompoundUniqueInput
    username_api_key_id?: UserUsernameApi_key_idCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    api_key_id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    email_verified?: BoolFilter<"User"> | boolean
    email_verified_at?: DateTimeNullableFilter<"User"> | Date | string | null
    reset_token?: StringNullableFilter<"User"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"User"> | Date | string | null
    ip_address?: StringNullableFilter<"User"> | string | null
    user_agent?: StringNullableFilter<"User"> | string | null
    api_key?: XOR<ApiKeyScalarRelationFilter, ApiKeyWhereInput>
    accounts?: UserAccountListRelationFilter
    sessions?: SessionListRelationFilter
    auth_logs?: AuthLogListRelationFilter
    questionnaireAttempts?: UserQuestionnaireAttemptListRelationFilter
    questionAnswers?: UserQuestionAnswerListRelationFilter
    testSelections?: UserTestSelectionListRelationFilter
  }, "id" | "email_api_key_id" | "username_api_key_id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    api_key_id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrderInput | SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    reset_token?: SortOrderInput | SortOrder
    reset_token_expires?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    api_key_id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    active?: BoolWithAggregatesFilter<"User"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email_verified?: BoolWithAggregatesFilter<"User"> | boolean
    email_verified_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    reset_token?: StringNullableWithAggregatesFilter<"User"> | string | null
    reset_token_expires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    ip_address?: StringNullableWithAggregatesFilter<"User"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    name?: StringFilter<"Account"> | string
    api_key?: StringFilter<"Account"> | string
    active?: BoolFilter<"Account"> | boolean
    created_at?: DateTimeFilter<"Account"> | Date | string
    updated_at?: DateTimeFilter<"Account"> | Date | string
    user_accounts?: UserAccountListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    api_key?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_accounts?: UserAccountOrderByRelationAggregateInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    api_key?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    name?: StringFilter<"Account"> | string
    active?: BoolFilter<"Account"> | boolean
    created_at?: DateTimeFilter<"Account"> | Date | string
    updated_at?: DateTimeFilter<"Account"> | Date | string
    user_accounts?: UserAccountListRelationFilter
  }, "id" | "api_key">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    api_key?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    name?: StringWithAggregatesFilter<"Account"> | string
    api_key?: StringWithAggregatesFilter<"Account"> | string
    active?: BoolWithAggregatesFilter<"Account"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type UserAccountWhereInput = {
    AND?: UserAccountWhereInput | UserAccountWhereInput[]
    OR?: UserAccountWhereInput[]
    NOT?: UserAccountWhereInput | UserAccountWhereInput[]
    id?: StringFilter<"UserAccount"> | string
    user_id?: StringFilter<"UserAccount"> | string
    account_id?: StringFilter<"UserAccount"> | string
    created_at?: DateTimeFilter<"UserAccount"> | Date | string
    created_by?: StringNullableFilter<"UserAccount"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
  }

  export type UserAccountOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    account_id?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    account?: AccountOrderByWithRelationInput
    _relevance?: UserAccountOrderByRelevanceInput
  }

  export type UserAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id_account_id?: UserAccountUser_idAccount_idCompoundUniqueInput
    AND?: UserAccountWhereInput | UserAccountWhereInput[]
    OR?: UserAccountWhereInput[]
    NOT?: UserAccountWhereInput | UserAccountWhereInput[]
    user_id?: StringFilter<"UserAccount"> | string
    account_id?: StringFilter<"UserAccount"> | string
    created_at?: DateTimeFilter<"UserAccount"> | Date | string
    created_by?: StringNullableFilter<"UserAccount"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    account?: XOR<AccountScalarRelationFilter, AccountWhereInput>
  }, "id" | "user_id_account_id">

  export type UserAccountOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    account_id?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    _count?: UserAccountCountOrderByAggregateInput
    _max?: UserAccountMaxOrderByAggregateInput
    _min?: UserAccountMinOrderByAggregateInput
  }

  export type UserAccountScalarWhereWithAggregatesInput = {
    AND?: UserAccountScalarWhereWithAggregatesInput | UserAccountScalarWhereWithAggregatesInput[]
    OR?: UserAccountScalarWhereWithAggregatesInput[]
    NOT?: UserAccountScalarWhereWithAggregatesInput | UserAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAccount"> | string
    user_id?: StringWithAggregatesFilter<"UserAccount"> | string
    account_id?: StringWithAggregatesFilter<"UserAccount"> | string
    created_at?: DateTimeWithAggregatesFilter<"UserAccount"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"UserAccount"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    user_id?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    refresh_token?: StringNullableFilter<"Session"> | string | null
    ip_address?: StringNullableFilter<"Session"> | string | null
    user_agent?: StringNullableFilter<"Session"> | string | null
    expires_at?: DateTimeFilter<"Session"> | Date | string
    created_at?: DateTimeFilter<"Session"> | Date | string
    updated_at?: DateTimeFilter<"Session"> | Date | string
    revoked?: BoolFilter<"Session"> | boolean
    revoked_at?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    refresh_token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    user_id?: StringFilter<"Session"> | string
    ip_address?: StringNullableFilter<"Session"> | string | null
    user_agent?: StringNullableFilter<"Session"> | string | null
    expires_at?: DateTimeFilter<"Session"> | Date | string
    created_at?: DateTimeFilter<"Session"> | Date | string
    updated_at?: DateTimeFilter<"Session"> | Date | string
    revoked?: BoolFilter<"Session"> | boolean
    revoked_at?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token" | "refresh_token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    user_id?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Session"> | string | null
    ip_address?: StringNullableWithAggregatesFilter<"Session"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    expires_at?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    revoked?: BoolWithAggregatesFilter<"Session"> | boolean
    revoked_at?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
  }

  export type AuthLogWhereInput = {
    AND?: AuthLogWhereInput | AuthLogWhereInput[]
    OR?: AuthLogWhereInput[]
    NOT?: AuthLogWhereInput | AuthLogWhereInput[]
    id?: StringFilter<"AuthLog"> | string
    user_id?: StringNullableFilter<"AuthLog"> | string | null
    event_type?: EnumAuthEventTypeFilter<"AuthLog"> | $Enums.AuthEventType
    status?: EnumAuthEventStatusFilter<"AuthLog"> | $Enums.AuthEventStatus
    ip_address?: StringNullableFilter<"AuthLog"> | string | null
    user_agent?: StringNullableFilter<"AuthLog"> | string | null
    details?: StringNullableFilter<"AuthLog"> | string | null
    created_at?: DateTimeFilter<"AuthLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuthLogOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    event_type?: SortOrder
    status?: SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AuthLogOrderByRelevanceInput
  }

  export type AuthLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuthLogWhereInput | AuthLogWhereInput[]
    OR?: AuthLogWhereInput[]
    NOT?: AuthLogWhereInput | AuthLogWhereInput[]
    user_id?: StringNullableFilter<"AuthLog"> | string | null
    event_type?: EnumAuthEventTypeFilter<"AuthLog"> | $Enums.AuthEventType
    status?: EnumAuthEventStatusFilter<"AuthLog"> | $Enums.AuthEventStatus
    ip_address?: StringNullableFilter<"AuthLog"> | string | null
    user_agent?: StringNullableFilter<"AuthLog"> | string | null
    details?: StringNullableFilter<"AuthLog"> | string | null
    created_at?: DateTimeFilter<"AuthLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuthLogOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    event_type?: SortOrder
    status?: SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: AuthLogCountOrderByAggregateInput
    _max?: AuthLogMaxOrderByAggregateInput
    _min?: AuthLogMinOrderByAggregateInput
  }

  export type AuthLogScalarWhereWithAggregatesInput = {
    AND?: AuthLogScalarWhereWithAggregatesInput | AuthLogScalarWhereWithAggregatesInput[]
    OR?: AuthLogScalarWhereWithAggregatesInput[]
    NOT?: AuthLogScalarWhereWithAggregatesInput | AuthLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuthLog"> | string
    user_id?: StringNullableWithAggregatesFilter<"AuthLog"> | string | null
    event_type?: EnumAuthEventTypeWithAggregatesFilter<"AuthLog"> | $Enums.AuthEventType
    status?: EnumAuthEventStatusWithAggregatesFilter<"AuthLog"> | $Enums.AuthEventStatus
    ip_address?: StringNullableWithAggregatesFilter<"AuthLog"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"AuthLog"> | string | null
    details?: StringNullableWithAggregatesFilter<"AuthLog"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"AuthLog"> | Date | string
  }

  export type EmailVerificationWhereInput = {
    AND?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    OR?: EmailVerificationWhereInput[]
    NOT?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    id?: StringFilter<"EmailVerification"> | string
    email?: StringFilter<"EmailVerification"> | string
    token?: StringFilter<"EmailVerification"> | string
    expires_at?: DateTimeFilter<"EmailVerification"> | Date | string
    created_at?: DateTimeFilter<"EmailVerification"> | Date | string
  }

  export type EmailVerificationOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    _relevance?: EmailVerificationOrderByRelevanceInput
  }

  export type EmailVerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    OR?: EmailVerificationWhereInput[]
    NOT?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    email?: StringFilter<"EmailVerification"> | string
    expires_at?: DateTimeFilter<"EmailVerification"> | Date | string
    created_at?: DateTimeFilter<"EmailVerification"> | Date | string
  }, "id" | "token">

  export type EmailVerificationOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    _count?: EmailVerificationCountOrderByAggregateInput
    _max?: EmailVerificationMaxOrderByAggregateInput
    _min?: EmailVerificationMinOrderByAggregateInput
  }

  export type EmailVerificationScalarWhereWithAggregatesInput = {
    AND?: EmailVerificationScalarWhereWithAggregatesInput | EmailVerificationScalarWhereWithAggregatesInput[]
    OR?: EmailVerificationScalarWhereWithAggregatesInput[]
    NOT?: EmailVerificationScalarWhereWithAggregatesInput | EmailVerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailVerification"> | string
    email?: StringWithAggregatesFilter<"EmailVerification"> | string
    token?: StringWithAggregatesFilter<"EmailVerification"> | string
    expires_at?: DateTimeWithAggregatesFilter<"EmailVerification"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"EmailVerification"> | Date | string
  }

  export type PasswordResetWhereInput = {
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    id?: StringFilter<"PasswordReset"> | string
    app_user_id?: StringFilter<"PasswordReset"> | string
    token?: StringFilter<"PasswordReset"> | string
    expires_at?: DateTimeFilter<"PasswordReset"> | Date | string
    created_at?: DateTimeFilter<"PasswordReset"> | Date | string
    updated_at?: DateTimeFilter<"PasswordReset"> | Date | string
    used?: BoolFilter<"PasswordReset"> | boolean
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
  }

  export type PasswordResetOrderByWithRelationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    used?: SortOrder
    app_user?: AppUserOrderByWithRelationInput
    _relevance?: PasswordResetOrderByRelevanceInput
  }

  export type PasswordResetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    app_user_id?: string
    token?: string
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    expires_at?: DateTimeFilter<"PasswordReset"> | Date | string
    created_at?: DateTimeFilter<"PasswordReset"> | Date | string
    updated_at?: DateTimeFilter<"PasswordReset"> | Date | string
    used?: BoolFilter<"PasswordReset"> | boolean
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
  }, "id" | "app_user_id" | "token">

  export type PasswordResetOrderByWithAggregationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    used?: SortOrder
    _count?: PasswordResetCountOrderByAggregateInput
    _max?: PasswordResetMaxOrderByAggregateInput
    _min?: PasswordResetMinOrderByAggregateInput
  }

  export type PasswordResetScalarWhereWithAggregatesInput = {
    AND?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    OR?: PasswordResetScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordReset"> | string
    app_user_id?: StringWithAggregatesFilter<"PasswordReset"> | string
    token?: StringWithAggregatesFilter<"PasswordReset"> | string
    expires_at?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    used?: BoolWithAggregatesFilter<"PasswordReset"> | boolean
  }

  export type AuthEventWhereInput = {
    AND?: AuthEventWhereInput | AuthEventWhereInput[]
    OR?: AuthEventWhereInput[]
    NOT?: AuthEventWhereInput | AuthEventWhereInput[]
    id?: StringFilter<"AuthEvent"> | string
    app_user_id?: StringFilter<"AuthEvent"> | string
    event_type?: StringFilter<"AuthEvent"> | string
    ip_address?: StringNullableFilter<"AuthEvent"> | string | null
    user_agent?: StringNullableFilter<"AuthEvent"> | string | null
    created_at?: DateTimeFilter<"AuthEvent"> | Date | string
    additional_info?: JsonNullableFilter<"AuthEvent">
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
  }

  export type AuthEventOrderByWithRelationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    event_type?: SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    created_at?: SortOrder
    additional_info?: SortOrderInput | SortOrder
    app_user?: AppUserOrderByWithRelationInput
    _relevance?: AuthEventOrderByRelevanceInput
  }

  export type AuthEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuthEventWhereInput | AuthEventWhereInput[]
    OR?: AuthEventWhereInput[]
    NOT?: AuthEventWhereInput | AuthEventWhereInput[]
    app_user_id?: StringFilter<"AuthEvent"> | string
    event_type?: StringFilter<"AuthEvent"> | string
    ip_address?: StringNullableFilter<"AuthEvent"> | string | null
    user_agent?: StringNullableFilter<"AuthEvent"> | string | null
    created_at?: DateTimeFilter<"AuthEvent"> | Date | string
    additional_info?: JsonNullableFilter<"AuthEvent">
    app_user?: XOR<AppUserScalarRelationFilter, AppUserWhereInput>
  }, "id">

  export type AuthEventOrderByWithAggregationInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    event_type?: SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    created_at?: SortOrder
    additional_info?: SortOrderInput | SortOrder
    _count?: AuthEventCountOrderByAggregateInput
    _max?: AuthEventMaxOrderByAggregateInput
    _min?: AuthEventMinOrderByAggregateInput
  }

  export type AuthEventScalarWhereWithAggregatesInput = {
    AND?: AuthEventScalarWhereWithAggregatesInput | AuthEventScalarWhereWithAggregatesInput[]
    OR?: AuthEventScalarWhereWithAggregatesInput[]
    NOT?: AuthEventScalarWhereWithAggregatesInput | AuthEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuthEvent"> | string
    app_user_id?: StringWithAggregatesFilter<"AuthEvent"> | string
    event_type?: StringWithAggregatesFilter<"AuthEvent"> | string
    ip_address?: StringNullableWithAggregatesFilter<"AuthEvent"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"AuthEvent"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"AuthEvent"> | Date | string
    additional_info?: JsonNullableWithAggregatesFilter<"AuthEvent">
  }

  export type TestTypeWhereInput = {
    AND?: TestTypeWhereInput | TestTypeWhereInput[]
    OR?: TestTypeWhereInput[]
    NOT?: TestTypeWhereInput | TestTypeWhereInput[]
    id?: StringFilter<"TestType"> | string
    name?: StringFilter<"TestType"> | string
    description?: StringNullableFilter<"TestType"> | string | null
    api_key_id?: StringNullableFilter<"TestType"> | string | null
    created_at?: DateTimeFilter<"TestType"> | Date | string
    updated_at?: DateTimeFilter<"TestType"> | Date | string
    api_key?: XOR<ApiKeyNullableScalarRelationFilter, ApiKeyWhereInput> | null
    testSubjects?: TestSubjectListRelationFilter
    UserTestSelection?: UserTestSelectionListRelationFilter
  }

  export type TestTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    api_key_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    api_key?: ApiKeyOrderByWithRelationInput
    testSubjects?: TestSubjectOrderByRelationAggregateInput
    UserTestSelection?: UserTestSelectionOrderByRelationAggregateInput
    _relevance?: TestTypeOrderByRelevanceInput
  }

  export type TestTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_api_key_id?: TestTypeNameApi_key_idCompoundUniqueInput
    AND?: TestTypeWhereInput | TestTypeWhereInput[]
    OR?: TestTypeWhereInput[]
    NOT?: TestTypeWhereInput | TestTypeWhereInput[]
    name?: StringFilter<"TestType"> | string
    description?: StringNullableFilter<"TestType"> | string | null
    api_key_id?: StringNullableFilter<"TestType"> | string | null
    created_at?: DateTimeFilter<"TestType"> | Date | string
    updated_at?: DateTimeFilter<"TestType"> | Date | string
    api_key?: XOR<ApiKeyNullableScalarRelationFilter, ApiKeyWhereInput> | null
    testSubjects?: TestSubjectListRelationFilter
    UserTestSelection?: UserTestSelectionListRelationFilter
  }, "id" | "name_api_key_id">

  export type TestTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    api_key_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TestTypeCountOrderByAggregateInput
    _max?: TestTypeMaxOrderByAggregateInput
    _min?: TestTypeMinOrderByAggregateInput
  }

  export type TestTypeScalarWhereWithAggregatesInput = {
    AND?: TestTypeScalarWhereWithAggregatesInput | TestTypeScalarWhereWithAggregatesInput[]
    OR?: TestTypeScalarWhereWithAggregatesInput[]
    NOT?: TestTypeScalarWhereWithAggregatesInput | TestTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestType"> | string
    name?: StringWithAggregatesFilter<"TestType"> | string
    description?: StringNullableWithAggregatesFilter<"TestType"> | string | null
    api_key_id?: StringNullableWithAggregatesFilter<"TestType"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"TestType"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"TestType"> | Date | string
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    description?: StringFilter<"Subject"> | string
    slug_materia?: StringFilter<"Subject"> | string
    approximate_total_minutes?: IntFilter<"Subject"> | number
    total_questions?: IntFilter<"Subject"> | number
    order?: IntFilter<"Subject"> | number
    api_key_id?: StringNullableFilter<"Subject"> | string | null
    created_at?: DateTimeFilter<"Subject"> | Date | string
    updated_at?: DateTimeFilter<"Subject"> | Date | string
    api_key?: XOR<ApiKeyNullableScalarRelationFilter, ApiKeyWhereInput> | null
    subject_detail?: XOR<SubjectDetailNullableScalarRelationFilter, SubjectDetailWhereInput> | null
    subject_levels?: SubjectLevelListRelationFilter
    testSubjects?: TestSubjectListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug_materia?: SortOrder
    approximate_total_minutes?: SortOrder
    total_questions?: SortOrder
    order?: SortOrder
    api_key_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    api_key?: ApiKeyOrderByWithRelationInput
    subject_detail?: SubjectDetailOrderByWithRelationInput
    subject_levels?: SubjectLevelOrderByRelationAggregateInput
    testSubjects?: TestSubjectOrderByRelationAggregateInput
    _relevance?: SubjectOrderByRelevanceInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug_materia?: string
    name_api_key_id?: SubjectNameApi_key_idCompoundUniqueInput
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    description?: StringFilter<"Subject"> | string
    approximate_total_minutes?: IntFilter<"Subject"> | number
    total_questions?: IntFilter<"Subject"> | number
    order?: IntFilter<"Subject"> | number
    api_key_id?: StringNullableFilter<"Subject"> | string | null
    created_at?: DateTimeFilter<"Subject"> | Date | string
    updated_at?: DateTimeFilter<"Subject"> | Date | string
    api_key?: XOR<ApiKeyNullableScalarRelationFilter, ApiKeyWhereInput> | null
    subject_detail?: XOR<SubjectDetailNullableScalarRelationFilter, SubjectDetailWhereInput> | null
    subject_levels?: SubjectLevelListRelationFilter
    testSubjects?: TestSubjectListRelationFilter
  }, "id" | "slug_materia" | "name_api_key_id">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug_materia?: SortOrder
    approximate_total_minutes?: SortOrder
    total_questions?: SortOrder
    order?: SortOrder
    api_key_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subject"> | string
    name?: StringWithAggregatesFilter<"Subject"> | string
    description?: StringWithAggregatesFilter<"Subject"> | string
    slug_materia?: StringWithAggregatesFilter<"Subject"> | string
    approximate_total_minutes?: IntWithAggregatesFilter<"Subject"> | number
    total_questions?: IntWithAggregatesFilter<"Subject"> | number
    order?: IntWithAggregatesFilter<"Subject"> | number
    api_key_id?: StringNullableWithAggregatesFilter<"Subject"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
  }

  export type SubjectDetailWhereInput = {
    AND?: SubjectDetailWhereInput | SubjectDetailWhereInput[]
    OR?: SubjectDetailWhereInput[]
    NOT?: SubjectDetailWhereInput | SubjectDetailWhereInput[]
    id?: StringFilter<"SubjectDetail"> | string
    background_image_url?: StringNullableFilter<"SubjectDetail"> | string | null
    title?: StringFilter<"SubjectDetail"> | string
    title_color?: StringNullableFilter<"SubjectDetail"> | string | null
    subtitle?: StringNullableFilter<"SubjectDetail"> | string | null
    primary_color_hex?: StringNullableFilter<"SubjectDetail"> | string | null
    created_at?: DateTimeFilter<"SubjectDetail"> | Date | string
    updated_at?: DateTimeFilter<"SubjectDetail"> | Date | string
    subject_id?: StringFilter<"SubjectDetail"> | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type SubjectDetailOrderByWithRelationInput = {
    id?: SortOrder
    background_image_url?: SortOrderInput | SortOrder
    title?: SortOrder
    title_color?: SortOrderInput | SortOrder
    subtitle?: SortOrderInput | SortOrder
    primary_color_hex?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    _relevance?: SubjectDetailOrderByRelevanceInput
  }

  export type SubjectDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subject_id?: string
    AND?: SubjectDetailWhereInput | SubjectDetailWhereInput[]
    OR?: SubjectDetailWhereInput[]
    NOT?: SubjectDetailWhereInput | SubjectDetailWhereInput[]
    background_image_url?: StringNullableFilter<"SubjectDetail"> | string | null
    title?: StringFilter<"SubjectDetail"> | string
    title_color?: StringNullableFilter<"SubjectDetail"> | string | null
    subtitle?: StringNullableFilter<"SubjectDetail"> | string | null
    primary_color_hex?: StringNullableFilter<"SubjectDetail"> | string | null
    created_at?: DateTimeFilter<"SubjectDetail"> | Date | string
    updated_at?: DateTimeFilter<"SubjectDetail"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "id" | "subject_id">

  export type SubjectDetailOrderByWithAggregationInput = {
    id?: SortOrder
    background_image_url?: SortOrderInput | SortOrder
    title?: SortOrder
    title_color?: SortOrderInput | SortOrder
    subtitle?: SortOrderInput | SortOrder
    primary_color_hex?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
    _count?: SubjectDetailCountOrderByAggregateInput
    _max?: SubjectDetailMaxOrderByAggregateInput
    _min?: SubjectDetailMinOrderByAggregateInput
  }

  export type SubjectDetailScalarWhereWithAggregatesInput = {
    AND?: SubjectDetailScalarWhereWithAggregatesInput | SubjectDetailScalarWhereWithAggregatesInput[]
    OR?: SubjectDetailScalarWhereWithAggregatesInput[]
    NOT?: SubjectDetailScalarWhereWithAggregatesInput | SubjectDetailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubjectDetail"> | string
    background_image_url?: StringNullableWithAggregatesFilter<"SubjectDetail"> | string | null
    title?: StringWithAggregatesFilter<"SubjectDetail"> | string
    title_color?: StringNullableWithAggregatesFilter<"SubjectDetail"> | string | null
    subtitle?: StringNullableWithAggregatesFilter<"SubjectDetail"> | string | null
    primary_color_hex?: StringNullableWithAggregatesFilter<"SubjectDetail"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"SubjectDetail"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"SubjectDetail"> | Date | string
    subject_id?: StringWithAggregatesFilter<"SubjectDetail"> | string
  }

  export type SubjectLevelWhereInput = {
    AND?: SubjectLevelWhereInput | SubjectLevelWhereInput[]
    OR?: SubjectLevelWhereInput[]
    NOT?: SubjectLevelWhereInput | SubjectLevelWhereInput[]
    id?: StringFilter<"SubjectLevel"> | string
    reference_title?: StringNullableFilter<"SubjectLevel"> | string | null
    title?: StringFilter<"SubjectLevel"> | string
    order?: IntFilter<"SubjectLevel"> | number
    number_of_questions?: IntFilter<"SubjectLevel"> | number
    approximate_time_minutes?: IntFilter<"SubjectLevel"> | number
    created_at?: DateTimeFilter<"SubjectLevel"> | Date | string
    updated_at?: DateTimeFilter<"SubjectLevel"> | Date | string
    subject_id?: StringFilter<"SubjectLevel"> | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    questionnaires?: QuestionnaireListRelationFilter
  }

  export type SubjectLevelOrderByWithRelationInput = {
    id?: SortOrder
    reference_title?: SortOrderInput | SortOrder
    title?: SortOrder
    order?: SortOrder
    number_of_questions?: SortOrder
    approximate_time_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    questionnaires?: QuestionnaireOrderByRelationAggregateInput
    _relevance?: SubjectLevelOrderByRelevanceInput
  }

  export type SubjectLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubjectLevelWhereInput | SubjectLevelWhereInput[]
    OR?: SubjectLevelWhereInput[]
    NOT?: SubjectLevelWhereInput | SubjectLevelWhereInput[]
    reference_title?: StringNullableFilter<"SubjectLevel"> | string | null
    title?: StringFilter<"SubjectLevel"> | string
    order?: IntFilter<"SubjectLevel"> | number
    number_of_questions?: IntFilter<"SubjectLevel"> | number
    approximate_time_minutes?: IntFilter<"SubjectLevel"> | number
    created_at?: DateTimeFilter<"SubjectLevel"> | Date | string
    updated_at?: DateTimeFilter<"SubjectLevel"> | Date | string
    subject_id?: StringFilter<"SubjectLevel"> | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    questionnaires?: QuestionnaireListRelationFilter
  }, "id">

  export type SubjectLevelOrderByWithAggregationInput = {
    id?: SortOrder
    reference_title?: SortOrderInput | SortOrder
    title?: SortOrder
    order?: SortOrder
    number_of_questions?: SortOrder
    approximate_time_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
    _count?: SubjectLevelCountOrderByAggregateInput
    _avg?: SubjectLevelAvgOrderByAggregateInput
    _max?: SubjectLevelMaxOrderByAggregateInput
    _min?: SubjectLevelMinOrderByAggregateInput
    _sum?: SubjectLevelSumOrderByAggregateInput
  }

  export type SubjectLevelScalarWhereWithAggregatesInput = {
    AND?: SubjectLevelScalarWhereWithAggregatesInput | SubjectLevelScalarWhereWithAggregatesInput[]
    OR?: SubjectLevelScalarWhereWithAggregatesInput[]
    NOT?: SubjectLevelScalarWhereWithAggregatesInput | SubjectLevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubjectLevel"> | string
    reference_title?: StringNullableWithAggregatesFilter<"SubjectLevel"> | string | null
    title?: StringWithAggregatesFilter<"SubjectLevel"> | string
    order?: IntWithAggregatesFilter<"SubjectLevel"> | number
    number_of_questions?: IntWithAggregatesFilter<"SubjectLevel"> | number
    approximate_time_minutes?: IntWithAggregatesFilter<"SubjectLevel"> | number
    created_at?: DateTimeWithAggregatesFilter<"SubjectLevel"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"SubjectLevel"> | Date | string
    subject_id?: StringWithAggregatesFilter<"SubjectLevel"> | string
  }

  export type TestSubjectWhereInput = {
    AND?: TestSubjectWhereInput | TestSubjectWhereInput[]
    OR?: TestSubjectWhereInput[]
    NOT?: TestSubjectWhereInput | TestSubjectWhereInput[]
    test_type_id?: StringFilter<"TestSubject"> | string
    subject_id?: StringFilter<"TestSubject"> | string
    assigned_at?: DateTimeFilter<"TestSubject"> | Date | string
    subject_order_in_test?: IntNullableFilter<"TestSubject"> | number | null
    test_type?: XOR<TestTypeScalarRelationFilter, TestTypeWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type TestSubjectOrderByWithRelationInput = {
    test_type_id?: SortOrder
    subject_id?: SortOrder
    assigned_at?: SortOrder
    subject_order_in_test?: SortOrderInput | SortOrder
    test_type?: TestTypeOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
    _relevance?: TestSubjectOrderByRelevanceInput
  }

  export type TestSubjectWhereUniqueInput = Prisma.AtLeast<{
    test_type_id_subject_id?: TestSubjectTest_type_idSubject_idCompoundUniqueInput
    AND?: TestSubjectWhereInput | TestSubjectWhereInput[]
    OR?: TestSubjectWhereInput[]
    NOT?: TestSubjectWhereInput | TestSubjectWhereInput[]
    test_type_id?: StringFilter<"TestSubject"> | string
    subject_id?: StringFilter<"TestSubject"> | string
    assigned_at?: DateTimeFilter<"TestSubject"> | Date | string
    subject_order_in_test?: IntNullableFilter<"TestSubject"> | number | null
    test_type?: XOR<TestTypeScalarRelationFilter, TestTypeWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "test_type_id_subject_id">

  export type TestSubjectOrderByWithAggregationInput = {
    test_type_id?: SortOrder
    subject_id?: SortOrder
    assigned_at?: SortOrder
    subject_order_in_test?: SortOrderInput | SortOrder
    _count?: TestSubjectCountOrderByAggregateInput
    _avg?: TestSubjectAvgOrderByAggregateInput
    _max?: TestSubjectMaxOrderByAggregateInput
    _min?: TestSubjectMinOrderByAggregateInput
    _sum?: TestSubjectSumOrderByAggregateInput
  }

  export type TestSubjectScalarWhereWithAggregatesInput = {
    AND?: TestSubjectScalarWhereWithAggregatesInput | TestSubjectScalarWhereWithAggregatesInput[]
    OR?: TestSubjectScalarWhereWithAggregatesInput[]
    NOT?: TestSubjectScalarWhereWithAggregatesInput | TestSubjectScalarWhereWithAggregatesInput[]
    test_type_id?: StringWithAggregatesFilter<"TestSubject"> | string
    subject_id?: StringWithAggregatesFilter<"TestSubject"> | string
    assigned_at?: DateTimeWithAggregatesFilter<"TestSubject"> | Date | string
    subject_order_in_test?: IntNullableWithAggregatesFilter<"TestSubject"> | number | null
  }

  export type GlossaryCategoryWhereInput = {
    AND?: GlossaryCategoryWhereInput | GlossaryCategoryWhereInput[]
    OR?: GlossaryCategoryWhereInput[]
    NOT?: GlossaryCategoryWhereInput | GlossaryCategoryWhereInput[]
    id?: StringFilter<"GlossaryCategory"> | string
    name?: StringFilter<"GlossaryCategory"> | string
    description?: StringNullableFilter<"GlossaryCategory"> | string | null
    created_at?: DateTimeFilter<"GlossaryCategory"> | Date | string
    updated_at?: DateTimeFilter<"GlossaryCategory"> | Date | string
    active?: BoolFilter<"GlossaryCategory"> | boolean
    terms?: GlossaryTermListRelationFilter
  }

  export type GlossaryCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
    terms?: GlossaryTermOrderByRelationAggregateInput
    _relevance?: GlossaryCategoryOrderByRelevanceInput
  }

  export type GlossaryCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: GlossaryCategoryWhereInput | GlossaryCategoryWhereInput[]
    OR?: GlossaryCategoryWhereInput[]
    NOT?: GlossaryCategoryWhereInput | GlossaryCategoryWhereInput[]
    description?: StringNullableFilter<"GlossaryCategory"> | string | null
    created_at?: DateTimeFilter<"GlossaryCategory"> | Date | string
    updated_at?: DateTimeFilter<"GlossaryCategory"> | Date | string
    active?: BoolFilter<"GlossaryCategory"> | boolean
    terms?: GlossaryTermListRelationFilter
  }, "id" | "name">

  export type GlossaryCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
    _count?: GlossaryCategoryCountOrderByAggregateInput
    _max?: GlossaryCategoryMaxOrderByAggregateInput
    _min?: GlossaryCategoryMinOrderByAggregateInput
  }

  export type GlossaryCategoryScalarWhereWithAggregatesInput = {
    AND?: GlossaryCategoryScalarWhereWithAggregatesInput | GlossaryCategoryScalarWhereWithAggregatesInput[]
    OR?: GlossaryCategoryScalarWhereWithAggregatesInput[]
    NOT?: GlossaryCategoryScalarWhereWithAggregatesInput | GlossaryCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GlossaryCategory"> | string
    name?: StringWithAggregatesFilter<"GlossaryCategory"> | string
    description?: StringNullableWithAggregatesFilter<"GlossaryCategory"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"GlossaryCategory"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"GlossaryCategory"> | Date | string
    active?: BoolWithAggregatesFilter<"GlossaryCategory"> | boolean
  }

  export type GlossaryTermWhereInput = {
    AND?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    OR?: GlossaryTermWhereInput[]
    NOT?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    id?: StringFilter<"GlossaryTerm"> | string
    word?: StringFilter<"GlossaryTerm"> | string
    description?: StringFilter<"GlossaryTerm"> | string
    created_at?: DateTimeFilter<"GlossaryTerm"> | Date | string
    updated_at?: DateTimeFilter<"GlossaryTerm"> | Date | string
    active?: BoolFilter<"GlossaryTerm"> | boolean
    category_id?: StringFilter<"GlossaryTerm"> | string
    category?: XOR<GlossaryCategoryScalarRelationFilter, GlossaryCategoryWhereInput>
  }

  export type GlossaryTermOrderByWithRelationInput = {
    id?: SortOrder
    word?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
    category_id?: SortOrder
    category?: GlossaryCategoryOrderByWithRelationInput
    _relevance?: GlossaryTermOrderByRelevanceInput
  }

  export type GlossaryTermWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    word?: string
    AND?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    OR?: GlossaryTermWhereInput[]
    NOT?: GlossaryTermWhereInput | GlossaryTermWhereInput[]
    description?: StringFilter<"GlossaryTerm"> | string
    created_at?: DateTimeFilter<"GlossaryTerm"> | Date | string
    updated_at?: DateTimeFilter<"GlossaryTerm"> | Date | string
    active?: BoolFilter<"GlossaryTerm"> | boolean
    category_id?: StringFilter<"GlossaryTerm"> | string
    category?: XOR<GlossaryCategoryScalarRelationFilter, GlossaryCategoryWhereInput>
  }, "id" | "word">

  export type GlossaryTermOrderByWithAggregationInput = {
    id?: SortOrder
    word?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
    category_id?: SortOrder
    _count?: GlossaryTermCountOrderByAggregateInput
    _max?: GlossaryTermMaxOrderByAggregateInput
    _min?: GlossaryTermMinOrderByAggregateInput
  }

  export type GlossaryTermScalarWhereWithAggregatesInput = {
    AND?: GlossaryTermScalarWhereWithAggregatesInput | GlossaryTermScalarWhereWithAggregatesInput[]
    OR?: GlossaryTermScalarWhereWithAggregatesInput[]
    NOT?: GlossaryTermScalarWhereWithAggregatesInput | GlossaryTermScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GlossaryTerm"> | string
    word?: StringWithAggregatesFilter<"GlossaryTerm"> | string
    description?: StringWithAggregatesFilter<"GlossaryTerm"> | string
    created_at?: DateTimeWithAggregatesFilter<"GlossaryTerm"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"GlossaryTerm"> | Date | string
    active?: BoolWithAggregatesFilter<"GlossaryTerm"> | boolean
    category_id?: StringWithAggregatesFilter<"GlossaryTerm"> | string
  }

  export type QuestionnaireWhereInput = {
    AND?: QuestionnaireWhereInput | QuestionnaireWhereInput[]
    OR?: QuestionnaireWhereInput[]
    NOT?: QuestionnaireWhereInput | QuestionnaireWhereInput[]
    id?: StringFilter<"Questionnaire"> | string
    name?: StringFilter<"Questionnaire"> | string
    description?: StringNullableFilter<"Questionnaire"> | string | null
    order?: IntNullableFilter<"Questionnaire"> | number | null
    published?: BoolFilter<"Questionnaire"> | boolean
    subject_level_id?: StringFilter<"Questionnaire"> | string
    created_at?: DateTimeFilter<"Questionnaire"> | Date | string
    updated_at?: DateTimeFilter<"Questionnaire"> | Date | string
    subjectLevel?: XOR<SubjectLevelScalarRelationFilter, SubjectLevelWhereInput>
    questions?: QuestionListRelationFilter
    userAttempts?: UserQuestionnaireAttemptListRelationFilter
  }

  export type QuestionnaireOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    published?: SortOrder
    subject_level_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subjectLevel?: SubjectLevelOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
    userAttempts?: UserQuestionnaireAttemptOrderByRelationAggregateInput
    _relevance?: QuestionnaireOrderByRelevanceInput
  }

  export type QuestionnaireWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionnaireWhereInput | QuestionnaireWhereInput[]
    OR?: QuestionnaireWhereInput[]
    NOT?: QuestionnaireWhereInput | QuestionnaireWhereInput[]
    name?: StringFilter<"Questionnaire"> | string
    description?: StringNullableFilter<"Questionnaire"> | string | null
    order?: IntNullableFilter<"Questionnaire"> | number | null
    published?: BoolFilter<"Questionnaire"> | boolean
    subject_level_id?: StringFilter<"Questionnaire"> | string
    created_at?: DateTimeFilter<"Questionnaire"> | Date | string
    updated_at?: DateTimeFilter<"Questionnaire"> | Date | string
    subjectLevel?: XOR<SubjectLevelScalarRelationFilter, SubjectLevelWhereInput>
    questions?: QuestionListRelationFilter
    userAttempts?: UserQuestionnaireAttemptListRelationFilter
  }, "id">

  export type QuestionnaireOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    published?: SortOrder
    subject_level_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: QuestionnaireCountOrderByAggregateInput
    _avg?: QuestionnaireAvgOrderByAggregateInput
    _max?: QuestionnaireMaxOrderByAggregateInput
    _min?: QuestionnaireMinOrderByAggregateInput
    _sum?: QuestionnaireSumOrderByAggregateInput
  }

  export type QuestionnaireScalarWhereWithAggregatesInput = {
    AND?: QuestionnaireScalarWhereWithAggregatesInput | QuestionnaireScalarWhereWithAggregatesInput[]
    OR?: QuestionnaireScalarWhereWithAggregatesInput[]
    NOT?: QuestionnaireScalarWhereWithAggregatesInput | QuestionnaireScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Questionnaire"> | string
    name?: StringWithAggregatesFilter<"Questionnaire"> | string
    description?: StringNullableWithAggregatesFilter<"Questionnaire"> | string | null
    order?: IntNullableWithAggregatesFilter<"Questionnaire"> | number | null
    published?: BoolWithAggregatesFilter<"Questionnaire"> | boolean
    subject_level_id?: StringWithAggregatesFilter<"Questionnaire"> | string
    created_at?: DateTimeWithAggregatesFilter<"Questionnaire"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Questionnaire"> | Date | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    question_type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    explanation?: StringNullableFilter<"Question"> | string | null
    extra_info?: StringNullableFilter<"Question"> | string | null
    points?: IntFilter<"Question"> | number
    order?: IntNullableFilter<"Question"> | number | null
    difficulty?: IntNullableFilter<"Question"> | number | null
    tags?: StringNullableFilter<"Question"> | string | null
    active?: BoolFilter<"Question"> | boolean
    questionnaire_id?: StringFilter<"Question"> | string
    created_at?: DateTimeFilter<"Question"> | Date | string
    updated_at?: DateTimeFilter<"Question"> | Date | string
    questionnaire?: XOR<QuestionnaireScalarRelationFilter, QuestionnaireWhereInput>
    answerOptions?: AnswerOptionListRelationFilter
    userAnswers?: UserQuestionAnswerListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    question_type?: SortOrder
    explanation?: SortOrderInput | SortOrder
    extra_info?: SortOrderInput | SortOrder
    points?: SortOrder
    order?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    active?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    questionnaire?: QuestionnaireOrderByWithRelationInput
    answerOptions?: AnswerOptionOrderByRelationAggregateInput
    userAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    _relevance?: QuestionOrderByRelevanceInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    text?: StringFilter<"Question"> | string
    question_type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    explanation?: StringNullableFilter<"Question"> | string | null
    extra_info?: StringNullableFilter<"Question"> | string | null
    points?: IntFilter<"Question"> | number
    order?: IntNullableFilter<"Question"> | number | null
    difficulty?: IntNullableFilter<"Question"> | number | null
    tags?: StringNullableFilter<"Question"> | string | null
    active?: BoolFilter<"Question"> | boolean
    questionnaire_id?: StringFilter<"Question"> | string
    created_at?: DateTimeFilter<"Question"> | Date | string
    updated_at?: DateTimeFilter<"Question"> | Date | string
    questionnaire?: XOR<QuestionnaireScalarRelationFilter, QuestionnaireWhereInput>
    answerOptions?: AnswerOptionListRelationFilter
    userAnswers?: UserQuestionAnswerListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    question_type?: SortOrder
    explanation?: SortOrderInput | SortOrder
    extra_info?: SortOrderInput | SortOrder
    points?: SortOrder
    order?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    active?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    text?: StringWithAggregatesFilter<"Question"> | string
    question_type?: EnumQuestionTypeWithAggregatesFilter<"Question"> | $Enums.QuestionType
    explanation?: StringNullableWithAggregatesFilter<"Question"> | string | null
    extra_info?: StringNullableWithAggregatesFilter<"Question"> | string | null
    points?: IntWithAggregatesFilter<"Question"> | number
    order?: IntNullableWithAggregatesFilter<"Question"> | number | null
    difficulty?: IntNullableWithAggregatesFilter<"Question"> | number | null
    tags?: StringNullableWithAggregatesFilter<"Question"> | string | null
    active?: BoolWithAggregatesFilter<"Question"> | boolean
    questionnaire_id?: StringWithAggregatesFilter<"Question"> | string
    created_at?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type AnswerOptionWhereInput = {
    AND?: AnswerOptionWhereInput | AnswerOptionWhereInput[]
    OR?: AnswerOptionWhereInput[]
    NOT?: AnswerOptionWhereInput | AnswerOptionWhereInput[]
    id?: StringFilter<"AnswerOption"> | string
    text?: StringFilter<"AnswerOption"> | string
    is_correct?: BoolFilter<"AnswerOption"> | boolean
    order?: IntNullableFilter<"AnswerOption"> | number | null
    question_id?: StringFilter<"AnswerOption"> | string
    created_at?: DateTimeFilter<"AnswerOption"> | Date | string
    updated_at?: DateTimeFilter<"AnswerOption"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    userAnswers?: UserQuestionAnswerListRelationFilter
  }

  export type AnswerOptionOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
    order?: SortOrderInput | SortOrder
    question_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    question?: QuestionOrderByWithRelationInput
    userAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    _relevance?: AnswerOptionOrderByRelevanceInput
  }

  export type AnswerOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnswerOptionWhereInput | AnswerOptionWhereInput[]
    OR?: AnswerOptionWhereInput[]
    NOT?: AnswerOptionWhereInput | AnswerOptionWhereInput[]
    text?: StringFilter<"AnswerOption"> | string
    is_correct?: BoolFilter<"AnswerOption"> | boolean
    order?: IntNullableFilter<"AnswerOption"> | number | null
    question_id?: StringFilter<"AnswerOption"> | string
    created_at?: DateTimeFilter<"AnswerOption"> | Date | string
    updated_at?: DateTimeFilter<"AnswerOption"> | Date | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    userAnswers?: UserQuestionAnswerListRelationFilter
  }, "id">

  export type AnswerOptionOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
    order?: SortOrderInput | SortOrder
    question_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AnswerOptionCountOrderByAggregateInput
    _avg?: AnswerOptionAvgOrderByAggregateInput
    _max?: AnswerOptionMaxOrderByAggregateInput
    _min?: AnswerOptionMinOrderByAggregateInput
    _sum?: AnswerOptionSumOrderByAggregateInput
  }

  export type AnswerOptionScalarWhereWithAggregatesInput = {
    AND?: AnswerOptionScalarWhereWithAggregatesInput | AnswerOptionScalarWhereWithAggregatesInput[]
    OR?: AnswerOptionScalarWhereWithAggregatesInput[]
    NOT?: AnswerOptionScalarWhereWithAggregatesInput | AnswerOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AnswerOption"> | string
    text?: StringWithAggregatesFilter<"AnswerOption"> | string
    is_correct?: BoolWithAggregatesFilter<"AnswerOption"> | boolean
    order?: IntNullableWithAggregatesFilter<"AnswerOption"> | number | null
    question_id?: StringWithAggregatesFilter<"AnswerOption"> | string
    created_at?: DateTimeWithAggregatesFilter<"AnswerOption"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"AnswerOption"> | Date | string
  }

  export type UserQuestionnaireAttemptWhereInput = {
    AND?: UserQuestionnaireAttemptWhereInput | UserQuestionnaireAttemptWhereInput[]
    OR?: UserQuestionnaireAttemptWhereInput[]
    NOT?: UserQuestionnaireAttemptWhereInput | UserQuestionnaireAttemptWhereInput[]
    id?: StringFilter<"UserQuestionnaireAttempt"> | string
    score?: FloatNullableFilter<"UserQuestionnaireAttempt"> | number | null
    status?: EnumAttemptStatusFilter<"UserQuestionnaireAttempt"> | $Enums.AttemptStatus
    started_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    completed_at?: DateTimeNullableFilter<"UserQuestionnaireAttempt"> | Date | string | null
    time_spent_seconds?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    correct_answers_count?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    total_questions_count?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    attempt_number?: IntFilter<"UserQuestionnaireAttempt"> | number
    user_id?: StringFilter<"UserQuestionnaireAttempt"> | string
    questionnaire_id?: StringFilter<"UserQuestionnaireAttempt"> | string
    created_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    updated_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionnaire?: XOR<QuestionnaireScalarRelationFilter, QuestionnaireWhereInput>
    answers?: UserQuestionAnswerListRelationFilter
  }

  export type UserQuestionnaireAttemptOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrderInput | SortOrder
    status?: SortOrder
    started_at?: SortOrder
    completed_at?: SortOrderInput | SortOrder
    time_spent_seconds?: SortOrderInput | SortOrder
    correct_answers_count?: SortOrderInput | SortOrder
    total_questions_count?: SortOrderInput | SortOrder
    attempt_number?: SortOrder
    user_id?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    questionnaire?: QuestionnaireOrderByWithRelationInput
    answers?: UserQuestionAnswerOrderByRelationAggregateInput
    _relevance?: UserQuestionnaireAttemptOrderByRelevanceInput
  }

  export type UserQuestionnaireAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserQuestionnaireAttemptWhereInput | UserQuestionnaireAttemptWhereInput[]
    OR?: UserQuestionnaireAttemptWhereInput[]
    NOT?: UserQuestionnaireAttemptWhereInput | UserQuestionnaireAttemptWhereInput[]
    score?: FloatNullableFilter<"UserQuestionnaireAttempt"> | number | null
    status?: EnumAttemptStatusFilter<"UserQuestionnaireAttempt"> | $Enums.AttemptStatus
    started_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    completed_at?: DateTimeNullableFilter<"UserQuestionnaireAttempt"> | Date | string | null
    time_spent_seconds?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    correct_answers_count?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    total_questions_count?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    attempt_number?: IntFilter<"UserQuestionnaireAttempt"> | number
    user_id?: StringFilter<"UserQuestionnaireAttempt"> | string
    questionnaire_id?: StringFilter<"UserQuestionnaireAttempt"> | string
    created_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    updated_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionnaire?: XOR<QuestionnaireScalarRelationFilter, QuestionnaireWhereInput>
    answers?: UserQuestionAnswerListRelationFilter
  }, "id">

  export type UserQuestionnaireAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrderInput | SortOrder
    status?: SortOrder
    started_at?: SortOrder
    completed_at?: SortOrderInput | SortOrder
    time_spent_seconds?: SortOrderInput | SortOrder
    correct_answers_count?: SortOrderInput | SortOrder
    total_questions_count?: SortOrderInput | SortOrder
    attempt_number?: SortOrder
    user_id?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserQuestionnaireAttemptCountOrderByAggregateInput
    _avg?: UserQuestionnaireAttemptAvgOrderByAggregateInput
    _max?: UserQuestionnaireAttemptMaxOrderByAggregateInput
    _min?: UserQuestionnaireAttemptMinOrderByAggregateInput
    _sum?: UserQuestionnaireAttemptSumOrderByAggregateInput
  }

  export type UserQuestionnaireAttemptScalarWhereWithAggregatesInput = {
    AND?: UserQuestionnaireAttemptScalarWhereWithAggregatesInput | UserQuestionnaireAttemptScalarWhereWithAggregatesInput[]
    OR?: UserQuestionnaireAttemptScalarWhereWithAggregatesInput[]
    NOT?: UserQuestionnaireAttemptScalarWhereWithAggregatesInput | UserQuestionnaireAttemptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserQuestionnaireAttempt"> | string
    score?: FloatNullableWithAggregatesFilter<"UserQuestionnaireAttempt"> | number | null
    status?: EnumAttemptStatusWithAggregatesFilter<"UserQuestionnaireAttempt"> | $Enums.AttemptStatus
    started_at?: DateTimeWithAggregatesFilter<"UserQuestionnaireAttempt"> | Date | string
    completed_at?: DateTimeNullableWithAggregatesFilter<"UserQuestionnaireAttempt"> | Date | string | null
    time_spent_seconds?: IntNullableWithAggregatesFilter<"UserQuestionnaireAttempt"> | number | null
    correct_answers_count?: IntNullableWithAggregatesFilter<"UserQuestionnaireAttempt"> | number | null
    total_questions_count?: IntNullableWithAggregatesFilter<"UserQuestionnaireAttempt"> | number | null
    attempt_number?: IntWithAggregatesFilter<"UserQuestionnaireAttempt"> | number
    user_id?: StringWithAggregatesFilter<"UserQuestionnaireAttempt"> | string
    questionnaire_id?: StringWithAggregatesFilter<"UserQuestionnaireAttempt"> | string
    created_at?: DateTimeWithAggregatesFilter<"UserQuestionnaireAttempt"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"UserQuestionnaireAttempt"> | Date | string
  }

  export type UserQuestionAnswerWhereInput = {
    AND?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    OR?: UserQuestionAnswerWhereInput[]
    NOT?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    id?: StringFilter<"UserQuestionAnswer"> | string
    is_correct?: BoolNullableFilter<"UserQuestionAnswer"> | boolean | null
    answered_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    time_to_answer_seconds?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    points_earned?: FloatNullableFilter<"UserQuestionAnswer"> | number | null
    user_id?: StringFilter<"UserQuestionAnswer"> | string
    question_id?: StringFilter<"UserQuestionAnswer"> | string
    selected_answer_option_id?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    answered_text?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    user_questionnaire_attempt_id?: StringFilter<"UserQuestionAnswer"> | string
    created_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    updated_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    selectedAnswerOption?: XOR<AnswerOptionNullableScalarRelationFilter, AnswerOptionWhereInput> | null
    userQuestionnaireAttempt?: XOR<UserQuestionnaireAttemptScalarRelationFilter, UserQuestionnaireAttemptWhereInput>
  }

  export type UserQuestionAnswerOrderByWithRelationInput = {
    id?: SortOrder
    is_correct?: SortOrderInput | SortOrder
    answered_at?: SortOrder
    time_to_answer_seconds?: SortOrderInput | SortOrder
    points_earned?: SortOrderInput | SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_answer_option_id?: SortOrderInput | SortOrder
    answered_text?: SortOrderInput | SortOrder
    user_questionnaire_attempt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
    selectedAnswerOption?: AnswerOptionOrderByWithRelationInput
    userQuestionnaireAttempt?: UserQuestionnaireAttemptOrderByWithRelationInput
    _relevance?: UserQuestionAnswerOrderByRelevanceInput
  }

  export type UserQuestionAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_questionnaire_attempt_id_question_id?: UserQuestionAnswerUser_questionnaire_attempt_idQuestion_idCompoundUniqueInput
    AND?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    OR?: UserQuestionAnswerWhereInput[]
    NOT?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    is_correct?: BoolNullableFilter<"UserQuestionAnswer"> | boolean | null
    answered_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    time_to_answer_seconds?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    points_earned?: FloatNullableFilter<"UserQuestionAnswer"> | number | null
    user_id?: StringFilter<"UserQuestionAnswer"> | string
    question_id?: StringFilter<"UserQuestionAnswer"> | string
    selected_answer_option_id?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    answered_text?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    user_questionnaire_attempt_id?: StringFilter<"UserQuestionAnswer"> | string
    created_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    updated_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    selectedAnswerOption?: XOR<AnswerOptionNullableScalarRelationFilter, AnswerOptionWhereInput> | null
    userQuestionnaireAttempt?: XOR<UserQuestionnaireAttemptScalarRelationFilter, UserQuestionnaireAttemptWhereInput>
  }, "id" | "user_questionnaire_attempt_id_question_id">

  export type UserQuestionAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    is_correct?: SortOrderInput | SortOrder
    answered_at?: SortOrder
    time_to_answer_seconds?: SortOrderInput | SortOrder
    points_earned?: SortOrderInput | SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_answer_option_id?: SortOrderInput | SortOrder
    answered_text?: SortOrderInput | SortOrder
    user_questionnaire_attempt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserQuestionAnswerCountOrderByAggregateInput
    _avg?: UserQuestionAnswerAvgOrderByAggregateInput
    _max?: UserQuestionAnswerMaxOrderByAggregateInput
    _min?: UserQuestionAnswerMinOrderByAggregateInput
    _sum?: UserQuestionAnswerSumOrderByAggregateInput
  }

  export type UserQuestionAnswerScalarWhereWithAggregatesInput = {
    AND?: UserQuestionAnswerScalarWhereWithAggregatesInput | UserQuestionAnswerScalarWhereWithAggregatesInput[]
    OR?: UserQuestionAnswerScalarWhereWithAggregatesInput[]
    NOT?: UserQuestionAnswerScalarWhereWithAggregatesInput | UserQuestionAnswerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserQuestionAnswer"> | string
    is_correct?: BoolNullableWithAggregatesFilter<"UserQuestionAnswer"> | boolean | null
    answered_at?: DateTimeWithAggregatesFilter<"UserQuestionAnswer"> | Date | string
    time_to_answer_seconds?: IntNullableWithAggregatesFilter<"UserQuestionAnswer"> | number | null
    points_earned?: FloatNullableWithAggregatesFilter<"UserQuestionAnswer"> | number | null
    user_id?: StringWithAggregatesFilter<"UserQuestionAnswer"> | string
    question_id?: StringWithAggregatesFilter<"UserQuestionAnswer"> | string
    selected_answer_option_id?: StringNullableWithAggregatesFilter<"UserQuestionAnswer"> | string | null
    answered_text?: StringNullableWithAggregatesFilter<"UserQuestionAnswer"> | string | null
    user_questionnaire_attempt_id?: StringWithAggregatesFilter<"UserQuestionAnswer"> | string
    created_at?: DateTimeWithAggregatesFilter<"UserQuestionAnswer"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"UserQuestionAnswer"> | Date | string
  }

  export type UserTestSelectionWhereInput = {
    AND?: UserTestSelectionWhereInput | UserTestSelectionWhereInput[]
    OR?: UserTestSelectionWhereInput[]
    NOT?: UserTestSelectionWhereInput | UserTestSelectionWhereInput[]
    id?: StringFilter<"UserTestSelection"> | string
    is_active?: BoolFilter<"UserTestSelection"> | boolean
    selected_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    user_id?: StringFilter<"UserTestSelection"> | string
    test_type_id?: StringFilter<"UserTestSelection"> | string
    created_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    updated_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    testType?: XOR<TestTypeScalarRelationFilter, TestTypeWhereInput>
  }

  export type UserTestSelectionOrderByWithRelationInput = {
    id?: SortOrder
    is_active?: SortOrder
    selected_at?: SortOrder
    user_id?: SortOrder
    test_type_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    testType?: TestTypeOrderByWithRelationInput
    _relevance?: UserTestSelectionOrderByRelevanceInput
  }

  export type UserTestSelectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id_test_type_id?: UserTestSelectionUser_idTest_type_idCompoundUniqueInput
    AND?: UserTestSelectionWhereInput | UserTestSelectionWhereInput[]
    OR?: UserTestSelectionWhereInput[]
    NOT?: UserTestSelectionWhereInput | UserTestSelectionWhereInput[]
    is_active?: BoolFilter<"UserTestSelection"> | boolean
    selected_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    user_id?: StringFilter<"UserTestSelection"> | string
    test_type_id?: StringFilter<"UserTestSelection"> | string
    created_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    updated_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    testType?: XOR<TestTypeScalarRelationFilter, TestTypeWhereInput>
  }, "id" | "user_id_test_type_id">

  export type UserTestSelectionOrderByWithAggregationInput = {
    id?: SortOrder
    is_active?: SortOrder
    selected_at?: SortOrder
    user_id?: SortOrder
    test_type_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserTestSelectionCountOrderByAggregateInput
    _max?: UserTestSelectionMaxOrderByAggregateInput
    _min?: UserTestSelectionMinOrderByAggregateInput
  }

  export type UserTestSelectionScalarWhereWithAggregatesInput = {
    AND?: UserTestSelectionScalarWhereWithAggregatesInput | UserTestSelectionScalarWhereWithAggregatesInput[]
    OR?: UserTestSelectionScalarWhereWithAggregatesInput[]
    NOT?: UserTestSelectionScalarWhereWithAggregatesInput | UserTestSelectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserTestSelection"> | string
    is_active?: BoolWithAggregatesFilter<"UserTestSelection"> | boolean
    selected_at?: DateTimeWithAggregatesFilter<"UserTestSelection"> | Date | string
    user_id?: StringWithAggregatesFilter<"UserTestSelection"> | string
    test_type_id?: StringWithAggregatesFilter<"UserTestSelection"> | string
    created_at?: DateTimeWithAggregatesFilter<"UserTestSelection"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"UserTestSelection"> | Date | string
  }

  export type AppUserCreateInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyCreateNestedManyWithoutApp_userInput
    app_sessions?: AppSessionCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetCreateNestedOneWithoutApp_userInput
    auth_events?: AuthEventCreateNestedManyWithoutApp_userInput
  }

  export type AppUserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyUncheckedCreateNestedManyWithoutApp_userInput
    app_sessions?: AppSessionUncheckedCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetUncheckedCreateNestedOneWithoutApp_userInput
    auth_events?: AuthEventUncheckedCreateNestedManyWithoutApp_userInput
  }

  export type AppUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUpdateManyWithoutApp_userNestedInput
    app_sessions?: AppSessionUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUpdateOneWithoutApp_userNestedInput
    auth_events?: AuthEventUpdateManyWithoutApp_userNestedInput
  }

  export type AppUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUncheckedUpdateManyWithoutApp_userNestedInput
    app_sessions?: AppSessionUncheckedUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUncheckedUpdateOneWithoutApp_userNestedInput
    auth_events?: AuthEventUncheckedUpdateManyWithoutApp_userNestedInput
  }

  export type AppUserCreateManyInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
  }

  export type AppUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyCreateInput = {
    id?: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    app_user: AppUserCreateNestedOneWithoutApi_keysInput
    users?: UserCreateNestedManyWithoutApi_keyInput
    test_types?: TestTypeCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyUncheckedCreateInput = {
    id?: string
    app_user_id: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutApi_keyInput
    test_types?: TestTypeUncheckedCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    app_user?: AppUserUpdateOneRequiredWithoutApi_keysNestedInput
    users?: UserUpdateManyWithoutApi_keyNestedInput
    test_types?: TestTypeUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUpdateManyWithoutApi_keyNestedInput
  }

  export type ApiKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutApi_keyNestedInput
    test_types?: TestTypeUncheckedUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutApi_keyNestedInput
  }

  export type ApiKeyCreateManyInput = {
    id?: string
    app_user_id: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
  }

  export type ApiKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppSessionCreateInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
    app_user: AppUserCreateNestedOneWithoutApp_sessionsInput
  }

  export type AppSessionUncheckedCreateInput = {
    id?: string
    app_user_id: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type AppSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    app_user?: AppUserUpdateOneRequiredWithoutApp_sessionsNestedInput
  }

  export type AppSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppSessionCreateManyInput = {
    id?: string
    app_user_id: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type AppSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    api_key: ApiKeyCreateNestedOneWithoutUsersInput
    accounts?: UserAccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogUncheckedCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: ApiKeyUpdateOneRequiredWithoutUsersNestedInput
    accounts?: UserAccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUncheckedUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id?: string
    name: string
    api_key: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    user_accounts?: UserAccountCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    name: string
    api_key: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    user_accounts?: UserAccountUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    api_key?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_accounts?: UserAccountUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    api_key?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_accounts?: UserAccountUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    name: string
    api_key: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    api_key?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    api_key?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAccountCreateInput = {
    id?: string
    created_at?: Date | string
    created_by?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
    account: AccountCreateNestedOneWithoutUser_accountsInput
  }

  export type UserAccountUncheckedCreateInput = {
    id?: string
    user_id: string
    account_id: string
    created_at?: Date | string
    created_by?: string | null
  }

  export type UserAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
    account?: AccountUpdateOneRequiredWithoutUser_accountsNestedInput
  }

  export type UserAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAccountCreateManyInput = {
    id?: string
    user_id: string
    account_id: string
    created_at?: Date | string
    created_by?: string | null
  }

  export type UserAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    user_id: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    user_id: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthLogCreateInput = {
    id?: string
    event_type: $Enums.AuthEventType
    status: $Enums.AuthEventStatus
    ip_address?: string | null
    user_agent?: string | null
    details?: string | null
    created_at?: Date | string
    user?: UserCreateNestedOneWithoutAuth_logsInput
  }

  export type AuthLogUncheckedCreateInput = {
    id?: string
    user_id?: string | null
    event_type: $Enums.AuthEventType
    status: $Enums.AuthEventStatus
    ip_address?: string | null
    user_agent?: string | null
    details?: string | null
    created_at?: Date | string
  }

  export type AuthLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: EnumAuthEventTypeFieldUpdateOperationsInput | $Enums.AuthEventType
    status?: EnumAuthEventStatusFieldUpdateOperationsInput | $Enums.AuthEventStatus
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuth_logsNestedInput
  }

  export type AuthLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    event_type?: EnumAuthEventTypeFieldUpdateOperationsInput | $Enums.AuthEventType
    status?: EnumAuthEventStatusFieldUpdateOperationsInput | $Enums.AuthEventStatus
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogCreateManyInput = {
    id?: string
    user_id?: string | null
    event_type: $Enums.AuthEventType
    status: $Enums.AuthEventStatus
    ip_address?: string | null
    user_agent?: string | null
    details?: string | null
    created_at?: Date | string
  }

  export type AuthLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: EnumAuthEventTypeFieldUpdateOperationsInput | $Enums.AuthEventType
    status?: EnumAuthEventStatusFieldUpdateOperationsInput | $Enums.AuthEventStatus
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    event_type?: EnumAuthEventTypeFieldUpdateOperationsInput | $Enums.AuthEventType
    status?: EnumAuthEventStatusFieldUpdateOperationsInput | $Enums.AuthEventStatus
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationCreateInput = {
    id?: string
    email: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
  }

  export type EmailVerificationUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
  }

  export type EmailVerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationCreateManyInput = {
    id?: string
    email: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
  }

  export type EmailVerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateInput = {
    id?: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    used?: boolean
    app_user: AppUserCreateNestedOneWithoutPassword_resetsInput
  }

  export type PasswordResetUncheckedCreateInput = {
    id?: string
    app_user_id: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    used?: boolean
  }

  export type PasswordResetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    app_user?: AppUserUpdateOneRequiredWithoutPassword_resetsNestedInput
  }

  export type PasswordResetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordResetCreateManyInput = {
    id?: string
    app_user_id: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    used?: boolean
  }

  export type PasswordResetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordResetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AuthEventCreateInput = {
    id?: string
    event_type: string
    ip_address?: string | null
    user_agent?: string | null
    created_at?: Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
    app_user: AppUserCreateNestedOneWithoutAuth_eventsInput
  }

  export type AuthEventUncheckedCreateInput = {
    id?: string
    app_user_id: string
    event_type: string
    ip_address?: string | null
    user_agent?: string | null
    created_at?: Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
    app_user?: AppUserUpdateOneRequiredWithoutAuth_eventsNestedInput
  }

  export type AuthEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventCreateManyInput = {
    id?: string
    app_user_id: string
    event_type: string
    ip_address?: string | null
    user_agent?: string | null
    created_at?: Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TestTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    api_key?: ApiKeyCreateNestedOneWithoutTest_typesInput
    testSubjects?: TestSubjectCreateNestedManyWithoutTest_typeInput
    UserTestSelection?: UserTestSelectionCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    testSubjects?: TestSubjectUncheckedCreateNestedManyWithoutTest_typeInput
    UserTestSelection?: UserTestSelectionUncheckedCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    api_key?: ApiKeyUpdateOneWithoutTest_typesNestedInput
    testSubjects?: TestSubjectUpdateManyWithoutTest_typeNestedInput
    UserTestSelection?: UserTestSelectionUpdateManyWithoutTestTypeNestedInput
  }

  export type TestTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    testSubjects?: TestSubjectUncheckedUpdateManyWithoutTest_typeNestedInput
    UserTestSelection?: UserTestSelectionUncheckedUpdateManyWithoutTestTypeNestedInput
  }

  export type TestTypeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TestTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    created_at?: Date | string
    updated_at?: Date | string
    api_key?: ApiKeyCreateNestedOneWithoutSubjectsInput
    subject_detail?: SubjectDetailCreateNestedOneWithoutSubjectInput
    subject_levels?: SubjectLevelCreateNestedManyWithoutSubjectInput
    testSubjects?: TestSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subject_detail?: SubjectDetailUncheckedCreateNestedOneWithoutSubjectInput
    subject_levels?: SubjectLevelUncheckedCreateNestedManyWithoutSubjectInput
    testSubjects?: TestSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    api_key?: ApiKeyUpdateOneWithoutSubjectsNestedInput
    subject_detail?: SubjectDetailUpdateOneWithoutSubjectNestedInput
    subject_levels?: SubjectLevelUpdateManyWithoutSubjectNestedInput
    testSubjects?: TestSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_detail?: SubjectDetailUncheckedUpdateOneWithoutSubjectNestedInput
    subject_levels?: SubjectLevelUncheckedUpdateManyWithoutSubjectNestedInput
    testSubjects?: TestSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectDetailCreateInput = {
    id?: string
    background_image_url?: string | null
    title: string
    title_color?: string | null
    subtitle?: string | null
    primary_color_hex?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subject: SubjectCreateNestedOneWithoutSubject_detailInput
  }

  export type SubjectDetailUncheckedCreateInput = {
    id?: string
    background_image_url?: string | null
    title: string
    title_color?: string | null
    subtitle?: string | null
    primary_color_hex?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subject_id: string
  }

  export type SubjectDetailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    background_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    title_color?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    primary_color_hex?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutSubject_detailNestedInput
  }

  export type SubjectDetailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    background_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    title_color?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    primary_color_hex?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_id?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectDetailCreateManyInput = {
    id?: string
    background_image_url?: string | null
    title: string
    title_color?: string | null
    subtitle?: string | null
    primary_color_hex?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subject_id: string
  }

  export type SubjectDetailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    background_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    title_color?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    primary_color_hex?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectDetailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    background_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    title_color?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    primary_color_hex?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_id?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectLevelCreateInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
    subject: SubjectCreateNestedOneWithoutSubject_levelsInput
    questionnaires?: QuestionnaireCreateNestedManyWithoutSubjectLevelInput
  }

  export type SubjectLevelUncheckedCreateInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
    subject_id: string
    questionnaires?: QuestionnaireUncheckedCreateNestedManyWithoutSubjectLevelInput
  }

  export type SubjectLevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutSubject_levelsNestedInput
    questionnaires?: QuestionnaireUpdateManyWithoutSubjectLevelNestedInput
  }

  export type SubjectLevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_id?: StringFieldUpdateOperationsInput | string
    questionnaires?: QuestionnaireUncheckedUpdateManyWithoutSubjectLevelNestedInput
  }

  export type SubjectLevelCreateManyInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
    subject_id: string
  }

  export type SubjectLevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectLevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_id?: StringFieldUpdateOperationsInput | string
  }

  export type TestSubjectCreateInput = {
    assigned_at?: Date | string
    subject_order_in_test?: number | null
    test_type: TestTypeCreateNestedOneWithoutTestSubjectsInput
    subject: SubjectCreateNestedOneWithoutTestSubjectsInput
  }

  export type TestSubjectUncheckedCreateInput = {
    test_type_id: string
    subject_id: string
    assigned_at?: Date | string
    subject_order_in_test?: number | null
  }

  export type TestSubjectUpdateInput = {
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
    test_type?: TestTypeUpdateOneRequiredWithoutTestSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutTestSubjectsNestedInput
  }

  export type TestSubjectUncheckedUpdateInput = {
    test_type_id?: StringFieldUpdateOperationsInput | string
    subject_id?: StringFieldUpdateOperationsInput | string
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TestSubjectCreateManyInput = {
    test_type_id: string
    subject_id: string
    assigned_at?: Date | string
    subject_order_in_test?: number | null
  }

  export type TestSubjectUpdateManyMutationInput = {
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TestSubjectUncheckedUpdateManyInput = {
    test_type_id?: StringFieldUpdateOperationsInput | string
    subject_id?: StringFieldUpdateOperationsInput | string
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GlossaryCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
    terms?: GlossaryTermCreateNestedManyWithoutCategoryInput
  }

  export type GlossaryCategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
    terms?: GlossaryTermUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type GlossaryCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    terms?: GlossaryTermUpdateManyWithoutCategoryNestedInput
  }

  export type GlossaryCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    terms?: GlossaryTermUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type GlossaryCategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
  }

  export type GlossaryCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GlossaryCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GlossaryTermCreateInput = {
    id?: string
    word: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
    category: GlossaryCategoryCreateNestedOneWithoutTermsInput
  }

  export type GlossaryTermUncheckedCreateInput = {
    id?: string
    word: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
    category_id: string
  }

  export type GlossaryTermUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    category?: GlossaryCategoryUpdateOneRequiredWithoutTermsNestedInput
  }

  export type GlossaryTermUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    category_id?: StringFieldUpdateOperationsInput | string
  }

  export type GlossaryTermCreateManyInput = {
    id?: string
    word: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
    category_id: string
  }

  export type GlossaryTermUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GlossaryTermUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    category_id?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionnaireCreateInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    subjectLevel: SubjectLevelCreateNestedOneWithoutQuestionnairesInput
    questions?: QuestionCreateNestedManyWithoutQuestionnaireInput
    userAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    subject_level_id: string
    created_at?: Date | string
    updated_at?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionnaireInput
    userAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectLevel?: SubjectLevelUpdateOneRequiredWithoutQuestionnairesNestedInput
    questions?: QuestionUpdateManyWithoutQuestionnaireNestedInput
    userAttempts?: UserQuestionnaireAttemptUpdateManyWithoutQuestionnaireNestedInput
  }

  export type QuestionnaireUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    subject_level_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuestionnaireNestedInput
    userAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutQuestionnaireNestedInput
  }

  export type QuestionnaireCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    subject_level_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type QuestionnaireUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionnaireUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    subject_level_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    questionnaire: QuestionnaireCreateNestedOneWithoutQuestionsInput
    answerOptions?: AnswerOptionCreateNestedManyWithoutQuestionInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
    answerOptions?: AnswerOptionUncheckedCreateNestedManyWithoutQuestionInput
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questionnaire?: QuestionnaireUpdateOneRequiredWithoutQuestionsNestedInput
    answerOptions?: AnswerOptionUpdateManyWithoutQuestionNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOptions?: AnswerOptionUncheckedUpdateManyWithoutQuestionNestedInput
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerOptionCreateInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    question: QuestionCreateNestedOneWithoutAnswerOptionsInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutSelectedAnswerOptionInput
  }

  export type AnswerOptionUncheckedCreateInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    question_id: string
    created_at?: Date | string
    updated_at?: Date | string
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutSelectedAnswerOptionInput
  }

  export type AnswerOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutAnswerOptionsNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutSelectedAnswerOptionNestedInput
  }

  export type AnswerOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    question_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutSelectedAnswerOptionNestedInput
  }

  export type AnswerOptionCreateManyInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    question_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AnswerOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    question_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionnaireAttemptCreateInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutQuestionnaireAttemptsInput
    questionnaire: QuestionnaireCreateNestedOneWithoutUserAttemptsInput
    answers?: UserQuestionAnswerCreateNestedManyWithoutUserQuestionnaireAttemptInput
  }

  export type UserQuestionnaireAttemptUncheckedCreateInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    user_id: string
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
    answers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserQuestionnaireAttemptInput
  }

  export type UserQuestionnaireAttemptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionnaireAttemptsNestedInput
    questionnaire?: QuestionnaireUpdateOneRequiredWithoutUserAttemptsNestedInput
    answers?: UserQuestionAnswerUpdateManyWithoutUserQuestionnaireAttemptNestedInput
  }

  export type UserQuestionnaireAttemptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserQuestionnaireAttemptNestedInput
  }

  export type UserQuestionnaireAttemptCreateManyInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    user_id: string
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionnaireAttemptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionnaireAttemptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    answered_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutQuestionAnswersInput
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    selectedAnswerOption?: AnswerOptionCreateNestedOneWithoutUserAnswersInput
    userQuestionnaireAttempt: UserQuestionnaireAttemptCreateNestedOneWithoutAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    question_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    selectedAnswerOption?: AnswerOptionUpdateOneWithoutUserAnswersNestedInput
    userQuestionnaireAttempt?: UserQuestionnaireAttemptUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateManyInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    question_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestSelectionCreateInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutTestSelectionsInput
    testType: TestTypeCreateNestedOneWithoutUserTestSelectionInput
  }

  export type UserTestSelectionUncheckedCreateInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    user_id: string
    test_type_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserTestSelectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTestSelectionsNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutUserTestSelectionNestedInput
  }

  export type UserTestSelectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    test_type_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestSelectionCreateManyInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    user_id: string
    test_type_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserTestSelectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestSelectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    test_type_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type AppSessionListRelationFilter = {
    every?: AppSessionWhereInput
    some?: AppSessionWhereInput
    none?: AppSessionWhereInput
  }

  export type PasswordResetNullableScalarRelationFilter = {
    is?: PasswordResetWhereInput | null
    isNot?: PasswordResetWhereInput | null
  }

  export type AuthEventListRelationFilter = {
    every?: AuthEventWhereInput
    some?: AuthEventWhereInput
    none?: AuthEventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ApiKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppUserOrderByRelevanceInput = {
    fields: AppUserOrderByRelevanceFieldEnum | AppUserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AppUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrder
    company_name?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
  }

  export type AppUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrder
    company_name?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
  }

  export type AppUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrder
    company_name?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type AppUserScalarRelationFilter = {
    is?: AppUserWhereInput
    isNot?: AppUserWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TestTypeListRelationFilter = {
    every?: TestTypeWhereInput
    some?: TestTypeWhereInput
    none?: TestTypeWhereInput
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiKeyOrderByRelevanceInput = {
    fields: ApiKeyOrderByRelevanceFieldEnum | ApiKeyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ApiKeyCountOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    last_used_at?: SortOrder
    expires_at?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    last_used_at?: SortOrder
    expires_at?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    last_used_at?: SortOrder
    expires_at?: SortOrder
  }

  export type AppSessionOrderByRelevanceInput = {
    fields: AppSessionOrderByRelevanceFieldEnum | AppSessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AppSessionCountOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrder
  }

  export type AppSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrder
  }

  export type AppSessionMinOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrder
  }

  export type ApiKeyScalarRelationFilter = {
    is?: ApiKeyWhereInput
    isNot?: ApiKeyWhereInput
  }

  export type UserAccountListRelationFilter = {
    every?: UserAccountWhereInput
    some?: UserAccountWhereInput
    none?: UserAccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AuthLogListRelationFilter = {
    every?: AuthLogWhereInput
    some?: AuthLogWhereInput
    none?: AuthLogWhereInput
  }

  export type UserQuestionnaireAttemptListRelationFilter = {
    every?: UserQuestionnaireAttemptWhereInput
    some?: UserQuestionnaireAttemptWhereInput
    none?: UserQuestionnaireAttemptWhereInput
  }

  export type UserQuestionAnswerListRelationFilter = {
    every?: UserQuestionAnswerWhereInput
    some?: UserQuestionAnswerWhereInput
    none?: UserQuestionAnswerWhereInput
  }

  export type UserTestSelectionListRelationFilter = {
    every?: UserTestSelectionWhereInput
    some?: UserTestSelectionWhereInput
    none?: UserTestSelectionWhereInput
  }

  export type UserAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserQuestionnaireAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserQuestionAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTestSelectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserEmailApi_key_idCompoundUniqueInput = {
    email: string
    api_key_id: string
  }

  export type UserUsernameApi_key_idCompoundUniqueInput = {
    username: string
    api_key_id: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    api_key_id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    api_key_id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    api_key_id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    name?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email_verified?: SortOrder
    email_verified_at?: SortOrder
    reset_token?: SortOrder
    reset_token_expires?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    api_key?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    api_key?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    api_key?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountScalarRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type UserAccountOrderByRelevanceInput = {
    fields: UserAccountOrderByRelevanceFieldEnum | UserAccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserAccountUser_idAccount_idCompoundUniqueInput = {
    user_id: string
    account_id: string
  }

  export type UserAccountCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    account_id?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrder
  }

  export type UserAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    account_id?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrder
  }

  export type UserAccountMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    account_id?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrder
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    token?: SortOrder
    refresh_token?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    revoked?: SortOrder
    revoked_at?: SortOrder
  }

  export type EnumAuthEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventType | EnumAuthEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventType[]
    notIn?: $Enums.AuthEventType[]
    not?: NestedEnumAuthEventTypeFilter<$PrismaModel> | $Enums.AuthEventType
  }

  export type EnumAuthEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventStatus | EnumAuthEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventStatus[]
    notIn?: $Enums.AuthEventStatus[]
    not?: NestedEnumAuthEventStatusFilter<$PrismaModel> | $Enums.AuthEventStatus
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AuthLogOrderByRelevanceInput = {
    fields: AuthLogOrderByRelevanceFieldEnum | AuthLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuthLogCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_type?: SortOrder
    status?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    details?: SortOrder
    created_at?: SortOrder
  }

  export type AuthLogMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_type?: SortOrder
    status?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    details?: SortOrder
    created_at?: SortOrder
  }

  export type AuthLogMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_type?: SortOrder
    status?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    details?: SortOrder
    created_at?: SortOrder
  }

  export type EnumAuthEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventType | EnumAuthEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventType[]
    notIn?: $Enums.AuthEventType[]
    not?: NestedEnumAuthEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.AuthEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthEventTypeFilter<$PrismaModel>
    _max?: NestedEnumAuthEventTypeFilter<$PrismaModel>
  }

  export type EnumAuthEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventStatus | EnumAuthEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventStatus[]
    notIn?: $Enums.AuthEventStatus[]
    not?: NestedEnumAuthEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuthEventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthEventStatusFilter<$PrismaModel>
    _max?: NestedEnumAuthEventStatusFilter<$PrismaModel>
  }

  export type EmailVerificationOrderByRelevanceInput = {
    fields: EmailVerificationOrderByRelevanceFieldEnum | EmailVerificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmailVerificationCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
  }

  export type EmailVerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
  }

  export type EmailVerificationMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
  }

  export type PasswordResetOrderByRelevanceInput = {
    fields: PasswordResetOrderByRelevanceFieldEnum | PasswordResetOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PasswordResetCountOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    used?: SortOrder
  }

  export type PasswordResetMaxOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    used?: SortOrder
  }

  export type PasswordResetMinOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    token?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    used?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuthEventOrderByRelevanceInput = {
    fields: AuthEventOrderByRelevanceFieldEnum | AuthEventOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuthEventCountOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    event_type?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    created_at?: SortOrder
    additional_info?: SortOrder
  }

  export type AuthEventMaxOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    event_type?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    created_at?: SortOrder
  }

  export type AuthEventMinOrderByAggregateInput = {
    id?: SortOrder
    app_user_id?: SortOrder
    event_type?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    created_at?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ApiKeyNullableScalarRelationFilter = {
    is?: ApiKeyWhereInput | null
    isNot?: ApiKeyWhereInput | null
  }

  export type TestSubjectListRelationFilter = {
    every?: TestSubjectWhereInput
    some?: TestSubjectWhereInput
    none?: TestSubjectWhereInput
  }

  export type TestSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestTypeOrderByRelevanceInput = {
    fields: TestTypeOrderByRelevanceFieldEnum | TestTypeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TestTypeNameApi_key_idCompoundUniqueInput = {
    name: string
    api_key_id: string
  }

  export type TestTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    api_key_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TestTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    api_key_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TestTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    api_key_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SubjectDetailNullableScalarRelationFilter = {
    is?: SubjectDetailWhereInput | null
    isNot?: SubjectDetailWhereInput | null
  }

  export type SubjectLevelListRelationFilter = {
    every?: SubjectLevelWhereInput
    some?: SubjectLevelWhereInput
    none?: SubjectLevelWhereInput
  }

  export type SubjectLevelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelevanceInput = {
    fields: SubjectOrderByRelevanceFieldEnum | SubjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubjectNameApi_key_idCompoundUniqueInput = {
    name: string
    api_key_id: string
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug_materia?: SortOrder
    approximate_total_minutes?: SortOrder
    total_questions?: SortOrder
    order?: SortOrder
    api_key_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    approximate_total_minutes?: SortOrder
    total_questions?: SortOrder
    order?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug_materia?: SortOrder
    approximate_total_minutes?: SortOrder
    total_questions?: SortOrder
    order?: SortOrder
    api_key_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug_materia?: SortOrder
    approximate_total_minutes?: SortOrder
    total_questions?: SortOrder
    order?: SortOrder
    api_key_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    approximate_total_minutes?: SortOrder
    total_questions?: SortOrder
    order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type SubjectDetailOrderByRelevanceInput = {
    fields: SubjectDetailOrderByRelevanceFieldEnum | SubjectDetailOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubjectDetailCountOrderByAggregateInput = {
    id?: SortOrder
    background_image_url?: SortOrder
    title?: SortOrder
    title_color?: SortOrder
    subtitle?: SortOrder
    primary_color_hex?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
  }

  export type SubjectDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    background_image_url?: SortOrder
    title?: SortOrder
    title_color?: SortOrder
    subtitle?: SortOrder
    primary_color_hex?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
  }

  export type SubjectDetailMinOrderByAggregateInput = {
    id?: SortOrder
    background_image_url?: SortOrder
    title?: SortOrder
    title_color?: SortOrder
    subtitle?: SortOrder
    primary_color_hex?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
  }

  export type QuestionnaireListRelationFilter = {
    every?: QuestionnaireWhereInput
    some?: QuestionnaireWhereInput
    none?: QuestionnaireWhereInput
  }

  export type QuestionnaireOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectLevelOrderByRelevanceInput = {
    fields: SubjectLevelOrderByRelevanceFieldEnum | SubjectLevelOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubjectLevelCountOrderByAggregateInput = {
    id?: SortOrder
    reference_title?: SortOrder
    title?: SortOrder
    order?: SortOrder
    number_of_questions?: SortOrder
    approximate_time_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
  }

  export type SubjectLevelAvgOrderByAggregateInput = {
    order?: SortOrder
    number_of_questions?: SortOrder
    approximate_time_minutes?: SortOrder
  }

  export type SubjectLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    reference_title?: SortOrder
    title?: SortOrder
    order?: SortOrder
    number_of_questions?: SortOrder
    approximate_time_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
  }

  export type SubjectLevelMinOrderByAggregateInput = {
    id?: SortOrder
    reference_title?: SortOrder
    title?: SortOrder
    order?: SortOrder
    number_of_questions?: SortOrder
    approximate_time_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subject_id?: SortOrder
  }

  export type SubjectLevelSumOrderByAggregateInput = {
    order?: SortOrder
    number_of_questions?: SortOrder
    approximate_time_minutes?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TestTypeScalarRelationFilter = {
    is?: TestTypeWhereInput
    isNot?: TestTypeWhereInput
  }

  export type TestSubjectOrderByRelevanceInput = {
    fields: TestSubjectOrderByRelevanceFieldEnum | TestSubjectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TestSubjectTest_type_idSubject_idCompoundUniqueInput = {
    test_type_id: string
    subject_id: string
  }

  export type TestSubjectCountOrderByAggregateInput = {
    test_type_id?: SortOrder
    subject_id?: SortOrder
    assigned_at?: SortOrder
    subject_order_in_test?: SortOrder
  }

  export type TestSubjectAvgOrderByAggregateInput = {
    subject_order_in_test?: SortOrder
  }

  export type TestSubjectMaxOrderByAggregateInput = {
    test_type_id?: SortOrder
    subject_id?: SortOrder
    assigned_at?: SortOrder
    subject_order_in_test?: SortOrder
  }

  export type TestSubjectMinOrderByAggregateInput = {
    test_type_id?: SortOrder
    subject_id?: SortOrder
    assigned_at?: SortOrder
    subject_order_in_test?: SortOrder
  }

  export type TestSubjectSumOrderByAggregateInput = {
    subject_order_in_test?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type GlossaryTermListRelationFilter = {
    every?: GlossaryTermWhereInput
    some?: GlossaryTermWhereInput
    none?: GlossaryTermWhereInput
  }

  export type GlossaryTermOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GlossaryCategoryOrderByRelevanceInput = {
    fields: GlossaryCategoryOrderByRelevanceFieldEnum | GlossaryCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GlossaryCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
  }

  export type GlossaryCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
  }

  export type GlossaryCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
  }

  export type GlossaryCategoryScalarRelationFilter = {
    is?: GlossaryCategoryWhereInput
    isNot?: GlossaryCategoryWhereInput
  }

  export type GlossaryTermOrderByRelevanceInput = {
    fields: GlossaryTermOrderByRelevanceFieldEnum | GlossaryTermOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GlossaryTermCountOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
    category_id?: SortOrder
  }

  export type GlossaryTermMaxOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
    category_id?: SortOrder
  }

  export type GlossaryTermMinOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    active?: SortOrder
    category_id?: SortOrder
  }

  export type SubjectLevelScalarRelationFilter = {
    is?: SubjectLevelWhereInput
    isNot?: SubjectLevelWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionnaireOrderByRelevanceInput = {
    fields: QuestionnaireOrderByRelevanceFieldEnum | QuestionnaireOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type QuestionnaireCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    published?: SortOrder
    subject_level_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionnaireAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type QuestionnaireMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    published?: SortOrder
    subject_level_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionnaireMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
    published?: SortOrder
    subject_level_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionnaireSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type QuestionnaireScalarRelationFilter = {
    is?: QuestionnaireWhereInput
    isNot?: QuestionnaireWhereInput
  }

  export type AnswerOptionListRelationFilter = {
    every?: AnswerOptionWhereInput
    some?: AnswerOptionWhereInput
    none?: AnswerOptionWhereInput
  }

  export type AnswerOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionOrderByRelevanceInput = {
    fields: QuestionOrderByRelevanceFieldEnum | QuestionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    question_type?: SortOrder
    explanation?: SortOrder
    extra_info?: SortOrder
    points?: SortOrder
    order?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    active?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    points?: SortOrder
    order?: SortOrder
    difficulty?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    question_type?: SortOrder
    explanation?: SortOrder
    extra_info?: SortOrder
    points?: SortOrder
    order?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    active?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    question_type?: SortOrder
    explanation?: SortOrder
    extra_info?: SortOrder
    points?: SortOrder
    order?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    active?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    points?: SortOrder
    order?: SortOrder
    difficulty?: SortOrder
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type AnswerOptionOrderByRelevanceInput = {
    fields: AnswerOptionOrderByRelevanceFieldEnum | AnswerOptionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AnswerOptionCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
    order?: SortOrder
    question_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AnswerOptionAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type AnswerOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
    order?: SortOrder
    question_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AnswerOptionMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
    order?: SortOrder
    question_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AnswerOptionSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumAttemptStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttemptStatus | EnumAttemptStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttemptStatus[]
    notIn?: $Enums.AttemptStatus[]
    not?: NestedEnumAttemptStatusFilter<$PrismaModel> | $Enums.AttemptStatus
  }

  export type UserQuestionnaireAttemptOrderByRelevanceInput = {
    fields: UserQuestionnaireAttemptOrderByRelevanceFieldEnum | UserQuestionnaireAttemptOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserQuestionnaireAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    status?: SortOrder
    started_at?: SortOrder
    completed_at?: SortOrder
    time_spent_seconds?: SortOrder
    correct_answers_count?: SortOrder
    total_questions_count?: SortOrder
    attempt_number?: SortOrder
    user_id?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserQuestionnaireAttemptAvgOrderByAggregateInput = {
    score?: SortOrder
    time_spent_seconds?: SortOrder
    correct_answers_count?: SortOrder
    total_questions_count?: SortOrder
    attempt_number?: SortOrder
  }

  export type UserQuestionnaireAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    status?: SortOrder
    started_at?: SortOrder
    completed_at?: SortOrder
    time_spent_seconds?: SortOrder
    correct_answers_count?: SortOrder
    total_questions_count?: SortOrder
    attempt_number?: SortOrder
    user_id?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserQuestionnaireAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    status?: SortOrder
    started_at?: SortOrder
    completed_at?: SortOrder
    time_spent_seconds?: SortOrder
    correct_answers_count?: SortOrder
    total_questions_count?: SortOrder
    attempt_number?: SortOrder
    user_id?: SortOrder
    questionnaire_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserQuestionnaireAttemptSumOrderByAggregateInput = {
    score?: SortOrder
    time_spent_seconds?: SortOrder
    correct_answers_count?: SortOrder
    total_questions_count?: SortOrder
    attempt_number?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumAttemptStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttemptStatus | EnumAttemptStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttemptStatus[]
    notIn?: $Enums.AttemptStatus[]
    not?: NestedEnumAttemptStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttemptStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttemptStatusFilter<$PrismaModel>
    _max?: NestedEnumAttemptStatusFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type AnswerOptionNullableScalarRelationFilter = {
    is?: AnswerOptionWhereInput | null
    isNot?: AnswerOptionWhereInput | null
  }

  export type UserQuestionnaireAttemptScalarRelationFilter = {
    is?: UserQuestionnaireAttemptWhereInput
    isNot?: UserQuestionnaireAttemptWhereInput
  }

  export type UserQuestionAnswerOrderByRelevanceInput = {
    fields: UserQuestionAnswerOrderByRelevanceFieldEnum | UserQuestionAnswerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserQuestionAnswerUser_questionnaire_attempt_idQuestion_idCompoundUniqueInput = {
    user_questionnaire_attempt_id: string
    question_id: string
  }

  export type UserQuestionAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    is_correct?: SortOrder
    answered_at?: SortOrder
    time_to_answer_seconds?: SortOrder
    points_earned?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_answer_option_id?: SortOrder
    answered_text?: SortOrder
    user_questionnaire_attempt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserQuestionAnswerAvgOrderByAggregateInput = {
    time_to_answer_seconds?: SortOrder
    points_earned?: SortOrder
  }

  export type UserQuestionAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    is_correct?: SortOrder
    answered_at?: SortOrder
    time_to_answer_seconds?: SortOrder
    points_earned?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_answer_option_id?: SortOrder
    answered_text?: SortOrder
    user_questionnaire_attempt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserQuestionAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    is_correct?: SortOrder
    answered_at?: SortOrder
    time_to_answer_seconds?: SortOrder
    points_earned?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_answer_option_id?: SortOrder
    answered_text?: SortOrder
    user_questionnaire_attempt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserQuestionAnswerSumOrderByAggregateInput = {
    time_to_answer_seconds?: SortOrder
    points_earned?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type UserTestSelectionOrderByRelevanceInput = {
    fields: UserTestSelectionOrderByRelevanceFieldEnum | UserTestSelectionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserTestSelectionUser_idTest_type_idCompoundUniqueInput = {
    user_id: string
    test_type_id: string
  }

  export type UserTestSelectionCountOrderByAggregateInput = {
    id?: SortOrder
    is_active?: SortOrder
    selected_at?: SortOrder
    user_id?: SortOrder
    test_type_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserTestSelectionMaxOrderByAggregateInput = {
    id?: SortOrder
    is_active?: SortOrder
    selected_at?: SortOrder
    user_id?: SortOrder
    test_type_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserTestSelectionMinOrderByAggregateInput = {
    id?: SortOrder
    is_active?: SortOrder
    selected_at?: SortOrder
    user_id?: SortOrder
    test_type_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ApiKeyCreateNestedManyWithoutApp_userInput = {
    create?: XOR<ApiKeyCreateWithoutApp_userInput, ApiKeyUncheckedCreateWithoutApp_userInput> | ApiKeyCreateWithoutApp_userInput[] | ApiKeyUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutApp_userInput | ApiKeyCreateOrConnectWithoutApp_userInput[]
    createMany?: ApiKeyCreateManyApp_userInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type AppSessionCreateNestedManyWithoutApp_userInput = {
    create?: XOR<AppSessionCreateWithoutApp_userInput, AppSessionUncheckedCreateWithoutApp_userInput> | AppSessionCreateWithoutApp_userInput[] | AppSessionUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AppSessionCreateOrConnectWithoutApp_userInput | AppSessionCreateOrConnectWithoutApp_userInput[]
    createMany?: AppSessionCreateManyApp_userInputEnvelope
    connect?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
  }

  export type PasswordResetCreateNestedOneWithoutApp_userInput = {
    create?: XOR<PasswordResetCreateWithoutApp_userInput, PasswordResetUncheckedCreateWithoutApp_userInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutApp_userInput
    connect?: PasswordResetWhereUniqueInput
  }

  export type AuthEventCreateNestedManyWithoutApp_userInput = {
    create?: XOR<AuthEventCreateWithoutApp_userInput, AuthEventUncheckedCreateWithoutApp_userInput> | AuthEventCreateWithoutApp_userInput[] | AuthEventUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AuthEventCreateOrConnectWithoutApp_userInput | AuthEventCreateOrConnectWithoutApp_userInput[]
    createMany?: AuthEventCreateManyApp_userInputEnvelope
    connect?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutApp_userInput = {
    create?: XOR<ApiKeyCreateWithoutApp_userInput, ApiKeyUncheckedCreateWithoutApp_userInput> | ApiKeyCreateWithoutApp_userInput[] | ApiKeyUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutApp_userInput | ApiKeyCreateOrConnectWithoutApp_userInput[]
    createMany?: ApiKeyCreateManyApp_userInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type AppSessionUncheckedCreateNestedManyWithoutApp_userInput = {
    create?: XOR<AppSessionCreateWithoutApp_userInput, AppSessionUncheckedCreateWithoutApp_userInput> | AppSessionCreateWithoutApp_userInput[] | AppSessionUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AppSessionCreateOrConnectWithoutApp_userInput | AppSessionCreateOrConnectWithoutApp_userInput[]
    createMany?: AppSessionCreateManyApp_userInputEnvelope
    connect?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
  }

  export type PasswordResetUncheckedCreateNestedOneWithoutApp_userInput = {
    create?: XOR<PasswordResetCreateWithoutApp_userInput, PasswordResetUncheckedCreateWithoutApp_userInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutApp_userInput
    connect?: PasswordResetWhereUniqueInput
  }

  export type AuthEventUncheckedCreateNestedManyWithoutApp_userInput = {
    create?: XOR<AuthEventCreateWithoutApp_userInput, AuthEventUncheckedCreateWithoutApp_userInput> | AuthEventCreateWithoutApp_userInput[] | AuthEventUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AuthEventCreateOrConnectWithoutApp_userInput | AuthEventCreateOrConnectWithoutApp_userInput[]
    createMany?: AuthEventCreateManyApp_userInputEnvelope
    connect?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ApiKeyUpdateManyWithoutApp_userNestedInput = {
    create?: XOR<ApiKeyCreateWithoutApp_userInput, ApiKeyUncheckedCreateWithoutApp_userInput> | ApiKeyCreateWithoutApp_userInput[] | ApiKeyUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutApp_userInput | ApiKeyCreateOrConnectWithoutApp_userInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutApp_userInput | ApiKeyUpsertWithWhereUniqueWithoutApp_userInput[]
    createMany?: ApiKeyCreateManyApp_userInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutApp_userInput | ApiKeyUpdateWithWhereUniqueWithoutApp_userInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutApp_userInput | ApiKeyUpdateManyWithWhereWithoutApp_userInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type AppSessionUpdateManyWithoutApp_userNestedInput = {
    create?: XOR<AppSessionCreateWithoutApp_userInput, AppSessionUncheckedCreateWithoutApp_userInput> | AppSessionCreateWithoutApp_userInput[] | AppSessionUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AppSessionCreateOrConnectWithoutApp_userInput | AppSessionCreateOrConnectWithoutApp_userInput[]
    upsert?: AppSessionUpsertWithWhereUniqueWithoutApp_userInput | AppSessionUpsertWithWhereUniqueWithoutApp_userInput[]
    createMany?: AppSessionCreateManyApp_userInputEnvelope
    set?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    disconnect?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    delete?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    connect?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    update?: AppSessionUpdateWithWhereUniqueWithoutApp_userInput | AppSessionUpdateWithWhereUniqueWithoutApp_userInput[]
    updateMany?: AppSessionUpdateManyWithWhereWithoutApp_userInput | AppSessionUpdateManyWithWhereWithoutApp_userInput[]
    deleteMany?: AppSessionScalarWhereInput | AppSessionScalarWhereInput[]
  }

  export type PasswordResetUpdateOneWithoutApp_userNestedInput = {
    create?: XOR<PasswordResetCreateWithoutApp_userInput, PasswordResetUncheckedCreateWithoutApp_userInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutApp_userInput
    upsert?: PasswordResetUpsertWithoutApp_userInput
    disconnect?: PasswordResetWhereInput | boolean
    delete?: PasswordResetWhereInput | boolean
    connect?: PasswordResetWhereUniqueInput
    update?: XOR<XOR<PasswordResetUpdateToOneWithWhereWithoutApp_userInput, PasswordResetUpdateWithoutApp_userInput>, PasswordResetUncheckedUpdateWithoutApp_userInput>
  }

  export type AuthEventUpdateManyWithoutApp_userNestedInput = {
    create?: XOR<AuthEventCreateWithoutApp_userInput, AuthEventUncheckedCreateWithoutApp_userInput> | AuthEventCreateWithoutApp_userInput[] | AuthEventUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AuthEventCreateOrConnectWithoutApp_userInput | AuthEventCreateOrConnectWithoutApp_userInput[]
    upsert?: AuthEventUpsertWithWhereUniqueWithoutApp_userInput | AuthEventUpsertWithWhereUniqueWithoutApp_userInput[]
    createMany?: AuthEventCreateManyApp_userInputEnvelope
    set?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    disconnect?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    delete?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    connect?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    update?: AuthEventUpdateWithWhereUniqueWithoutApp_userInput | AuthEventUpdateWithWhereUniqueWithoutApp_userInput[]
    updateMany?: AuthEventUpdateManyWithWhereWithoutApp_userInput | AuthEventUpdateManyWithWhereWithoutApp_userInput[]
    deleteMany?: AuthEventScalarWhereInput | AuthEventScalarWhereInput[]
  }

  export type ApiKeyUncheckedUpdateManyWithoutApp_userNestedInput = {
    create?: XOR<ApiKeyCreateWithoutApp_userInput, ApiKeyUncheckedCreateWithoutApp_userInput> | ApiKeyCreateWithoutApp_userInput[] | ApiKeyUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutApp_userInput | ApiKeyCreateOrConnectWithoutApp_userInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutApp_userInput | ApiKeyUpsertWithWhereUniqueWithoutApp_userInput[]
    createMany?: ApiKeyCreateManyApp_userInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutApp_userInput | ApiKeyUpdateWithWhereUniqueWithoutApp_userInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutApp_userInput | ApiKeyUpdateManyWithWhereWithoutApp_userInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type AppSessionUncheckedUpdateManyWithoutApp_userNestedInput = {
    create?: XOR<AppSessionCreateWithoutApp_userInput, AppSessionUncheckedCreateWithoutApp_userInput> | AppSessionCreateWithoutApp_userInput[] | AppSessionUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AppSessionCreateOrConnectWithoutApp_userInput | AppSessionCreateOrConnectWithoutApp_userInput[]
    upsert?: AppSessionUpsertWithWhereUniqueWithoutApp_userInput | AppSessionUpsertWithWhereUniqueWithoutApp_userInput[]
    createMany?: AppSessionCreateManyApp_userInputEnvelope
    set?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    disconnect?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    delete?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    connect?: AppSessionWhereUniqueInput | AppSessionWhereUniqueInput[]
    update?: AppSessionUpdateWithWhereUniqueWithoutApp_userInput | AppSessionUpdateWithWhereUniqueWithoutApp_userInput[]
    updateMany?: AppSessionUpdateManyWithWhereWithoutApp_userInput | AppSessionUpdateManyWithWhereWithoutApp_userInput[]
    deleteMany?: AppSessionScalarWhereInput | AppSessionScalarWhereInput[]
  }

  export type PasswordResetUncheckedUpdateOneWithoutApp_userNestedInput = {
    create?: XOR<PasswordResetCreateWithoutApp_userInput, PasswordResetUncheckedCreateWithoutApp_userInput>
    connectOrCreate?: PasswordResetCreateOrConnectWithoutApp_userInput
    upsert?: PasswordResetUpsertWithoutApp_userInput
    disconnect?: PasswordResetWhereInput | boolean
    delete?: PasswordResetWhereInput | boolean
    connect?: PasswordResetWhereUniqueInput
    update?: XOR<XOR<PasswordResetUpdateToOneWithWhereWithoutApp_userInput, PasswordResetUpdateWithoutApp_userInput>, PasswordResetUncheckedUpdateWithoutApp_userInput>
  }

  export type AuthEventUncheckedUpdateManyWithoutApp_userNestedInput = {
    create?: XOR<AuthEventCreateWithoutApp_userInput, AuthEventUncheckedCreateWithoutApp_userInput> | AuthEventCreateWithoutApp_userInput[] | AuthEventUncheckedCreateWithoutApp_userInput[]
    connectOrCreate?: AuthEventCreateOrConnectWithoutApp_userInput | AuthEventCreateOrConnectWithoutApp_userInput[]
    upsert?: AuthEventUpsertWithWhereUniqueWithoutApp_userInput | AuthEventUpsertWithWhereUniqueWithoutApp_userInput[]
    createMany?: AuthEventCreateManyApp_userInputEnvelope
    set?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    disconnect?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    delete?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    connect?: AuthEventWhereUniqueInput | AuthEventWhereUniqueInput[]
    update?: AuthEventUpdateWithWhereUniqueWithoutApp_userInput | AuthEventUpdateWithWhereUniqueWithoutApp_userInput[]
    updateMany?: AuthEventUpdateManyWithWhereWithoutApp_userInput | AuthEventUpdateManyWithWhereWithoutApp_userInput[]
    deleteMany?: AuthEventScalarWhereInput | AuthEventScalarWhereInput[]
  }

  export type AppUserCreateNestedOneWithoutApi_keysInput = {
    create?: XOR<AppUserCreateWithoutApi_keysInput, AppUserUncheckedCreateWithoutApi_keysInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutApi_keysInput
    connect?: AppUserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutApi_keyInput = {
    create?: XOR<UserCreateWithoutApi_keyInput, UserUncheckedCreateWithoutApi_keyInput> | UserCreateWithoutApi_keyInput[] | UserUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApi_keyInput | UserCreateOrConnectWithoutApi_keyInput[]
    createMany?: UserCreateManyApi_keyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TestTypeCreateNestedManyWithoutApi_keyInput = {
    create?: XOR<TestTypeCreateWithoutApi_keyInput, TestTypeUncheckedCreateWithoutApi_keyInput> | TestTypeCreateWithoutApi_keyInput[] | TestTypeUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: TestTypeCreateOrConnectWithoutApi_keyInput | TestTypeCreateOrConnectWithoutApi_keyInput[]
    createMany?: TestTypeCreateManyApi_keyInputEnvelope
    connect?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
  }

  export type SubjectCreateNestedManyWithoutApi_keyInput = {
    create?: XOR<SubjectCreateWithoutApi_keyInput, SubjectUncheckedCreateWithoutApi_keyInput> | SubjectCreateWithoutApi_keyInput[] | SubjectUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutApi_keyInput | SubjectCreateOrConnectWithoutApi_keyInput[]
    createMany?: SubjectCreateManyApi_keyInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutApi_keyInput = {
    create?: XOR<UserCreateWithoutApi_keyInput, UserUncheckedCreateWithoutApi_keyInput> | UserCreateWithoutApi_keyInput[] | UserUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApi_keyInput | UserCreateOrConnectWithoutApi_keyInput[]
    createMany?: UserCreateManyApi_keyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TestTypeUncheckedCreateNestedManyWithoutApi_keyInput = {
    create?: XOR<TestTypeCreateWithoutApi_keyInput, TestTypeUncheckedCreateWithoutApi_keyInput> | TestTypeCreateWithoutApi_keyInput[] | TestTypeUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: TestTypeCreateOrConnectWithoutApi_keyInput | TestTypeCreateOrConnectWithoutApi_keyInput[]
    createMany?: TestTypeCreateManyApi_keyInputEnvelope
    connect?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutApi_keyInput = {
    create?: XOR<SubjectCreateWithoutApi_keyInput, SubjectUncheckedCreateWithoutApi_keyInput> | SubjectCreateWithoutApi_keyInput[] | SubjectUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutApi_keyInput | SubjectCreateOrConnectWithoutApi_keyInput[]
    createMany?: SubjectCreateManyApi_keyInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type AppUserUpdateOneRequiredWithoutApi_keysNestedInput = {
    create?: XOR<AppUserCreateWithoutApi_keysInput, AppUserUncheckedCreateWithoutApi_keysInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutApi_keysInput
    upsert?: AppUserUpsertWithoutApi_keysInput
    connect?: AppUserWhereUniqueInput
    update?: XOR<XOR<AppUserUpdateToOneWithWhereWithoutApi_keysInput, AppUserUpdateWithoutApi_keysInput>, AppUserUncheckedUpdateWithoutApi_keysInput>
  }

  export type UserUpdateManyWithoutApi_keyNestedInput = {
    create?: XOR<UserCreateWithoutApi_keyInput, UserUncheckedCreateWithoutApi_keyInput> | UserCreateWithoutApi_keyInput[] | UserUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApi_keyInput | UserCreateOrConnectWithoutApi_keyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutApi_keyInput | UserUpsertWithWhereUniqueWithoutApi_keyInput[]
    createMany?: UserCreateManyApi_keyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutApi_keyInput | UserUpdateWithWhereUniqueWithoutApi_keyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutApi_keyInput | UserUpdateManyWithWhereWithoutApi_keyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TestTypeUpdateManyWithoutApi_keyNestedInput = {
    create?: XOR<TestTypeCreateWithoutApi_keyInput, TestTypeUncheckedCreateWithoutApi_keyInput> | TestTypeCreateWithoutApi_keyInput[] | TestTypeUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: TestTypeCreateOrConnectWithoutApi_keyInput | TestTypeCreateOrConnectWithoutApi_keyInput[]
    upsert?: TestTypeUpsertWithWhereUniqueWithoutApi_keyInput | TestTypeUpsertWithWhereUniqueWithoutApi_keyInput[]
    createMany?: TestTypeCreateManyApi_keyInputEnvelope
    set?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    disconnect?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    delete?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    connect?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    update?: TestTypeUpdateWithWhereUniqueWithoutApi_keyInput | TestTypeUpdateWithWhereUniqueWithoutApi_keyInput[]
    updateMany?: TestTypeUpdateManyWithWhereWithoutApi_keyInput | TestTypeUpdateManyWithWhereWithoutApi_keyInput[]
    deleteMany?: TestTypeScalarWhereInput | TestTypeScalarWhereInput[]
  }

  export type SubjectUpdateManyWithoutApi_keyNestedInput = {
    create?: XOR<SubjectCreateWithoutApi_keyInput, SubjectUncheckedCreateWithoutApi_keyInput> | SubjectCreateWithoutApi_keyInput[] | SubjectUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutApi_keyInput | SubjectCreateOrConnectWithoutApi_keyInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutApi_keyInput | SubjectUpsertWithWhereUniqueWithoutApi_keyInput[]
    createMany?: SubjectCreateManyApi_keyInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutApi_keyInput | SubjectUpdateWithWhereUniqueWithoutApi_keyInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutApi_keyInput | SubjectUpdateManyWithWhereWithoutApi_keyInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutApi_keyNestedInput = {
    create?: XOR<UserCreateWithoutApi_keyInput, UserUncheckedCreateWithoutApi_keyInput> | UserCreateWithoutApi_keyInput[] | UserUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutApi_keyInput | UserCreateOrConnectWithoutApi_keyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutApi_keyInput | UserUpsertWithWhereUniqueWithoutApi_keyInput[]
    createMany?: UserCreateManyApi_keyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutApi_keyInput | UserUpdateWithWhereUniqueWithoutApi_keyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutApi_keyInput | UserUpdateManyWithWhereWithoutApi_keyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TestTypeUncheckedUpdateManyWithoutApi_keyNestedInput = {
    create?: XOR<TestTypeCreateWithoutApi_keyInput, TestTypeUncheckedCreateWithoutApi_keyInput> | TestTypeCreateWithoutApi_keyInput[] | TestTypeUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: TestTypeCreateOrConnectWithoutApi_keyInput | TestTypeCreateOrConnectWithoutApi_keyInput[]
    upsert?: TestTypeUpsertWithWhereUniqueWithoutApi_keyInput | TestTypeUpsertWithWhereUniqueWithoutApi_keyInput[]
    createMany?: TestTypeCreateManyApi_keyInputEnvelope
    set?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    disconnect?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    delete?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    connect?: TestTypeWhereUniqueInput | TestTypeWhereUniqueInput[]
    update?: TestTypeUpdateWithWhereUniqueWithoutApi_keyInput | TestTypeUpdateWithWhereUniqueWithoutApi_keyInput[]
    updateMany?: TestTypeUpdateManyWithWhereWithoutApi_keyInput | TestTypeUpdateManyWithWhereWithoutApi_keyInput[]
    deleteMany?: TestTypeScalarWhereInput | TestTypeScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutApi_keyNestedInput = {
    create?: XOR<SubjectCreateWithoutApi_keyInput, SubjectUncheckedCreateWithoutApi_keyInput> | SubjectCreateWithoutApi_keyInput[] | SubjectUncheckedCreateWithoutApi_keyInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutApi_keyInput | SubjectCreateOrConnectWithoutApi_keyInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutApi_keyInput | SubjectUpsertWithWhereUniqueWithoutApi_keyInput[]
    createMany?: SubjectCreateManyApi_keyInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutApi_keyInput | SubjectUpdateWithWhereUniqueWithoutApi_keyInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutApi_keyInput | SubjectUpdateManyWithWhereWithoutApi_keyInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type AppUserCreateNestedOneWithoutApp_sessionsInput = {
    create?: XOR<AppUserCreateWithoutApp_sessionsInput, AppUserUncheckedCreateWithoutApp_sessionsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutApp_sessionsInput
    connect?: AppUserWhereUniqueInput
  }

  export type AppUserUpdateOneRequiredWithoutApp_sessionsNestedInput = {
    create?: XOR<AppUserCreateWithoutApp_sessionsInput, AppUserUncheckedCreateWithoutApp_sessionsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutApp_sessionsInput
    upsert?: AppUserUpsertWithoutApp_sessionsInput
    connect?: AppUserWhereUniqueInput
    update?: XOR<XOR<AppUserUpdateToOneWithWhereWithoutApp_sessionsInput, AppUserUpdateWithoutApp_sessionsInput>, AppUserUncheckedUpdateWithoutApp_sessionsInput>
  }

  export type ApiKeyCreateNestedOneWithoutUsersInput = {
    create?: XOR<ApiKeyCreateWithoutUsersInput, ApiKeyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUsersInput
    connect?: ApiKeyWhereUniqueInput
  }

  export type UserAccountCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAccountCreateWithoutUserInput, UserAccountUncheckedCreateWithoutUserInput> | UserAccountCreateWithoutUserInput[] | UserAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutUserInput | UserAccountCreateOrConnectWithoutUserInput[]
    createMany?: UserAccountCreateManyUserInputEnvelope
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuthLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthLogCreateWithoutUserInput, AuthLogUncheckedCreateWithoutUserInput> | AuthLogCreateWithoutUserInput[] | AuthLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthLogCreateOrConnectWithoutUserInput | AuthLogCreateOrConnectWithoutUserInput[]
    createMany?: AuthLogCreateManyUserInputEnvelope
    connect?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
  }

  export type UserQuestionnaireAttemptCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutUserInput, UserQuestionnaireAttemptUncheckedCreateWithoutUserInput> | UserQuestionnaireAttemptCreateWithoutUserInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutUserInput | UserQuestionnaireAttemptCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionnaireAttemptCreateManyUserInputEnvelope
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
  }

  export type UserQuestionAnswerCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserTestSelectionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTestSelectionCreateWithoutUserInput, UserTestSelectionUncheckedCreateWithoutUserInput> | UserTestSelectionCreateWithoutUserInput[] | UserTestSelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutUserInput | UserTestSelectionCreateOrConnectWithoutUserInput[]
    createMany?: UserTestSelectionCreateManyUserInputEnvelope
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
  }

  export type UserAccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAccountCreateWithoutUserInput, UserAccountUncheckedCreateWithoutUserInput> | UserAccountCreateWithoutUserInput[] | UserAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutUserInput | UserAccountCreateOrConnectWithoutUserInput[]
    createMany?: UserAccountCreateManyUserInputEnvelope
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuthLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthLogCreateWithoutUserInput, AuthLogUncheckedCreateWithoutUserInput> | AuthLogCreateWithoutUserInput[] | AuthLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthLogCreateOrConnectWithoutUserInput | AuthLogCreateOrConnectWithoutUserInput[]
    createMany?: AuthLogCreateManyUserInputEnvelope
    connect?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
  }

  export type UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutUserInput, UserQuestionnaireAttemptUncheckedCreateWithoutUserInput> | UserQuestionnaireAttemptCreateWithoutUserInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutUserInput | UserQuestionnaireAttemptCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionnaireAttemptCreateManyUserInputEnvelope
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserTestSelectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserTestSelectionCreateWithoutUserInput, UserTestSelectionUncheckedCreateWithoutUserInput> | UserTestSelectionCreateWithoutUserInput[] | UserTestSelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutUserInput | UserTestSelectionCreateOrConnectWithoutUserInput[]
    createMany?: UserTestSelectionCreateManyUserInputEnvelope
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
  }

  export type ApiKeyUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ApiKeyCreateWithoutUsersInput, ApiKeyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUsersInput
    upsert?: ApiKeyUpsertWithoutUsersInput
    connect?: ApiKeyWhereUniqueInput
    update?: XOR<XOR<ApiKeyUpdateToOneWithWhereWithoutUsersInput, ApiKeyUpdateWithoutUsersInput>, ApiKeyUncheckedUpdateWithoutUsersInput>
  }

  export type UserAccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAccountCreateWithoutUserInput, UserAccountUncheckedCreateWithoutUserInput> | UserAccountCreateWithoutUserInput[] | UserAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutUserInput | UserAccountCreateOrConnectWithoutUserInput[]
    upsert?: UserAccountUpsertWithWhereUniqueWithoutUserInput | UserAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAccountCreateManyUserInputEnvelope
    set?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    disconnect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    delete?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    update?: UserAccountUpdateWithWhereUniqueWithoutUserInput | UserAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAccountUpdateManyWithWhereWithoutUserInput | UserAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAccountScalarWhereInput | UserAccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuthLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthLogCreateWithoutUserInput, AuthLogUncheckedCreateWithoutUserInput> | AuthLogCreateWithoutUserInput[] | AuthLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthLogCreateOrConnectWithoutUserInput | AuthLogCreateOrConnectWithoutUserInput[]
    upsert?: AuthLogUpsertWithWhereUniqueWithoutUserInput | AuthLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthLogCreateManyUserInputEnvelope
    set?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    disconnect?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    delete?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    connect?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    update?: AuthLogUpdateWithWhereUniqueWithoutUserInput | AuthLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthLogUpdateManyWithWhereWithoutUserInput | AuthLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthLogScalarWhereInput | AuthLogScalarWhereInput[]
  }

  export type UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutUserInput, UserQuestionnaireAttemptUncheckedCreateWithoutUserInput> | UserQuestionnaireAttemptCreateWithoutUserInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutUserInput | UserQuestionnaireAttemptCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutUserInput | UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionnaireAttemptCreateManyUserInputEnvelope
    set?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    disconnect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    delete?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    update?: UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutUserInput | UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionnaireAttemptUpdateManyWithWhereWithoutUserInput | UserQuestionnaireAttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionnaireAttemptScalarWhereInput | UserQuestionnaireAttemptScalarWhereInput[]
  }

  export type UserQuestionAnswerUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserTestSelectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTestSelectionCreateWithoutUserInput, UserTestSelectionUncheckedCreateWithoutUserInput> | UserTestSelectionCreateWithoutUserInput[] | UserTestSelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutUserInput | UserTestSelectionCreateOrConnectWithoutUserInput[]
    upsert?: UserTestSelectionUpsertWithWhereUniqueWithoutUserInput | UserTestSelectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTestSelectionCreateManyUserInputEnvelope
    set?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    disconnect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    delete?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    update?: UserTestSelectionUpdateWithWhereUniqueWithoutUserInput | UserTestSelectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTestSelectionUpdateManyWithWhereWithoutUserInput | UserTestSelectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTestSelectionScalarWhereInput | UserTestSelectionScalarWhereInput[]
  }

  export type UserAccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAccountCreateWithoutUserInput, UserAccountUncheckedCreateWithoutUserInput> | UserAccountCreateWithoutUserInput[] | UserAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutUserInput | UserAccountCreateOrConnectWithoutUserInput[]
    upsert?: UserAccountUpsertWithWhereUniqueWithoutUserInput | UserAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAccountCreateManyUserInputEnvelope
    set?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    disconnect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    delete?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    update?: UserAccountUpdateWithWhereUniqueWithoutUserInput | UserAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAccountUpdateManyWithWhereWithoutUserInput | UserAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAccountScalarWhereInput | UserAccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuthLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthLogCreateWithoutUserInput, AuthLogUncheckedCreateWithoutUserInput> | AuthLogCreateWithoutUserInput[] | AuthLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthLogCreateOrConnectWithoutUserInput | AuthLogCreateOrConnectWithoutUserInput[]
    upsert?: AuthLogUpsertWithWhereUniqueWithoutUserInput | AuthLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthLogCreateManyUserInputEnvelope
    set?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    disconnect?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    delete?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    connect?: AuthLogWhereUniqueInput | AuthLogWhereUniqueInput[]
    update?: AuthLogUpdateWithWhereUniqueWithoutUserInput | AuthLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthLogUpdateManyWithWhereWithoutUserInput | AuthLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthLogScalarWhereInput | AuthLogScalarWhereInput[]
  }

  export type UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutUserInput, UserQuestionnaireAttemptUncheckedCreateWithoutUserInput> | UserQuestionnaireAttemptCreateWithoutUserInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutUserInput | UserQuestionnaireAttemptCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutUserInput | UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionnaireAttemptCreateManyUserInputEnvelope
    set?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    disconnect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    delete?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    update?: UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutUserInput | UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionnaireAttemptUpdateManyWithWhereWithoutUserInput | UserQuestionnaireAttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionnaireAttemptScalarWhereInput | UserQuestionnaireAttemptScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserTestSelectionCreateWithoutUserInput, UserTestSelectionUncheckedCreateWithoutUserInput> | UserTestSelectionCreateWithoutUserInput[] | UserTestSelectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutUserInput | UserTestSelectionCreateOrConnectWithoutUserInput[]
    upsert?: UserTestSelectionUpsertWithWhereUniqueWithoutUserInput | UserTestSelectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserTestSelectionCreateManyUserInputEnvelope
    set?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    disconnect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    delete?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    update?: UserTestSelectionUpdateWithWhereUniqueWithoutUserInput | UserTestSelectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserTestSelectionUpdateManyWithWhereWithoutUserInput | UserTestSelectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserTestSelectionScalarWhereInput | UserTestSelectionScalarWhereInput[]
  }

  export type UserAccountCreateNestedManyWithoutAccountInput = {
    create?: XOR<UserAccountCreateWithoutAccountInput, UserAccountUncheckedCreateWithoutAccountInput> | UserAccountCreateWithoutAccountInput[] | UserAccountUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutAccountInput | UserAccountCreateOrConnectWithoutAccountInput[]
    createMany?: UserAccountCreateManyAccountInputEnvelope
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
  }

  export type UserAccountUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<UserAccountCreateWithoutAccountInput, UserAccountUncheckedCreateWithoutAccountInput> | UserAccountCreateWithoutAccountInput[] | UserAccountUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutAccountInput | UserAccountCreateOrConnectWithoutAccountInput[]
    createMany?: UserAccountCreateManyAccountInputEnvelope
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
  }

  export type UserAccountUpdateManyWithoutAccountNestedInput = {
    create?: XOR<UserAccountCreateWithoutAccountInput, UserAccountUncheckedCreateWithoutAccountInput> | UserAccountCreateWithoutAccountInput[] | UserAccountUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutAccountInput | UserAccountCreateOrConnectWithoutAccountInput[]
    upsert?: UserAccountUpsertWithWhereUniqueWithoutAccountInput | UserAccountUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: UserAccountCreateManyAccountInputEnvelope
    set?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    disconnect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    delete?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    update?: UserAccountUpdateWithWhereUniqueWithoutAccountInput | UserAccountUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: UserAccountUpdateManyWithWhereWithoutAccountInput | UserAccountUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: UserAccountScalarWhereInput | UserAccountScalarWhereInput[]
  }

  export type UserAccountUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<UserAccountCreateWithoutAccountInput, UserAccountUncheckedCreateWithoutAccountInput> | UserAccountCreateWithoutAccountInput[] | UserAccountUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserAccountCreateOrConnectWithoutAccountInput | UserAccountCreateOrConnectWithoutAccountInput[]
    upsert?: UserAccountUpsertWithWhereUniqueWithoutAccountInput | UserAccountUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: UserAccountCreateManyAccountInputEnvelope
    set?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    disconnect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    delete?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    connect?: UserAccountWhereUniqueInput | UserAccountWhereUniqueInput[]
    update?: UserAccountUpdateWithWhereUniqueWithoutAccountInput | UserAccountUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: UserAccountUpdateManyWithWhereWithoutAccountInput | UserAccountUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: UserAccountScalarWhereInput | UserAccountScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutUser_accountsInput = {
    create?: XOR<AccountCreateWithoutUser_accountsInput, AccountUncheckedCreateWithoutUser_accountsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUser_accountsInput
    connect?: AccountWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type AccountUpdateOneRequiredWithoutUser_accountsNestedInput = {
    create?: XOR<AccountCreateWithoutUser_accountsInput, AccountUncheckedCreateWithoutUser_accountsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUser_accountsInput
    upsert?: AccountUpsertWithoutUser_accountsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutUser_accountsInput, AccountUpdateWithoutUser_accountsInput>, AccountUncheckedUpdateWithoutUser_accountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAuth_logsInput = {
    create?: XOR<UserCreateWithoutAuth_logsInput, UserUncheckedCreateWithoutAuth_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuth_logsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAuthEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.AuthEventType
  }

  export type EnumAuthEventStatusFieldUpdateOperationsInput = {
    set?: $Enums.AuthEventStatus
  }

  export type UserUpdateOneWithoutAuth_logsNestedInput = {
    create?: XOR<UserCreateWithoutAuth_logsInput, UserUncheckedCreateWithoutAuth_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuth_logsInput
    upsert?: UserUpsertWithoutAuth_logsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuth_logsInput, UserUpdateWithoutAuth_logsInput>, UserUncheckedUpdateWithoutAuth_logsInput>
  }

  export type AppUserCreateNestedOneWithoutPassword_resetsInput = {
    create?: XOR<AppUserCreateWithoutPassword_resetsInput, AppUserUncheckedCreateWithoutPassword_resetsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutPassword_resetsInput
    connect?: AppUserWhereUniqueInput
  }

  export type AppUserUpdateOneRequiredWithoutPassword_resetsNestedInput = {
    create?: XOR<AppUserCreateWithoutPassword_resetsInput, AppUserUncheckedCreateWithoutPassword_resetsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutPassword_resetsInput
    upsert?: AppUserUpsertWithoutPassword_resetsInput
    connect?: AppUserWhereUniqueInput
    update?: XOR<XOR<AppUserUpdateToOneWithWhereWithoutPassword_resetsInput, AppUserUpdateWithoutPassword_resetsInput>, AppUserUncheckedUpdateWithoutPassword_resetsInput>
  }

  export type AppUserCreateNestedOneWithoutAuth_eventsInput = {
    create?: XOR<AppUserCreateWithoutAuth_eventsInput, AppUserUncheckedCreateWithoutAuth_eventsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutAuth_eventsInput
    connect?: AppUserWhereUniqueInput
  }

  export type AppUserUpdateOneRequiredWithoutAuth_eventsNestedInput = {
    create?: XOR<AppUserCreateWithoutAuth_eventsInput, AppUserUncheckedCreateWithoutAuth_eventsInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutAuth_eventsInput
    upsert?: AppUserUpsertWithoutAuth_eventsInput
    connect?: AppUserWhereUniqueInput
    update?: XOR<XOR<AppUserUpdateToOneWithWhereWithoutAuth_eventsInput, AppUserUpdateWithoutAuth_eventsInput>, AppUserUncheckedUpdateWithoutAuth_eventsInput>
  }

  export type ApiKeyCreateNestedOneWithoutTest_typesInput = {
    create?: XOR<ApiKeyCreateWithoutTest_typesInput, ApiKeyUncheckedCreateWithoutTest_typesInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutTest_typesInput
    connect?: ApiKeyWhereUniqueInput
  }

  export type TestSubjectCreateNestedManyWithoutTest_typeInput = {
    create?: XOR<TestSubjectCreateWithoutTest_typeInput, TestSubjectUncheckedCreateWithoutTest_typeInput> | TestSubjectCreateWithoutTest_typeInput[] | TestSubjectUncheckedCreateWithoutTest_typeInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutTest_typeInput | TestSubjectCreateOrConnectWithoutTest_typeInput[]
    createMany?: TestSubjectCreateManyTest_typeInputEnvelope
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
  }

  export type UserTestSelectionCreateNestedManyWithoutTestTypeInput = {
    create?: XOR<UserTestSelectionCreateWithoutTestTypeInput, UserTestSelectionUncheckedCreateWithoutTestTypeInput> | UserTestSelectionCreateWithoutTestTypeInput[] | UserTestSelectionUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutTestTypeInput | UserTestSelectionCreateOrConnectWithoutTestTypeInput[]
    createMany?: UserTestSelectionCreateManyTestTypeInputEnvelope
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
  }

  export type TestSubjectUncheckedCreateNestedManyWithoutTest_typeInput = {
    create?: XOR<TestSubjectCreateWithoutTest_typeInput, TestSubjectUncheckedCreateWithoutTest_typeInput> | TestSubjectCreateWithoutTest_typeInput[] | TestSubjectUncheckedCreateWithoutTest_typeInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutTest_typeInput | TestSubjectCreateOrConnectWithoutTest_typeInput[]
    createMany?: TestSubjectCreateManyTest_typeInputEnvelope
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
  }

  export type UserTestSelectionUncheckedCreateNestedManyWithoutTestTypeInput = {
    create?: XOR<UserTestSelectionCreateWithoutTestTypeInput, UserTestSelectionUncheckedCreateWithoutTestTypeInput> | UserTestSelectionCreateWithoutTestTypeInput[] | UserTestSelectionUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutTestTypeInput | UserTestSelectionCreateOrConnectWithoutTestTypeInput[]
    createMany?: UserTestSelectionCreateManyTestTypeInputEnvelope
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
  }

  export type ApiKeyUpdateOneWithoutTest_typesNestedInput = {
    create?: XOR<ApiKeyCreateWithoutTest_typesInput, ApiKeyUncheckedCreateWithoutTest_typesInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutTest_typesInput
    upsert?: ApiKeyUpsertWithoutTest_typesInput
    disconnect?: ApiKeyWhereInput | boolean
    delete?: ApiKeyWhereInput | boolean
    connect?: ApiKeyWhereUniqueInput
    update?: XOR<XOR<ApiKeyUpdateToOneWithWhereWithoutTest_typesInput, ApiKeyUpdateWithoutTest_typesInput>, ApiKeyUncheckedUpdateWithoutTest_typesInput>
  }

  export type TestSubjectUpdateManyWithoutTest_typeNestedInput = {
    create?: XOR<TestSubjectCreateWithoutTest_typeInput, TestSubjectUncheckedCreateWithoutTest_typeInput> | TestSubjectCreateWithoutTest_typeInput[] | TestSubjectUncheckedCreateWithoutTest_typeInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutTest_typeInput | TestSubjectCreateOrConnectWithoutTest_typeInput[]
    upsert?: TestSubjectUpsertWithWhereUniqueWithoutTest_typeInput | TestSubjectUpsertWithWhereUniqueWithoutTest_typeInput[]
    createMany?: TestSubjectCreateManyTest_typeInputEnvelope
    set?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    disconnect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    delete?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    update?: TestSubjectUpdateWithWhereUniqueWithoutTest_typeInput | TestSubjectUpdateWithWhereUniqueWithoutTest_typeInput[]
    updateMany?: TestSubjectUpdateManyWithWhereWithoutTest_typeInput | TestSubjectUpdateManyWithWhereWithoutTest_typeInput[]
    deleteMany?: TestSubjectScalarWhereInput | TestSubjectScalarWhereInput[]
  }

  export type UserTestSelectionUpdateManyWithoutTestTypeNestedInput = {
    create?: XOR<UserTestSelectionCreateWithoutTestTypeInput, UserTestSelectionUncheckedCreateWithoutTestTypeInput> | UserTestSelectionCreateWithoutTestTypeInput[] | UserTestSelectionUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutTestTypeInput | UserTestSelectionCreateOrConnectWithoutTestTypeInput[]
    upsert?: UserTestSelectionUpsertWithWhereUniqueWithoutTestTypeInput | UserTestSelectionUpsertWithWhereUniqueWithoutTestTypeInput[]
    createMany?: UserTestSelectionCreateManyTestTypeInputEnvelope
    set?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    disconnect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    delete?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    update?: UserTestSelectionUpdateWithWhereUniqueWithoutTestTypeInput | UserTestSelectionUpdateWithWhereUniqueWithoutTestTypeInput[]
    updateMany?: UserTestSelectionUpdateManyWithWhereWithoutTestTypeInput | UserTestSelectionUpdateManyWithWhereWithoutTestTypeInput[]
    deleteMany?: UserTestSelectionScalarWhereInput | UserTestSelectionScalarWhereInput[]
  }

  export type TestSubjectUncheckedUpdateManyWithoutTest_typeNestedInput = {
    create?: XOR<TestSubjectCreateWithoutTest_typeInput, TestSubjectUncheckedCreateWithoutTest_typeInput> | TestSubjectCreateWithoutTest_typeInput[] | TestSubjectUncheckedCreateWithoutTest_typeInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutTest_typeInput | TestSubjectCreateOrConnectWithoutTest_typeInput[]
    upsert?: TestSubjectUpsertWithWhereUniqueWithoutTest_typeInput | TestSubjectUpsertWithWhereUniqueWithoutTest_typeInput[]
    createMany?: TestSubjectCreateManyTest_typeInputEnvelope
    set?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    disconnect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    delete?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    update?: TestSubjectUpdateWithWhereUniqueWithoutTest_typeInput | TestSubjectUpdateWithWhereUniqueWithoutTest_typeInput[]
    updateMany?: TestSubjectUpdateManyWithWhereWithoutTest_typeInput | TestSubjectUpdateManyWithWhereWithoutTest_typeInput[]
    deleteMany?: TestSubjectScalarWhereInput | TestSubjectScalarWhereInput[]
  }

  export type UserTestSelectionUncheckedUpdateManyWithoutTestTypeNestedInput = {
    create?: XOR<UserTestSelectionCreateWithoutTestTypeInput, UserTestSelectionUncheckedCreateWithoutTestTypeInput> | UserTestSelectionCreateWithoutTestTypeInput[] | UserTestSelectionUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: UserTestSelectionCreateOrConnectWithoutTestTypeInput | UserTestSelectionCreateOrConnectWithoutTestTypeInput[]
    upsert?: UserTestSelectionUpsertWithWhereUniqueWithoutTestTypeInput | UserTestSelectionUpsertWithWhereUniqueWithoutTestTypeInput[]
    createMany?: UserTestSelectionCreateManyTestTypeInputEnvelope
    set?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    disconnect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    delete?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    connect?: UserTestSelectionWhereUniqueInput | UserTestSelectionWhereUniqueInput[]
    update?: UserTestSelectionUpdateWithWhereUniqueWithoutTestTypeInput | UserTestSelectionUpdateWithWhereUniqueWithoutTestTypeInput[]
    updateMany?: UserTestSelectionUpdateManyWithWhereWithoutTestTypeInput | UserTestSelectionUpdateManyWithWhereWithoutTestTypeInput[]
    deleteMany?: UserTestSelectionScalarWhereInput | UserTestSelectionScalarWhereInput[]
  }

  export type ApiKeyCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<ApiKeyCreateWithoutSubjectsInput, ApiKeyUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutSubjectsInput
    connect?: ApiKeyWhereUniqueInput
  }

  export type SubjectDetailCreateNestedOneWithoutSubjectInput = {
    create?: XOR<SubjectDetailCreateWithoutSubjectInput, SubjectDetailUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: SubjectDetailCreateOrConnectWithoutSubjectInput
    connect?: SubjectDetailWhereUniqueInput
  }

  export type SubjectLevelCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SubjectLevelCreateWithoutSubjectInput, SubjectLevelUncheckedCreateWithoutSubjectInput> | SubjectLevelCreateWithoutSubjectInput[] | SubjectLevelUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectLevelCreateOrConnectWithoutSubjectInput | SubjectLevelCreateOrConnectWithoutSubjectInput[]
    createMany?: SubjectLevelCreateManySubjectInputEnvelope
    connect?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
  }

  export type TestSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TestSubjectCreateWithoutSubjectInput, TestSubjectUncheckedCreateWithoutSubjectInput> | TestSubjectCreateWithoutSubjectInput[] | TestSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutSubjectInput | TestSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: TestSubjectCreateManySubjectInputEnvelope
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
  }

  export type SubjectDetailUncheckedCreateNestedOneWithoutSubjectInput = {
    create?: XOR<SubjectDetailCreateWithoutSubjectInput, SubjectDetailUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: SubjectDetailCreateOrConnectWithoutSubjectInput
    connect?: SubjectDetailWhereUniqueInput
  }

  export type SubjectLevelUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SubjectLevelCreateWithoutSubjectInput, SubjectLevelUncheckedCreateWithoutSubjectInput> | SubjectLevelCreateWithoutSubjectInput[] | SubjectLevelUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectLevelCreateOrConnectWithoutSubjectInput | SubjectLevelCreateOrConnectWithoutSubjectInput[]
    createMany?: SubjectLevelCreateManySubjectInputEnvelope
    connect?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
  }

  export type TestSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TestSubjectCreateWithoutSubjectInput, TestSubjectUncheckedCreateWithoutSubjectInput> | TestSubjectCreateWithoutSubjectInput[] | TestSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutSubjectInput | TestSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: TestSubjectCreateManySubjectInputEnvelope
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApiKeyUpdateOneWithoutSubjectsNestedInput = {
    create?: XOR<ApiKeyCreateWithoutSubjectsInput, ApiKeyUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutSubjectsInput
    upsert?: ApiKeyUpsertWithoutSubjectsInput
    disconnect?: ApiKeyWhereInput | boolean
    delete?: ApiKeyWhereInput | boolean
    connect?: ApiKeyWhereUniqueInput
    update?: XOR<XOR<ApiKeyUpdateToOneWithWhereWithoutSubjectsInput, ApiKeyUpdateWithoutSubjectsInput>, ApiKeyUncheckedUpdateWithoutSubjectsInput>
  }

  export type SubjectDetailUpdateOneWithoutSubjectNestedInput = {
    create?: XOR<SubjectDetailCreateWithoutSubjectInput, SubjectDetailUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: SubjectDetailCreateOrConnectWithoutSubjectInput
    upsert?: SubjectDetailUpsertWithoutSubjectInput
    disconnect?: SubjectDetailWhereInput | boolean
    delete?: SubjectDetailWhereInput | boolean
    connect?: SubjectDetailWhereUniqueInput
    update?: XOR<XOR<SubjectDetailUpdateToOneWithWhereWithoutSubjectInput, SubjectDetailUpdateWithoutSubjectInput>, SubjectDetailUncheckedUpdateWithoutSubjectInput>
  }

  export type SubjectLevelUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SubjectLevelCreateWithoutSubjectInput, SubjectLevelUncheckedCreateWithoutSubjectInput> | SubjectLevelCreateWithoutSubjectInput[] | SubjectLevelUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectLevelCreateOrConnectWithoutSubjectInput | SubjectLevelCreateOrConnectWithoutSubjectInput[]
    upsert?: SubjectLevelUpsertWithWhereUniqueWithoutSubjectInput | SubjectLevelUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SubjectLevelCreateManySubjectInputEnvelope
    set?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    disconnect?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    delete?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    connect?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    update?: SubjectLevelUpdateWithWhereUniqueWithoutSubjectInput | SubjectLevelUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SubjectLevelUpdateManyWithWhereWithoutSubjectInput | SubjectLevelUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SubjectLevelScalarWhereInput | SubjectLevelScalarWhereInput[]
  }

  export type TestSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TestSubjectCreateWithoutSubjectInput, TestSubjectUncheckedCreateWithoutSubjectInput> | TestSubjectCreateWithoutSubjectInput[] | TestSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutSubjectInput | TestSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: TestSubjectUpsertWithWhereUniqueWithoutSubjectInput | TestSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TestSubjectCreateManySubjectInputEnvelope
    set?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    disconnect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    delete?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    update?: TestSubjectUpdateWithWhereUniqueWithoutSubjectInput | TestSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TestSubjectUpdateManyWithWhereWithoutSubjectInput | TestSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TestSubjectScalarWhereInput | TestSubjectScalarWhereInput[]
  }

  export type SubjectDetailUncheckedUpdateOneWithoutSubjectNestedInput = {
    create?: XOR<SubjectDetailCreateWithoutSubjectInput, SubjectDetailUncheckedCreateWithoutSubjectInput>
    connectOrCreate?: SubjectDetailCreateOrConnectWithoutSubjectInput
    upsert?: SubjectDetailUpsertWithoutSubjectInput
    disconnect?: SubjectDetailWhereInput | boolean
    delete?: SubjectDetailWhereInput | boolean
    connect?: SubjectDetailWhereUniqueInput
    update?: XOR<XOR<SubjectDetailUpdateToOneWithWhereWithoutSubjectInput, SubjectDetailUpdateWithoutSubjectInput>, SubjectDetailUncheckedUpdateWithoutSubjectInput>
  }

  export type SubjectLevelUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SubjectLevelCreateWithoutSubjectInput, SubjectLevelUncheckedCreateWithoutSubjectInput> | SubjectLevelCreateWithoutSubjectInput[] | SubjectLevelUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectLevelCreateOrConnectWithoutSubjectInput | SubjectLevelCreateOrConnectWithoutSubjectInput[]
    upsert?: SubjectLevelUpsertWithWhereUniqueWithoutSubjectInput | SubjectLevelUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SubjectLevelCreateManySubjectInputEnvelope
    set?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    disconnect?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    delete?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    connect?: SubjectLevelWhereUniqueInput | SubjectLevelWhereUniqueInput[]
    update?: SubjectLevelUpdateWithWhereUniqueWithoutSubjectInput | SubjectLevelUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SubjectLevelUpdateManyWithWhereWithoutSubjectInput | SubjectLevelUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SubjectLevelScalarWhereInput | SubjectLevelScalarWhereInput[]
  }

  export type TestSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TestSubjectCreateWithoutSubjectInput, TestSubjectUncheckedCreateWithoutSubjectInput> | TestSubjectCreateWithoutSubjectInput[] | TestSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestSubjectCreateOrConnectWithoutSubjectInput | TestSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: TestSubjectUpsertWithWhereUniqueWithoutSubjectInput | TestSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TestSubjectCreateManySubjectInputEnvelope
    set?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    disconnect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    delete?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    connect?: TestSubjectWhereUniqueInput | TestSubjectWhereUniqueInput[]
    update?: TestSubjectUpdateWithWhereUniqueWithoutSubjectInput | TestSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TestSubjectUpdateManyWithWhereWithoutSubjectInput | TestSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TestSubjectScalarWhereInput | TestSubjectScalarWhereInput[]
  }

  export type SubjectCreateNestedOneWithoutSubject_detailInput = {
    create?: XOR<SubjectCreateWithoutSubject_detailInput, SubjectUncheckedCreateWithoutSubject_detailInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSubject_detailInput
    connect?: SubjectWhereUniqueInput
  }

  export type SubjectUpdateOneRequiredWithoutSubject_detailNestedInput = {
    create?: XOR<SubjectCreateWithoutSubject_detailInput, SubjectUncheckedCreateWithoutSubject_detailInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSubject_detailInput
    upsert?: SubjectUpsertWithoutSubject_detailInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutSubject_detailInput, SubjectUpdateWithoutSubject_detailInput>, SubjectUncheckedUpdateWithoutSubject_detailInput>
  }

  export type SubjectCreateNestedOneWithoutSubject_levelsInput = {
    create?: XOR<SubjectCreateWithoutSubject_levelsInput, SubjectUncheckedCreateWithoutSubject_levelsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSubject_levelsInput
    connect?: SubjectWhereUniqueInput
  }

  export type QuestionnaireCreateNestedManyWithoutSubjectLevelInput = {
    create?: XOR<QuestionnaireCreateWithoutSubjectLevelInput, QuestionnaireUncheckedCreateWithoutSubjectLevelInput> | QuestionnaireCreateWithoutSubjectLevelInput[] | QuestionnaireUncheckedCreateWithoutSubjectLevelInput[]
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutSubjectLevelInput | QuestionnaireCreateOrConnectWithoutSubjectLevelInput[]
    createMany?: QuestionnaireCreateManySubjectLevelInputEnvelope
    connect?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
  }

  export type QuestionnaireUncheckedCreateNestedManyWithoutSubjectLevelInput = {
    create?: XOR<QuestionnaireCreateWithoutSubjectLevelInput, QuestionnaireUncheckedCreateWithoutSubjectLevelInput> | QuestionnaireCreateWithoutSubjectLevelInput[] | QuestionnaireUncheckedCreateWithoutSubjectLevelInput[]
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutSubjectLevelInput | QuestionnaireCreateOrConnectWithoutSubjectLevelInput[]
    createMany?: QuestionnaireCreateManySubjectLevelInputEnvelope
    connect?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
  }

  export type SubjectUpdateOneRequiredWithoutSubject_levelsNestedInput = {
    create?: XOR<SubjectCreateWithoutSubject_levelsInput, SubjectUncheckedCreateWithoutSubject_levelsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutSubject_levelsInput
    upsert?: SubjectUpsertWithoutSubject_levelsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutSubject_levelsInput, SubjectUpdateWithoutSubject_levelsInput>, SubjectUncheckedUpdateWithoutSubject_levelsInput>
  }

  export type QuestionnaireUpdateManyWithoutSubjectLevelNestedInput = {
    create?: XOR<QuestionnaireCreateWithoutSubjectLevelInput, QuestionnaireUncheckedCreateWithoutSubjectLevelInput> | QuestionnaireCreateWithoutSubjectLevelInput[] | QuestionnaireUncheckedCreateWithoutSubjectLevelInput[]
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutSubjectLevelInput | QuestionnaireCreateOrConnectWithoutSubjectLevelInput[]
    upsert?: QuestionnaireUpsertWithWhereUniqueWithoutSubjectLevelInput | QuestionnaireUpsertWithWhereUniqueWithoutSubjectLevelInput[]
    createMany?: QuestionnaireCreateManySubjectLevelInputEnvelope
    set?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    disconnect?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    delete?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    connect?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    update?: QuestionnaireUpdateWithWhereUniqueWithoutSubjectLevelInput | QuestionnaireUpdateWithWhereUniqueWithoutSubjectLevelInput[]
    updateMany?: QuestionnaireUpdateManyWithWhereWithoutSubjectLevelInput | QuestionnaireUpdateManyWithWhereWithoutSubjectLevelInput[]
    deleteMany?: QuestionnaireScalarWhereInput | QuestionnaireScalarWhereInput[]
  }

  export type QuestionnaireUncheckedUpdateManyWithoutSubjectLevelNestedInput = {
    create?: XOR<QuestionnaireCreateWithoutSubjectLevelInput, QuestionnaireUncheckedCreateWithoutSubjectLevelInput> | QuestionnaireCreateWithoutSubjectLevelInput[] | QuestionnaireUncheckedCreateWithoutSubjectLevelInput[]
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutSubjectLevelInput | QuestionnaireCreateOrConnectWithoutSubjectLevelInput[]
    upsert?: QuestionnaireUpsertWithWhereUniqueWithoutSubjectLevelInput | QuestionnaireUpsertWithWhereUniqueWithoutSubjectLevelInput[]
    createMany?: QuestionnaireCreateManySubjectLevelInputEnvelope
    set?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    disconnect?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    delete?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    connect?: QuestionnaireWhereUniqueInput | QuestionnaireWhereUniqueInput[]
    update?: QuestionnaireUpdateWithWhereUniqueWithoutSubjectLevelInput | QuestionnaireUpdateWithWhereUniqueWithoutSubjectLevelInput[]
    updateMany?: QuestionnaireUpdateManyWithWhereWithoutSubjectLevelInput | QuestionnaireUpdateManyWithWhereWithoutSubjectLevelInput[]
    deleteMany?: QuestionnaireScalarWhereInput | QuestionnaireScalarWhereInput[]
  }

  export type TestTypeCreateNestedOneWithoutTestSubjectsInput = {
    create?: XOR<TestTypeCreateWithoutTestSubjectsInput, TestTypeUncheckedCreateWithoutTestSubjectsInput>
    connectOrCreate?: TestTypeCreateOrConnectWithoutTestSubjectsInput
    connect?: TestTypeWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutTestSubjectsInput = {
    create?: XOR<SubjectCreateWithoutTestSubjectsInput, SubjectUncheckedCreateWithoutTestSubjectsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTestSubjectsInput
    connect?: SubjectWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TestTypeUpdateOneRequiredWithoutTestSubjectsNestedInput = {
    create?: XOR<TestTypeCreateWithoutTestSubjectsInput, TestTypeUncheckedCreateWithoutTestSubjectsInput>
    connectOrCreate?: TestTypeCreateOrConnectWithoutTestSubjectsInput
    upsert?: TestTypeUpsertWithoutTestSubjectsInput
    connect?: TestTypeWhereUniqueInput
    update?: XOR<XOR<TestTypeUpdateToOneWithWhereWithoutTestSubjectsInput, TestTypeUpdateWithoutTestSubjectsInput>, TestTypeUncheckedUpdateWithoutTestSubjectsInput>
  }

  export type SubjectUpdateOneRequiredWithoutTestSubjectsNestedInput = {
    create?: XOR<SubjectCreateWithoutTestSubjectsInput, SubjectUncheckedCreateWithoutTestSubjectsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTestSubjectsInput
    upsert?: SubjectUpsertWithoutTestSubjectsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutTestSubjectsInput, SubjectUpdateWithoutTestSubjectsInput>, SubjectUncheckedUpdateWithoutTestSubjectsInput>
  }

  export type GlossaryTermCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GlossaryTermCreateWithoutCategoryInput, GlossaryTermUncheckedCreateWithoutCategoryInput> | GlossaryTermCreateWithoutCategoryInput[] | GlossaryTermUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GlossaryTermCreateOrConnectWithoutCategoryInput | GlossaryTermCreateOrConnectWithoutCategoryInput[]
    createMany?: GlossaryTermCreateManyCategoryInputEnvelope
    connect?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
  }

  export type GlossaryTermUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GlossaryTermCreateWithoutCategoryInput, GlossaryTermUncheckedCreateWithoutCategoryInput> | GlossaryTermCreateWithoutCategoryInput[] | GlossaryTermUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GlossaryTermCreateOrConnectWithoutCategoryInput | GlossaryTermCreateOrConnectWithoutCategoryInput[]
    createMany?: GlossaryTermCreateManyCategoryInputEnvelope
    connect?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
  }

  export type GlossaryTermUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GlossaryTermCreateWithoutCategoryInput, GlossaryTermUncheckedCreateWithoutCategoryInput> | GlossaryTermCreateWithoutCategoryInput[] | GlossaryTermUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GlossaryTermCreateOrConnectWithoutCategoryInput | GlossaryTermCreateOrConnectWithoutCategoryInput[]
    upsert?: GlossaryTermUpsertWithWhereUniqueWithoutCategoryInput | GlossaryTermUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GlossaryTermCreateManyCategoryInputEnvelope
    set?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    disconnect?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    delete?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    connect?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    update?: GlossaryTermUpdateWithWhereUniqueWithoutCategoryInput | GlossaryTermUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GlossaryTermUpdateManyWithWhereWithoutCategoryInput | GlossaryTermUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GlossaryTermScalarWhereInput | GlossaryTermScalarWhereInput[]
  }

  export type GlossaryTermUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GlossaryTermCreateWithoutCategoryInput, GlossaryTermUncheckedCreateWithoutCategoryInput> | GlossaryTermCreateWithoutCategoryInput[] | GlossaryTermUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GlossaryTermCreateOrConnectWithoutCategoryInput | GlossaryTermCreateOrConnectWithoutCategoryInput[]
    upsert?: GlossaryTermUpsertWithWhereUniqueWithoutCategoryInput | GlossaryTermUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GlossaryTermCreateManyCategoryInputEnvelope
    set?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    disconnect?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    delete?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    connect?: GlossaryTermWhereUniqueInput | GlossaryTermWhereUniqueInput[]
    update?: GlossaryTermUpdateWithWhereUniqueWithoutCategoryInput | GlossaryTermUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GlossaryTermUpdateManyWithWhereWithoutCategoryInput | GlossaryTermUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GlossaryTermScalarWhereInput | GlossaryTermScalarWhereInput[]
  }

  export type GlossaryCategoryCreateNestedOneWithoutTermsInput = {
    create?: XOR<GlossaryCategoryCreateWithoutTermsInput, GlossaryCategoryUncheckedCreateWithoutTermsInput>
    connectOrCreate?: GlossaryCategoryCreateOrConnectWithoutTermsInput
    connect?: GlossaryCategoryWhereUniqueInput
  }

  export type GlossaryCategoryUpdateOneRequiredWithoutTermsNestedInput = {
    create?: XOR<GlossaryCategoryCreateWithoutTermsInput, GlossaryCategoryUncheckedCreateWithoutTermsInput>
    connectOrCreate?: GlossaryCategoryCreateOrConnectWithoutTermsInput
    upsert?: GlossaryCategoryUpsertWithoutTermsInput
    connect?: GlossaryCategoryWhereUniqueInput
    update?: XOR<XOR<GlossaryCategoryUpdateToOneWithWhereWithoutTermsInput, GlossaryCategoryUpdateWithoutTermsInput>, GlossaryCategoryUncheckedUpdateWithoutTermsInput>
  }

  export type SubjectLevelCreateNestedOneWithoutQuestionnairesInput = {
    create?: XOR<SubjectLevelCreateWithoutQuestionnairesInput, SubjectLevelUncheckedCreateWithoutQuestionnairesInput>
    connectOrCreate?: SubjectLevelCreateOrConnectWithoutQuestionnairesInput
    connect?: SubjectLevelWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutQuestionnaireInput = {
    create?: XOR<QuestionCreateWithoutQuestionnaireInput, QuestionUncheckedCreateWithoutQuestionnaireInput> | QuestionCreateWithoutQuestionnaireInput[] | QuestionUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionnaireInput | QuestionCreateOrConnectWithoutQuestionnaireInput[]
    createMany?: QuestionCreateManyQuestionnaireInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type UserQuestionnaireAttemptCreateNestedManyWithoutQuestionnaireInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput> | UserQuestionnaireAttemptCreateWithoutQuestionnaireInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput | UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput[]
    createMany?: UserQuestionnaireAttemptCreateManyQuestionnaireInputEnvelope
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutQuestionnaireInput = {
    create?: XOR<QuestionCreateWithoutQuestionnaireInput, QuestionUncheckedCreateWithoutQuestionnaireInput> | QuestionCreateWithoutQuestionnaireInput[] | QuestionUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionnaireInput | QuestionCreateOrConnectWithoutQuestionnaireInput[]
    createMany?: QuestionCreateManyQuestionnaireInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutQuestionnaireInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput> | UserQuestionnaireAttemptCreateWithoutQuestionnaireInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput | UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput[]
    createMany?: UserQuestionnaireAttemptCreateManyQuestionnaireInputEnvelope
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
  }

  export type SubjectLevelUpdateOneRequiredWithoutQuestionnairesNestedInput = {
    create?: XOR<SubjectLevelCreateWithoutQuestionnairesInput, SubjectLevelUncheckedCreateWithoutQuestionnairesInput>
    connectOrCreate?: SubjectLevelCreateOrConnectWithoutQuestionnairesInput
    upsert?: SubjectLevelUpsertWithoutQuestionnairesInput
    connect?: SubjectLevelWhereUniqueInput
    update?: XOR<XOR<SubjectLevelUpdateToOneWithWhereWithoutQuestionnairesInput, SubjectLevelUpdateWithoutQuestionnairesInput>, SubjectLevelUncheckedUpdateWithoutQuestionnairesInput>
  }

  export type QuestionUpdateManyWithoutQuestionnaireNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestionnaireInput, QuestionUncheckedCreateWithoutQuestionnaireInput> | QuestionCreateWithoutQuestionnaireInput[] | QuestionUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionnaireInput | QuestionCreateOrConnectWithoutQuestionnaireInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestionnaireInput | QuestionUpsertWithWhereUniqueWithoutQuestionnaireInput[]
    createMany?: QuestionCreateManyQuestionnaireInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestionnaireInput | QuestionUpdateWithWhereUniqueWithoutQuestionnaireInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestionnaireInput | QuestionUpdateManyWithWhereWithoutQuestionnaireInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type UserQuestionnaireAttemptUpdateManyWithoutQuestionnaireNestedInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput> | UserQuestionnaireAttemptCreateWithoutQuestionnaireInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput | UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput[]
    upsert?: UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutQuestionnaireInput | UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutQuestionnaireInput[]
    createMany?: UserQuestionnaireAttemptCreateManyQuestionnaireInputEnvelope
    set?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    disconnect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    delete?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    update?: UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutQuestionnaireInput | UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutQuestionnaireInput[]
    updateMany?: UserQuestionnaireAttemptUpdateManyWithWhereWithoutQuestionnaireInput | UserQuestionnaireAttemptUpdateManyWithWhereWithoutQuestionnaireInput[]
    deleteMany?: UserQuestionnaireAttemptScalarWhereInput | UserQuestionnaireAttemptScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionnaireNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestionnaireInput, QuestionUncheckedCreateWithoutQuestionnaireInput> | QuestionCreateWithoutQuestionnaireInput[] | QuestionUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionnaireInput | QuestionCreateOrConnectWithoutQuestionnaireInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestionnaireInput | QuestionUpsertWithWhereUniqueWithoutQuestionnaireInput[]
    createMany?: QuestionCreateManyQuestionnaireInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestionnaireInput | QuestionUpdateWithWhereUniqueWithoutQuestionnaireInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestionnaireInput | QuestionUpdateManyWithWhereWithoutQuestionnaireInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type UserQuestionnaireAttemptUncheckedUpdateManyWithoutQuestionnaireNestedInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput> | UserQuestionnaireAttemptCreateWithoutQuestionnaireInput[] | UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput[]
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput | UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput[]
    upsert?: UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutQuestionnaireInput | UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutQuestionnaireInput[]
    createMany?: UserQuestionnaireAttemptCreateManyQuestionnaireInputEnvelope
    set?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    disconnect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    delete?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    connect?: UserQuestionnaireAttemptWhereUniqueInput | UserQuestionnaireAttemptWhereUniqueInput[]
    update?: UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutQuestionnaireInput | UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutQuestionnaireInput[]
    updateMany?: UserQuestionnaireAttemptUpdateManyWithWhereWithoutQuestionnaireInput | UserQuestionnaireAttemptUpdateManyWithWhereWithoutQuestionnaireInput[]
    deleteMany?: UserQuestionnaireAttemptScalarWhereInput | UserQuestionnaireAttemptScalarWhereInput[]
  }

  export type QuestionnaireCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<QuestionnaireCreateWithoutQuestionsInput, QuestionnaireUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutQuestionsInput
    connect?: QuestionnaireWhereUniqueInput
  }

  export type AnswerOptionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<AnswerOptionCreateWithoutQuestionInput, AnswerOptionUncheckedCreateWithoutQuestionInput> | AnswerOptionCreateWithoutQuestionInput[] | AnswerOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerOptionCreateOrConnectWithoutQuestionInput | AnswerOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: AnswerOptionCreateManyQuestionInputEnvelope
    connect?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
  }

  export type UserQuestionAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type AnswerOptionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<AnswerOptionCreateWithoutQuestionInput, AnswerOptionUncheckedCreateWithoutQuestionInput> | AnswerOptionCreateWithoutQuestionInput[] | AnswerOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerOptionCreateOrConnectWithoutQuestionInput | AnswerOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: AnswerOptionCreateManyQuestionInputEnvelope
    connect?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type QuestionnaireUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<QuestionnaireCreateWithoutQuestionsInput, QuestionnaireUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutQuestionsInput
    upsert?: QuestionnaireUpsertWithoutQuestionsInput
    connect?: QuestionnaireWhereUniqueInput
    update?: XOR<XOR<QuestionnaireUpdateToOneWithWhereWithoutQuestionsInput, QuestionnaireUpdateWithoutQuestionsInput>, QuestionnaireUncheckedUpdateWithoutQuestionsInput>
  }

  export type AnswerOptionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<AnswerOptionCreateWithoutQuestionInput, AnswerOptionUncheckedCreateWithoutQuestionInput> | AnswerOptionCreateWithoutQuestionInput[] | AnswerOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerOptionCreateOrConnectWithoutQuestionInput | AnswerOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: AnswerOptionUpsertWithWhereUniqueWithoutQuestionInput | AnswerOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: AnswerOptionCreateManyQuestionInputEnvelope
    set?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    disconnect?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    delete?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    connect?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    update?: AnswerOptionUpdateWithWhereUniqueWithoutQuestionInput | AnswerOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: AnswerOptionUpdateManyWithWhereWithoutQuestionInput | AnswerOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: AnswerOptionScalarWhereInput | AnswerOptionScalarWhereInput[]
  }

  export type UserQuestionAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type AnswerOptionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<AnswerOptionCreateWithoutQuestionInput, AnswerOptionUncheckedCreateWithoutQuestionInput> | AnswerOptionCreateWithoutQuestionInput[] | AnswerOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: AnswerOptionCreateOrConnectWithoutQuestionInput | AnswerOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: AnswerOptionUpsertWithWhereUniqueWithoutQuestionInput | AnswerOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: AnswerOptionCreateManyQuestionInputEnvelope
    set?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    disconnect?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    delete?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    connect?: AnswerOptionWhereUniqueInput | AnswerOptionWhereUniqueInput[]
    update?: AnswerOptionUpdateWithWhereUniqueWithoutQuestionInput | AnswerOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: AnswerOptionUpdateManyWithWhereWithoutQuestionInput | AnswerOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: AnswerOptionScalarWhereInput | AnswerOptionScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutAnswerOptionsInput = {
    create?: XOR<QuestionCreateWithoutAnswerOptionsInput, QuestionUncheckedCreateWithoutAnswerOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswerOptionsInput
    connect?: QuestionWhereUniqueInput
  }

  export type UserQuestionAnswerCreateNestedManyWithoutSelectedAnswerOptionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput> | UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput[] | UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput | UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput[]
    createMany?: UserQuestionAnswerCreateManySelectedAnswerOptionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutSelectedAnswerOptionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput> | UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput[] | UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput | UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput[]
    createMany?: UserQuestionAnswerCreateManySelectedAnswerOptionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type QuestionUpdateOneRequiredWithoutAnswerOptionsNestedInput = {
    create?: XOR<QuestionCreateWithoutAnswerOptionsInput, QuestionUncheckedCreateWithoutAnswerOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutAnswerOptionsInput
    upsert?: QuestionUpsertWithoutAnswerOptionsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutAnswerOptionsInput, QuestionUpdateWithoutAnswerOptionsInput>, QuestionUncheckedUpdateWithoutAnswerOptionsInput>
  }

  export type UserQuestionAnswerUpdateManyWithoutSelectedAnswerOptionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput> | UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput[] | UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput | UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutSelectedAnswerOptionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutSelectedAnswerOptionInput[]
    createMany?: UserQuestionAnswerCreateManySelectedAnswerOptionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutSelectedAnswerOptionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutSelectedAnswerOptionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutSelectedAnswerOptionInput | UserQuestionAnswerUpdateManyWithWhereWithoutSelectedAnswerOptionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutSelectedAnswerOptionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput> | UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput[] | UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput | UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutSelectedAnswerOptionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutSelectedAnswerOptionInput[]
    createMany?: UserQuestionAnswerCreateManySelectedAnswerOptionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutSelectedAnswerOptionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutSelectedAnswerOptionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutSelectedAnswerOptionInput | UserQuestionAnswerUpdateManyWithWhereWithoutSelectedAnswerOptionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutQuestionnaireAttemptsInput = {
    create?: XOR<UserCreateWithoutQuestionnaireAttemptsInput, UserUncheckedCreateWithoutQuestionnaireAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionnaireAttemptsInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionnaireCreateNestedOneWithoutUserAttemptsInput = {
    create?: XOR<QuestionnaireCreateWithoutUserAttemptsInput, QuestionnaireUncheckedCreateWithoutUserAttemptsInput>
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutUserAttemptsInput
    connect?: QuestionnaireWhereUniqueInput
  }

  export type UserQuestionAnswerCreateNestedManyWithoutUserQuestionnaireAttemptInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput> | UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput[] | UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput[]
    createMany?: UserQuestionAnswerCreateManyUserQuestionnaireAttemptInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutUserQuestionnaireAttemptInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput> | UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput[] | UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput[]
    createMany?: UserQuestionAnswerCreateManyUserQuestionnaireAttemptInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumAttemptStatusFieldUpdateOperationsInput = {
    set?: $Enums.AttemptStatus
  }

  export type UserUpdateOneRequiredWithoutQuestionnaireAttemptsNestedInput = {
    create?: XOR<UserCreateWithoutQuestionnaireAttemptsInput, UserUncheckedCreateWithoutQuestionnaireAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionnaireAttemptsInput
    upsert?: UserUpsertWithoutQuestionnaireAttemptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionnaireAttemptsInput, UserUpdateWithoutQuestionnaireAttemptsInput>, UserUncheckedUpdateWithoutQuestionnaireAttemptsInput>
  }

  export type QuestionnaireUpdateOneRequiredWithoutUserAttemptsNestedInput = {
    create?: XOR<QuestionnaireCreateWithoutUserAttemptsInput, QuestionnaireUncheckedCreateWithoutUserAttemptsInput>
    connectOrCreate?: QuestionnaireCreateOrConnectWithoutUserAttemptsInput
    upsert?: QuestionnaireUpsertWithoutUserAttemptsInput
    connect?: QuestionnaireWhereUniqueInput
    update?: XOR<XOR<QuestionnaireUpdateToOneWithWhereWithoutUserAttemptsInput, QuestionnaireUpdateWithoutUserAttemptsInput>, QuestionnaireUncheckedUpdateWithoutUserAttemptsInput>
  }

  export type UserQuestionAnswerUpdateManyWithoutUserQuestionnaireAttemptNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput> | UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput[] | UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserQuestionnaireAttemptInput[]
    createMany?: UserQuestionAnswerCreateManyUserQuestionnaireAttemptInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserQuestionnaireAttemptInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserQuestionnaireAttemptInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserQuestionnaireAttemptNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput> | UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput[] | UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserQuestionnaireAttemptInput[]
    createMany?: UserQuestionAnswerCreateManyUserQuestionnaireAttemptInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserQuestionnaireAttemptInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserQuestionnaireAttemptInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserQuestionnaireAttemptInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutQuestionAnswersInput = {
    create?: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutUserAnswersInput = {
    create?: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutUserAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type AnswerOptionCreateNestedOneWithoutUserAnswersInput = {
    create?: XOR<AnswerOptionCreateWithoutUserAnswersInput, AnswerOptionUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: AnswerOptionCreateOrConnectWithoutUserAnswersInput
    connect?: AnswerOptionWhereUniqueInput
  }

  export type UserQuestionnaireAttemptCreateNestedOneWithoutAnswersInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutAnswersInput, UserQuestionnaireAttemptUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutAnswersInput
    connect?: UserQuestionnaireAttemptWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutQuestionAnswersNestedInput = {
    create?: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionAnswersInput
    upsert?: UserUpsertWithoutQuestionAnswersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionAnswersInput, UserUpdateWithoutQuestionAnswersInput>, UserUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type QuestionUpdateOneRequiredWithoutUserAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutUserAnswersInput
    upsert?: QuestionUpsertWithoutUserAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutUserAnswersInput, QuestionUpdateWithoutUserAnswersInput>, QuestionUncheckedUpdateWithoutUserAnswersInput>
  }

  export type AnswerOptionUpdateOneWithoutUserAnswersNestedInput = {
    create?: XOR<AnswerOptionCreateWithoutUserAnswersInput, AnswerOptionUncheckedCreateWithoutUserAnswersInput>
    connectOrCreate?: AnswerOptionCreateOrConnectWithoutUserAnswersInput
    upsert?: AnswerOptionUpsertWithoutUserAnswersInput
    disconnect?: AnswerOptionWhereInput | boolean
    delete?: AnswerOptionWhereInput | boolean
    connect?: AnswerOptionWhereUniqueInput
    update?: XOR<XOR<AnswerOptionUpdateToOneWithWhereWithoutUserAnswersInput, AnswerOptionUpdateWithoutUserAnswersInput>, AnswerOptionUncheckedUpdateWithoutUserAnswersInput>
  }

  export type UserQuestionnaireAttemptUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<UserQuestionnaireAttemptCreateWithoutAnswersInput, UserQuestionnaireAttemptUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: UserQuestionnaireAttemptCreateOrConnectWithoutAnswersInput
    upsert?: UserQuestionnaireAttemptUpsertWithoutAnswersInput
    connect?: UserQuestionnaireAttemptWhereUniqueInput
    update?: XOR<XOR<UserQuestionnaireAttemptUpdateToOneWithWhereWithoutAnswersInput, UserQuestionnaireAttemptUpdateWithoutAnswersInput>, UserQuestionnaireAttemptUncheckedUpdateWithoutAnswersInput>
  }

  export type UserCreateNestedOneWithoutTestSelectionsInput = {
    create?: XOR<UserCreateWithoutTestSelectionsInput, UserUncheckedCreateWithoutTestSelectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestSelectionsInput
    connect?: UserWhereUniqueInput
  }

  export type TestTypeCreateNestedOneWithoutUserTestSelectionInput = {
    create?: XOR<TestTypeCreateWithoutUserTestSelectionInput, TestTypeUncheckedCreateWithoutUserTestSelectionInput>
    connectOrCreate?: TestTypeCreateOrConnectWithoutUserTestSelectionInput
    connect?: TestTypeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTestSelectionsNestedInput = {
    create?: XOR<UserCreateWithoutTestSelectionsInput, UserUncheckedCreateWithoutTestSelectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestSelectionsInput
    upsert?: UserUpsertWithoutTestSelectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTestSelectionsInput, UserUpdateWithoutTestSelectionsInput>, UserUncheckedUpdateWithoutTestSelectionsInput>
  }

  export type TestTypeUpdateOneRequiredWithoutUserTestSelectionNestedInput = {
    create?: XOR<TestTypeCreateWithoutUserTestSelectionInput, TestTypeUncheckedCreateWithoutUserTestSelectionInput>
    connectOrCreate?: TestTypeCreateOrConnectWithoutUserTestSelectionInput
    upsert?: TestTypeUpsertWithoutUserTestSelectionInput
    connect?: TestTypeWhereUniqueInput
    update?: XOR<XOR<TestTypeUpdateToOneWithWhereWithoutUserTestSelectionInput, TestTypeUpdateWithoutUserTestSelectionInput>, TestTypeUncheckedUpdateWithoutUserTestSelectionInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAuthEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventType | EnumAuthEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventType[]
    notIn?: $Enums.AuthEventType[]
    not?: NestedEnumAuthEventTypeFilter<$PrismaModel> | $Enums.AuthEventType
  }

  export type NestedEnumAuthEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventStatus | EnumAuthEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventStatus[]
    notIn?: $Enums.AuthEventStatus[]
    not?: NestedEnumAuthEventStatusFilter<$PrismaModel> | $Enums.AuthEventStatus
  }

  export type NestedEnumAuthEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventType | EnumAuthEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventType[]
    notIn?: $Enums.AuthEventType[]
    not?: NestedEnumAuthEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.AuthEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthEventTypeFilter<$PrismaModel>
    _max?: NestedEnumAuthEventTypeFilter<$PrismaModel>
  }

  export type NestedEnumAuthEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthEventStatus | EnumAuthEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuthEventStatus[]
    notIn?: $Enums.AuthEventStatus[]
    not?: NestedEnumAuthEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuthEventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthEventStatusFilter<$PrismaModel>
    _max?: NestedEnumAuthEventStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type NestedEnumAttemptStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttemptStatus | EnumAttemptStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttemptStatus[]
    notIn?: $Enums.AttemptStatus[]
    not?: NestedEnumAttemptStatusFilter<$PrismaModel> | $Enums.AttemptStatus
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumAttemptStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttemptStatus | EnumAttemptStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttemptStatus[]
    notIn?: $Enums.AttemptStatus[]
    not?: NestedEnumAttemptStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttemptStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttemptStatusFilter<$PrismaModel>
    _max?: NestedEnumAttemptStatusFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ApiKeyCreateWithoutApp_userInput = {
    id?: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    users?: UserCreateNestedManyWithoutApi_keyInput
    test_types?: TestTypeCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyUncheckedCreateWithoutApp_userInput = {
    id?: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutApi_keyInput
    test_types?: TestTypeUncheckedCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyCreateOrConnectWithoutApp_userInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutApp_userInput, ApiKeyUncheckedCreateWithoutApp_userInput>
  }

  export type ApiKeyCreateManyApp_userInputEnvelope = {
    data: ApiKeyCreateManyApp_userInput | ApiKeyCreateManyApp_userInput[]
    skipDuplicates?: boolean
  }

  export type AppSessionCreateWithoutApp_userInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type AppSessionUncheckedCreateWithoutApp_userInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type AppSessionCreateOrConnectWithoutApp_userInput = {
    where: AppSessionWhereUniqueInput
    create: XOR<AppSessionCreateWithoutApp_userInput, AppSessionUncheckedCreateWithoutApp_userInput>
  }

  export type AppSessionCreateManyApp_userInputEnvelope = {
    data: AppSessionCreateManyApp_userInput | AppSessionCreateManyApp_userInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetCreateWithoutApp_userInput = {
    id?: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    used?: boolean
  }

  export type PasswordResetUncheckedCreateWithoutApp_userInput = {
    id?: string
    token: string
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    used?: boolean
  }

  export type PasswordResetCreateOrConnectWithoutApp_userInput = {
    where: PasswordResetWhereUniqueInput
    create: XOR<PasswordResetCreateWithoutApp_userInput, PasswordResetUncheckedCreateWithoutApp_userInput>
  }

  export type AuthEventCreateWithoutApp_userInput = {
    id?: string
    event_type: string
    ip_address?: string | null
    user_agent?: string | null
    created_at?: Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventUncheckedCreateWithoutApp_userInput = {
    id?: string
    event_type: string
    ip_address?: string | null
    user_agent?: string | null
    created_at?: Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventCreateOrConnectWithoutApp_userInput = {
    where: AuthEventWhereUniqueInput
    create: XOR<AuthEventCreateWithoutApp_userInput, AuthEventUncheckedCreateWithoutApp_userInput>
  }

  export type AuthEventCreateManyApp_userInputEnvelope = {
    data: AuthEventCreateManyApp_userInput | AuthEventCreateManyApp_userInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutApp_userInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutApp_userInput, ApiKeyUncheckedUpdateWithoutApp_userInput>
    create: XOR<ApiKeyCreateWithoutApp_userInput, ApiKeyUncheckedCreateWithoutApp_userInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutApp_userInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutApp_userInput, ApiKeyUncheckedUpdateWithoutApp_userInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutApp_userInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutApp_userInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    OR?: ApiKeyScalarWhereInput[]
    NOT?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    app_user_id?: StringFilter<"ApiKey"> | string
    key?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    active?: BoolFilter<"ApiKey"> | boolean
    created_at?: DateTimeFilter<"ApiKey"> | Date | string
    updated_at?: DateTimeFilter<"ApiKey"> | Date | string
    last_used_at?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
  }

  export type AppSessionUpsertWithWhereUniqueWithoutApp_userInput = {
    where: AppSessionWhereUniqueInput
    update: XOR<AppSessionUpdateWithoutApp_userInput, AppSessionUncheckedUpdateWithoutApp_userInput>
    create: XOR<AppSessionCreateWithoutApp_userInput, AppSessionUncheckedCreateWithoutApp_userInput>
  }

  export type AppSessionUpdateWithWhereUniqueWithoutApp_userInput = {
    where: AppSessionWhereUniqueInput
    data: XOR<AppSessionUpdateWithoutApp_userInput, AppSessionUncheckedUpdateWithoutApp_userInput>
  }

  export type AppSessionUpdateManyWithWhereWithoutApp_userInput = {
    where: AppSessionScalarWhereInput
    data: XOR<AppSessionUpdateManyMutationInput, AppSessionUncheckedUpdateManyWithoutApp_userInput>
  }

  export type AppSessionScalarWhereInput = {
    AND?: AppSessionScalarWhereInput | AppSessionScalarWhereInput[]
    OR?: AppSessionScalarWhereInput[]
    NOT?: AppSessionScalarWhereInput | AppSessionScalarWhereInput[]
    id?: StringFilter<"AppSession"> | string
    app_user_id?: StringFilter<"AppSession"> | string
    token?: StringFilter<"AppSession"> | string
    refresh_token?: StringNullableFilter<"AppSession"> | string | null
    ip_address?: StringNullableFilter<"AppSession"> | string | null
    user_agent?: StringNullableFilter<"AppSession"> | string | null
    expires_at?: DateTimeFilter<"AppSession"> | Date | string
    created_at?: DateTimeFilter<"AppSession"> | Date | string
    updated_at?: DateTimeFilter<"AppSession"> | Date | string
    revoked?: BoolFilter<"AppSession"> | boolean
    revoked_at?: DateTimeNullableFilter<"AppSession"> | Date | string | null
  }

  export type PasswordResetUpsertWithoutApp_userInput = {
    update: XOR<PasswordResetUpdateWithoutApp_userInput, PasswordResetUncheckedUpdateWithoutApp_userInput>
    create: XOR<PasswordResetCreateWithoutApp_userInput, PasswordResetUncheckedCreateWithoutApp_userInput>
    where?: PasswordResetWhereInput
  }

  export type PasswordResetUpdateToOneWithWhereWithoutApp_userInput = {
    where?: PasswordResetWhereInput
    data: XOR<PasswordResetUpdateWithoutApp_userInput, PasswordResetUncheckedUpdateWithoutApp_userInput>
  }

  export type PasswordResetUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordResetUncheckedUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AuthEventUpsertWithWhereUniqueWithoutApp_userInput = {
    where: AuthEventWhereUniqueInput
    update: XOR<AuthEventUpdateWithoutApp_userInput, AuthEventUncheckedUpdateWithoutApp_userInput>
    create: XOR<AuthEventCreateWithoutApp_userInput, AuthEventUncheckedCreateWithoutApp_userInput>
  }

  export type AuthEventUpdateWithWhereUniqueWithoutApp_userInput = {
    where: AuthEventWhereUniqueInput
    data: XOR<AuthEventUpdateWithoutApp_userInput, AuthEventUncheckedUpdateWithoutApp_userInput>
  }

  export type AuthEventUpdateManyWithWhereWithoutApp_userInput = {
    where: AuthEventScalarWhereInput
    data: XOR<AuthEventUpdateManyMutationInput, AuthEventUncheckedUpdateManyWithoutApp_userInput>
  }

  export type AuthEventScalarWhereInput = {
    AND?: AuthEventScalarWhereInput | AuthEventScalarWhereInput[]
    OR?: AuthEventScalarWhereInput[]
    NOT?: AuthEventScalarWhereInput | AuthEventScalarWhereInput[]
    id?: StringFilter<"AuthEvent"> | string
    app_user_id?: StringFilter<"AuthEvent"> | string
    event_type?: StringFilter<"AuthEvent"> | string
    ip_address?: StringNullableFilter<"AuthEvent"> | string | null
    user_agent?: StringNullableFilter<"AuthEvent"> | string | null
    created_at?: DateTimeFilter<"AuthEvent"> | Date | string
    additional_info?: JsonNullableFilter<"AuthEvent">
  }

  export type AppUserCreateWithoutApi_keysInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    app_sessions?: AppSessionCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetCreateNestedOneWithoutApp_userInput
    auth_events?: AuthEventCreateNestedManyWithoutApp_userInput
  }

  export type AppUserUncheckedCreateWithoutApi_keysInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    app_sessions?: AppSessionUncheckedCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetUncheckedCreateNestedOneWithoutApp_userInput
    auth_events?: AuthEventUncheckedCreateNestedManyWithoutApp_userInput
  }

  export type AppUserCreateOrConnectWithoutApi_keysInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutApi_keysInput, AppUserUncheckedCreateWithoutApi_keysInput>
  }

  export type UserCreateWithoutApi_keyInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApi_keyInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogUncheckedCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApi_keyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApi_keyInput, UserUncheckedCreateWithoutApi_keyInput>
  }

  export type UserCreateManyApi_keyInputEnvelope = {
    data: UserCreateManyApi_keyInput | UserCreateManyApi_keyInput[]
    skipDuplicates?: boolean
  }

  export type TestTypeCreateWithoutApi_keyInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    testSubjects?: TestSubjectCreateNestedManyWithoutTest_typeInput
    UserTestSelection?: UserTestSelectionCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeUncheckedCreateWithoutApi_keyInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    testSubjects?: TestSubjectUncheckedCreateNestedManyWithoutTest_typeInput
    UserTestSelection?: UserTestSelectionUncheckedCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeCreateOrConnectWithoutApi_keyInput = {
    where: TestTypeWhereUniqueInput
    create: XOR<TestTypeCreateWithoutApi_keyInput, TestTypeUncheckedCreateWithoutApi_keyInput>
  }

  export type TestTypeCreateManyApi_keyInputEnvelope = {
    data: TestTypeCreateManyApi_keyInput | TestTypeCreateManyApi_keyInput[]
    skipDuplicates?: boolean
  }

  export type SubjectCreateWithoutApi_keyInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    created_at?: Date | string
    updated_at?: Date | string
    subject_detail?: SubjectDetailCreateNestedOneWithoutSubjectInput
    subject_levels?: SubjectLevelCreateNestedManyWithoutSubjectInput
    testSubjects?: TestSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutApi_keyInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    created_at?: Date | string
    updated_at?: Date | string
    subject_detail?: SubjectDetailUncheckedCreateNestedOneWithoutSubjectInput
    subject_levels?: SubjectLevelUncheckedCreateNestedManyWithoutSubjectInput
    testSubjects?: TestSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutApi_keyInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutApi_keyInput, SubjectUncheckedCreateWithoutApi_keyInput>
  }

  export type SubjectCreateManyApi_keyInputEnvelope = {
    data: SubjectCreateManyApi_keyInput | SubjectCreateManyApi_keyInput[]
    skipDuplicates?: boolean
  }

  export type AppUserUpsertWithoutApi_keysInput = {
    update: XOR<AppUserUpdateWithoutApi_keysInput, AppUserUncheckedUpdateWithoutApi_keysInput>
    create: XOR<AppUserCreateWithoutApi_keysInput, AppUserUncheckedCreateWithoutApi_keysInput>
    where?: AppUserWhereInput
  }

  export type AppUserUpdateToOneWithWhereWithoutApi_keysInput = {
    where?: AppUserWhereInput
    data: XOR<AppUserUpdateWithoutApi_keysInput, AppUserUncheckedUpdateWithoutApi_keysInput>
  }

  export type AppUserUpdateWithoutApi_keysInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    app_sessions?: AppSessionUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUpdateOneWithoutApp_userNestedInput
    auth_events?: AuthEventUpdateManyWithoutApp_userNestedInput
  }

  export type AppUserUncheckedUpdateWithoutApi_keysInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    app_sessions?: AppSessionUncheckedUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUncheckedUpdateOneWithoutApp_userNestedInput
    auth_events?: AuthEventUncheckedUpdateManyWithoutApp_userNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutApi_keyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutApi_keyInput, UserUncheckedUpdateWithoutApi_keyInput>
    create: XOR<UserCreateWithoutApi_keyInput, UserUncheckedCreateWithoutApi_keyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutApi_keyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutApi_keyInput, UserUncheckedUpdateWithoutApi_keyInput>
  }

  export type UserUpdateManyWithWhereWithoutApi_keyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutApi_keyInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    api_key_id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    email_verified?: BoolFilter<"User"> | boolean
    email_verified_at?: DateTimeNullableFilter<"User"> | Date | string | null
    reset_token?: StringNullableFilter<"User"> | string | null
    reset_token_expires?: DateTimeNullableFilter<"User"> | Date | string | null
    ip_address?: StringNullableFilter<"User"> | string | null
    user_agent?: StringNullableFilter<"User"> | string | null
  }

  export type TestTypeUpsertWithWhereUniqueWithoutApi_keyInput = {
    where: TestTypeWhereUniqueInput
    update: XOR<TestTypeUpdateWithoutApi_keyInput, TestTypeUncheckedUpdateWithoutApi_keyInput>
    create: XOR<TestTypeCreateWithoutApi_keyInput, TestTypeUncheckedCreateWithoutApi_keyInput>
  }

  export type TestTypeUpdateWithWhereUniqueWithoutApi_keyInput = {
    where: TestTypeWhereUniqueInput
    data: XOR<TestTypeUpdateWithoutApi_keyInput, TestTypeUncheckedUpdateWithoutApi_keyInput>
  }

  export type TestTypeUpdateManyWithWhereWithoutApi_keyInput = {
    where: TestTypeScalarWhereInput
    data: XOR<TestTypeUpdateManyMutationInput, TestTypeUncheckedUpdateManyWithoutApi_keyInput>
  }

  export type TestTypeScalarWhereInput = {
    AND?: TestTypeScalarWhereInput | TestTypeScalarWhereInput[]
    OR?: TestTypeScalarWhereInput[]
    NOT?: TestTypeScalarWhereInput | TestTypeScalarWhereInput[]
    id?: StringFilter<"TestType"> | string
    name?: StringFilter<"TestType"> | string
    description?: StringNullableFilter<"TestType"> | string | null
    api_key_id?: StringNullableFilter<"TestType"> | string | null
    created_at?: DateTimeFilter<"TestType"> | Date | string
    updated_at?: DateTimeFilter<"TestType"> | Date | string
  }

  export type SubjectUpsertWithWhereUniqueWithoutApi_keyInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutApi_keyInput, SubjectUncheckedUpdateWithoutApi_keyInput>
    create: XOR<SubjectCreateWithoutApi_keyInput, SubjectUncheckedCreateWithoutApi_keyInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutApi_keyInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutApi_keyInput, SubjectUncheckedUpdateWithoutApi_keyInput>
  }

  export type SubjectUpdateManyWithWhereWithoutApi_keyInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutApi_keyInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    description?: StringFilter<"Subject"> | string
    slug_materia?: StringFilter<"Subject"> | string
    approximate_total_minutes?: IntFilter<"Subject"> | number
    total_questions?: IntFilter<"Subject"> | number
    order?: IntFilter<"Subject"> | number
    api_key_id?: StringNullableFilter<"Subject"> | string | null
    created_at?: DateTimeFilter<"Subject"> | Date | string
    updated_at?: DateTimeFilter<"Subject"> | Date | string
  }

  export type AppUserCreateWithoutApp_sessionsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetCreateNestedOneWithoutApp_userInput
    auth_events?: AuthEventCreateNestedManyWithoutApp_userInput
  }

  export type AppUserUncheckedCreateWithoutApp_sessionsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyUncheckedCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetUncheckedCreateNestedOneWithoutApp_userInput
    auth_events?: AuthEventUncheckedCreateNestedManyWithoutApp_userInput
  }

  export type AppUserCreateOrConnectWithoutApp_sessionsInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutApp_sessionsInput, AppUserUncheckedCreateWithoutApp_sessionsInput>
  }

  export type AppUserUpsertWithoutApp_sessionsInput = {
    update: XOR<AppUserUpdateWithoutApp_sessionsInput, AppUserUncheckedUpdateWithoutApp_sessionsInput>
    create: XOR<AppUserCreateWithoutApp_sessionsInput, AppUserUncheckedCreateWithoutApp_sessionsInput>
    where?: AppUserWhereInput
  }

  export type AppUserUpdateToOneWithWhereWithoutApp_sessionsInput = {
    where?: AppUserWhereInput
    data: XOR<AppUserUpdateWithoutApp_sessionsInput, AppUserUncheckedUpdateWithoutApp_sessionsInput>
  }

  export type AppUserUpdateWithoutApp_sessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUpdateOneWithoutApp_userNestedInput
    auth_events?: AuthEventUpdateManyWithoutApp_userNestedInput
  }

  export type AppUserUncheckedUpdateWithoutApp_sessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUncheckedUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUncheckedUpdateOneWithoutApp_userNestedInput
    auth_events?: AuthEventUncheckedUpdateManyWithoutApp_userNestedInput
  }

  export type ApiKeyCreateWithoutUsersInput = {
    id?: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    app_user: AppUserCreateNestedOneWithoutApi_keysInput
    test_types?: TestTypeCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyUncheckedCreateWithoutUsersInput = {
    id?: string
    app_user_id: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    test_types?: TestTypeUncheckedCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyCreateOrConnectWithoutUsersInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutUsersInput, ApiKeyUncheckedCreateWithoutUsersInput>
  }

  export type UserAccountCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    created_by?: string | null
    account: AccountCreateNestedOneWithoutUser_accountsInput
  }

  export type UserAccountUncheckedCreateWithoutUserInput = {
    id?: string
    account_id: string
    created_at?: Date | string
    created_by?: string | null
  }

  export type UserAccountCreateOrConnectWithoutUserInput = {
    where: UserAccountWhereUniqueInput
    create: XOR<UserAccountCreateWithoutUserInput, UserAccountUncheckedCreateWithoutUserInput>
  }

  export type UserAccountCreateManyUserInputEnvelope = {
    data: UserAccountCreateManyUserInput | UserAccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuthLogCreateWithoutUserInput = {
    id?: string
    event_type: $Enums.AuthEventType
    status: $Enums.AuthEventStatus
    ip_address?: string | null
    user_agent?: string | null
    details?: string | null
    created_at?: Date | string
  }

  export type AuthLogUncheckedCreateWithoutUserInput = {
    id?: string
    event_type: $Enums.AuthEventType
    status: $Enums.AuthEventStatus
    ip_address?: string | null
    user_agent?: string | null
    details?: string | null
    created_at?: Date | string
  }

  export type AuthLogCreateOrConnectWithoutUserInput = {
    where: AuthLogWhereUniqueInput
    create: XOR<AuthLogCreateWithoutUserInput, AuthLogUncheckedCreateWithoutUserInput>
  }

  export type AuthLogCreateManyUserInputEnvelope = {
    data: AuthLogCreateManyUserInput | AuthLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserQuestionnaireAttemptCreateWithoutUserInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    created_at?: Date | string
    updated_at?: Date | string
    questionnaire: QuestionnaireCreateNestedOneWithoutUserAttemptsInput
    answers?: UserQuestionAnswerCreateNestedManyWithoutUserQuestionnaireAttemptInput
  }

  export type UserQuestionnaireAttemptUncheckedCreateWithoutUserInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
    answers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserQuestionnaireAttemptInput
  }

  export type UserQuestionnaireAttemptCreateOrConnectWithoutUserInput = {
    where: UserQuestionnaireAttemptWhereUniqueInput
    create: XOR<UserQuestionnaireAttemptCreateWithoutUserInput, UserQuestionnaireAttemptUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionnaireAttemptCreateManyUserInputEnvelope = {
    data: UserQuestionnaireAttemptCreateManyUserInput | UserQuestionnaireAttemptCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserQuestionAnswerCreateWithoutUserInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    answered_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    selectedAnswerOption?: AnswerOptionCreateNestedOneWithoutUserAnswersInput
    userQuestionnaireAttempt: UserQuestionnaireAttemptCreateNestedOneWithoutAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutUserInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    question_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerCreateOrConnectWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionAnswerCreateManyUserInputEnvelope = {
    data: UserQuestionAnswerCreateManyUserInput | UserQuestionAnswerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserTestSelectionCreateWithoutUserInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    testType: TestTypeCreateNestedOneWithoutUserTestSelectionInput
  }

  export type UserTestSelectionUncheckedCreateWithoutUserInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    test_type_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserTestSelectionCreateOrConnectWithoutUserInput = {
    where: UserTestSelectionWhereUniqueInput
    create: XOR<UserTestSelectionCreateWithoutUserInput, UserTestSelectionUncheckedCreateWithoutUserInput>
  }

  export type UserTestSelectionCreateManyUserInputEnvelope = {
    data: UserTestSelectionCreateManyUserInput | UserTestSelectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyUpsertWithoutUsersInput = {
    update: XOR<ApiKeyUpdateWithoutUsersInput, ApiKeyUncheckedUpdateWithoutUsersInput>
    create: XOR<ApiKeyCreateWithoutUsersInput, ApiKeyUncheckedCreateWithoutUsersInput>
    where?: ApiKeyWhereInput
  }

  export type ApiKeyUpdateToOneWithWhereWithoutUsersInput = {
    where?: ApiKeyWhereInput
    data: XOR<ApiKeyUpdateWithoutUsersInput, ApiKeyUncheckedUpdateWithoutUsersInput>
  }

  export type ApiKeyUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    app_user?: AppUserUpdateOneRequiredWithoutApi_keysNestedInput
    test_types?: TestTypeUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUpdateManyWithoutApi_keyNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    test_types?: TestTypeUncheckedUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutApi_keyNestedInput
  }

  export type UserAccountUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAccountWhereUniqueInput
    update: XOR<UserAccountUpdateWithoutUserInput, UserAccountUncheckedUpdateWithoutUserInput>
    create: XOR<UserAccountCreateWithoutUserInput, UserAccountUncheckedCreateWithoutUserInput>
  }

  export type UserAccountUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAccountWhereUniqueInput
    data: XOR<UserAccountUpdateWithoutUserInput, UserAccountUncheckedUpdateWithoutUserInput>
  }

  export type UserAccountUpdateManyWithWhereWithoutUserInput = {
    where: UserAccountScalarWhereInput
    data: XOR<UserAccountUpdateManyMutationInput, UserAccountUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAccountScalarWhereInput = {
    AND?: UserAccountScalarWhereInput | UserAccountScalarWhereInput[]
    OR?: UserAccountScalarWhereInput[]
    NOT?: UserAccountScalarWhereInput | UserAccountScalarWhereInput[]
    id?: StringFilter<"UserAccount"> | string
    user_id?: StringFilter<"UserAccount"> | string
    account_id?: StringFilter<"UserAccount"> | string
    created_at?: DateTimeFilter<"UserAccount"> | Date | string
    created_by?: StringNullableFilter<"UserAccount"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    user_id?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    refresh_token?: StringNullableFilter<"Session"> | string | null
    ip_address?: StringNullableFilter<"Session"> | string | null
    user_agent?: StringNullableFilter<"Session"> | string | null
    expires_at?: DateTimeFilter<"Session"> | Date | string
    created_at?: DateTimeFilter<"Session"> | Date | string
    updated_at?: DateTimeFilter<"Session"> | Date | string
    revoked?: BoolFilter<"Session"> | boolean
    revoked_at?: DateTimeNullableFilter<"Session"> | Date | string | null
  }

  export type AuthLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthLogWhereUniqueInput
    update: XOR<AuthLogUpdateWithoutUserInput, AuthLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuthLogCreateWithoutUserInput, AuthLogUncheckedCreateWithoutUserInput>
  }

  export type AuthLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthLogWhereUniqueInput
    data: XOR<AuthLogUpdateWithoutUserInput, AuthLogUncheckedUpdateWithoutUserInput>
  }

  export type AuthLogUpdateManyWithWhereWithoutUserInput = {
    where: AuthLogScalarWhereInput
    data: XOR<AuthLogUpdateManyMutationInput, AuthLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuthLogScalarWhereInput = {
    AND?: AuthLogScalarWhereInput | AuthLogScalarWhereInput[]
    OR?: AuthLogScalarWhereInput[]
    NOT?: AuthLogScalarWhereInput | AuthLogScalarWhereInput[]
    id?: StringFilter<"AuthLog"> | string
    user_id?: StringNullableFilter<"AuthLog"> | string | null
    event_type?: EnumAuthEventTypeFilter<"AuthLog"> | $Enums.AuthEventType
    status?: EnumAuthEventStatusFilter<"AuthLog"> | $Enums.AuthEventStatus
    ip_address?: StringNullableFilter<"AuthLog"> | string | null
    user_agent?: StringNullableFilter<"AuthLog"> | string | null
    details?: StringNullableFilter<"AuthLog"> | string | null
    created_at?: DateTimeFilter<"AuthLog"> | Date | string
  }

  export type UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutUserInput = {
    where: UserQuestionnaireAttemptWhereUniqueInput
    update: XOR<UserQuestionnaireAttemptUpdateWithoutUserInput, UserQuestionnaireAttemptUncheckedUpdateWithoutUserInput>
    create: XOR<UserQuestionnaireAttemptCreateWithoutUserInput, UserQuestionnaireAttemptUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutUserInput = {
    where: UserQuestionnaireAttemptWhereUniqueInput
    data: XOR<UserQuestionnaireAttemptUpdateWithoutUserInput, UserQuestionnaireAttemptUncheckedUpdateWithoutUserInput>
  }

  export type UserQuestionnaireAttemptUpdateManyWithWhereWithoutUserInput = {
    where: UserQuestionnaireAttemptScalarWhereInput
    data: XOR<UserQuestionnaireAttemptUpdateManyMutationInput, UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserInput>
  }

  export type UserQuestionnaireAttemptScalarWhereInput = {
    AND?: UserQuestionnaireAttemptScalarWhereInput | UserQuestionnaireAttemptScalarWhereInput[]
    OR?: UserQuestionnaireAttemptScalarWhereInput[]
    NOT?: UserQuestionnaireAttemptScalarWhereInput | UserQuestionnaireAttemptScalarWhereInput[]
    id?: StringFilter<"UserQuestionnaireAttempt"> | string
    score?: FloatNullableFilter<"UserQuestionnaireAttempt"> | number | null
    status?: EnumAttemptStatusFilter<"UserQuestionnaireAttempt"> | $Enums.AttemptStatus
    started_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    completed_at?: DateTimeNullableFilter<"UserQuestionnaireAttempt"> | Date | string | null
    time_spent_seconds?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    correct_answers_count?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    total_questions_count?: IntNullableFilter<"UserQuestionnaireAttempt"> | number | null
    attempt_number?: IntFilter<"UserQuestionnaireAttempt"> | number
    user_id?: StringFilter<"UserQuestionnaireAttempt"> | string
    questionnaire_id?: StringFilter<"UserQuestionnaireAttempt"> | string
    created_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
    updated_at?: DateTimeFilter<"UserQuestionnaireAttempt"> | Date | string
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutUserInput, UserQuestionAnswerUncheckedUpdateWithoutUserInput>
    create: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutUserInput, UserQuestionAnswerUncheckedUpdateWithoutUserInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutUserInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutUserInput>
  }

  export type UserQuestionAnswerScalarWhereInput = {
    AND?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
    OR?: UserQuestionAnswerScalarWhereInput[]
    NOT?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
    id?: StringFilter<"UserQuestionAnswer"> | string
    is_correct?: BoolNullableFilter<"UserQuestionAnswer"> | boolean | null
    answered_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    time_to_answer_seconds?: IntNullableFilter<"UserQuestionAnswer"> | number | null
    points_earned?: FloatNullableFilter<"UserQuestionAnswer"> | number | null
    user_id?: StringFilter<"UserQuestionAnswer"> | string
    question_id?: StringFilter<"UserQuestionAnswer"> | string
    selected_answer_option_id?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    answered_text?: StringNullableFilter<"UserQuestionAnswer"> | string | null
    user_questionnaire_attempt_id?: StringFilter<"UserQuestionAnswer"> | string
    created_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    updated_at?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
  }

  export type UserTestSelectionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserTestSelectionWhereUniqueInput
    update: XOR<UserTestSelectionUpdateWithoutUserInput, UserTestSelectionUncheckedUpdateWithoutUserInput>
    create: XOR<UserTestSelectionCreateWithoutUserInput, UserTestSelectionUncheckedCreateWithoutUserInput>
  }

  export type UserTestSelectionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserTestSelectionWhereUniqueInput
    data: XOR<UserTestSelectionUpdateWithoutUserInput, UserTestSelectionUncheckedUpdateWithoutUserInput>
  }

  export type UserTestSelectionUpdateManyWithWhereWithoutUserInput = {
    where: UserTestSelectionScalarWhereInput
    data: XOR<UserTestSelectionUpdateManyMutationInput, UserTestSelectionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserTestSelectionScalarWhereInput = {
    AND?: UserTestSelectionScalarWhereInput | UserTestSelectionScalarWhereInput[]
    OR?: UserTestSelectionScalarWhereInput[]
    NOT?: UserTestSelectionScalarWhereInput | UserTestSelectionScalarWhereInput[]
    id?: StringFilter<"UserTestSelection"> | string
    is_active?: BoolFilter<"UserTestSelection"> | boolean
    selected_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    user_id?: StringFilter<"UserTestSelection"> | string
    test_type_id?: StringFilter<"UserTestSelection"> | string
    created_at?: DateTimeFilter<"UserTestSelection"> | Date | string
    updated_at?: DateTimeFilter<"UserTestSelection"> | Date | string
  }

  export type UserAccountCreateWithoutAccountInput = {
    id?: string
    created_at?: Date | string
    created_by?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type UserAccountUncheckedCreateWithoutAccountInput = {
    id?: string
    user_id: string
    created_at?: Date | string
    created_by?: string | null
  }

  export type UserAccountCreateOrConnectWithoutAccountInput = {
    where: UserAccountWhereUniqueInput
    create: XOR<UserAccountCreateWithoutAccountInput, UserAccountUncheckedCreateWithoutAccountInput>
  }

  export type UserAccountCreateManyAccountInputEnvelope = {
    data: UserAccountCreateManyAccountInput | UserAccountCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type UserAccountUpsertWithWhereUniqueWithoutAccountInput = {
    where: UserAccountWhereUniqueInput
    update: XOR<UserAccountUpdateWithoutAccountInput, UserAccountUncheckedUpdateWithoutAccountInput>
    create: XOR<UserAccountCreateWithoutAccountInput, UserAccountUncheckedCreateWithoutAccountInput>
  }

  export type UserAccountUpdateWithWhereUniqueWithoutAccountInput = {
    where: UserAccountWhereUniqueInput
    data: XOR<UserAccountUpdateWithoutAccountInput, UserAccountUncheckedUpdateWithoutAccountInput>
  }

  export type UserAccountUpdateManyWithWhereWithoutAccountInput = {
    where: UserAccountScalarWhereInput
    data: XOR<UserAccountUpdateManyMutationInput, UserAccountUncheckedUpdateManyWithoutAccountInput>
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    api_key: ApiKeyCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogUncheckedCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type AccountCreateWithoutUser_accountsInput = {
    id?: string
    name: string
    api_key: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccountUncheckedCreateWithoutUser_accountsInput = {
    id?: string
    name: string
    api_key: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccountCreateOrConnectWithoutUser_accountsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUser_accountsInput, AccountUncheckedCreateWithoutUser_accountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: ApiKeyUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUncheckedUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountUpsertWithoutUser_accountsInput = {
    update: XOR<AccountUpdateWithoutUser_accountsInput, AccountUncheckedUpdateWithoutUser_accountsInput>
    create: XOR<AccountCreateWithoutUser_accountsInput, AccountUncheckedCreateWithoutUser_accountsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutUser_accountsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutUser_accountsInput, AccountUncheckedUpdateWithoutUser_accountsInput>
  }

  export type AccountUpdateWithoutUser_accountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    api_key?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUser_accountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    api_key?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    api_key: ApiKeyCreateNestedOneWithoutUsersInput
    accounts?: UserAccountCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountUncheckedCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogUncheckedCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: ApiKeyUpdateOneRequiredWithoutUsersNestedInput
    accounts?: UserAccountUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUncheckedUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUncheckedUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuth_logsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    api_key: ApiKeyCreateNestedOneWithoutUsersInput
    accounts?: UserAccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuth_logsInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuth_logsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuth_logsInput, UserUncheckedCreateWithoutAuth_logsInput>
  }

  export type UserUpsertWithoutAuth_logsInput = {
    update: XOR<UserUpdateWithoutAuth_logsInput, UserUncheckedUpdateWithoutAuth_logsInput>
    create: XOR<UserCreateWithoutAuth_logsInput, UserUncheckedCreateWithoutAuth_logsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuth_logsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuth_logsInput, UserUncheckedUpdateWithoutAuth_logsInput>
  }

  export type UserUpdateWithoutAuth_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: ApiKeyUpdateOneRequiredWithoutUsersNestedInput
    accounts?: UserAccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuth_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppUserCreateWithoutPassword_resetsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyCreateNestedManyWithoutApp_userInput
    app_sessions?: AppSessionCreateNestedManyWithoutApp_userInput
    auth_events?: AuthEventCreateNestedManyWithoutApp_userInput
  }

  export type AppUserUncheckedCreateWithoutPassword_resetsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyUncheckedCreateNestedManyWithoutApp_userInput
    app_sessions?: AppSessionUncheckedCreateNestedManyWithoutApp_userInput
    auth_events?: AuthEventUncheckedCreateNestedManyWithoutApp_userInput
  }

  export type AppUserCreateOrConnectWithoutPassword_resetsInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutPassword_resetsInput, AppUserUncheckedCreateWithoutPassword_resetsInput>
  }

  export type AppUserUpsertWithoutPassword_resetsInput = {
    update: XOR<AppUserUpdateWithoutPassword_resetsInput, AppUserUncheckedUpdateWithoutPassword_resetsInput>
    create: XOR<AppUserCreateWithoutPassword_resetsInput, AppUserUncheckedCreateWithoutPassword_resetsInput>
    where?: AppUserWhereInput
  }

  export type AppUserUpdateToOneWithWhereWithoutPassword_resetsInput = {
    where?: AppUserWhereInput
    data: XOR<AppUserUpdateWithoutPassword_resetsInput, AppUserUncheckedUpdateWithoutPassword_resetsInput>
  }

  export type AppUserUpdateWithoutPassword_resetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUpdateManyWithoutApp_userNestedInput
    app_sessions?: AppSessionUpdateManyWithoutApp_userNestedInput
    auth_events?: AuthEventUpdateManyWithoutApp_userNestedInput
  }

  export type AppUserUncheckedUpdateWithoutPassword_resetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUncheckedUpdateManyWithoutApp_userNestedInput
    app_sessions?: AppSessionUncheckedUpdateManyWithoutApp_userNestedInput
    auth_events?: AuthEventUncheckedUpdateManyWithoutApp_userNestedInput
  }

  export type AppUserCreateWithoutAuth_eventsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyCreateNestedManyWithoutApp_userInput
    app_sessions?: AppSessionCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetCreateNestedOneWithoutApp_userInput
  }

  export type AppUserUncheckedCreateWithoutAuth_eventsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    company_name?: string | null
    phone?: string | null
    website?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    api_keys?: ApiKeyUncheckedCreateNestedManyWithoutApp_userInput
    app_sessions?: AppSessionUncheckedCreateNestedManyWithoutApp_userInput
    password_resets?: PasswordResetUncheckedCreateNestedOneWithoutApp_userInput
  }

  export type AppUserCreateOrConnectWithoutAuth_eventsInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutAuth_eventsInput, AppUserUncheckedCreateWithoutAuth_eventsInput>
  }

  export type AppUserUpsertWithoutAuth_eventsInput = {
    update: XOR<AppUserUpdateWithoutAuth_eventsInput, AppUserUncheckedUpdateWithoutAuth_eventsInput>
    create: XOR<AppUserCreateWithoutAuth_eventsInput, AppUserUncheckedCreateWithoutAuth_eventsInput>
    where?: AppUserWhereInput
  }

  export type AppUserUpdateToOneWithWhereWithoutAuth_eventsInput = {
    where?: AppUserWhereInput
    data: XOR<AppUserUpdateWithoutAuth_eventsInput, AppUserUncheckedUpdateWithoutAuth_eventsInput>
  }

  export type AppUserUpdateWithoutAuth_eventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUpdateManyWithoutApp_userNestedInput
    app_sessions?: AppSessionUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUpdateOneWithoutApp_userNestedInput
  }

  export type AppUserUncheckedUpdateWithoutAuth_eventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    api_keys?: ApiKeyUncheckedUpdateManyWithoutApp_userNestedInput
    app_sessions?: AppSessionUncheckedUpdateManyWithoutApp_userNestedInput
    password_resets?: PasswordResetUncheckedUpdateOneWithoutApp_userNestedInput
  }

  export type ApiKeyCreateWithoutTest_typesInput = {
    id?: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    app_user: AppUserCreateNestedOneWithoutApi_keysInput
    users?: UserCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyUncheckedCreateWithoutTest_typesInput = {
    id?: string
    app_user_id: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutApi_keyInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyCreateOrConnectWithoutTest_typesInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutTest_typesInput, ApiKeyUncheckedCreateWithoutTest_typesInput>
  }

  export type TestSubjectCreateWithoutTest_typeInput = {
    assigned_at?: Date | string
    subject_order_in_test?: number | null
    subject: SubjectCreateNestedOneWithoutTestSubjectsInput
  }

  export type TestSubjectUncheckedCreateWithoutTest_typeInput = {
    subject_id: string
    assigned_at?: Date | string
    subject_order_in_test?: number | null
  }

  export type TestSubjectCreateOrConnectWithoutTest_typeInput = {
    where: TestSubjectWhereUniqueInput
    create: XOR<TestSubjectCreateWithoutTest_typeInput, TestSubjectUncheckedCreateWithoutTest_typeInput>
  }

  export type TestSubjectCreateManyTest_typeInputEnvelope = {
    data: TestSubjectCreateManyTest_typeInput | TestSubjectCreateManyTest_typeInput[]
    skipDuplicates?: boolean
  }

  export type UserTestSelectionCreateWithoutTestTypeInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutTestSelectionsInput
  }

  export type UserTestSelectionUncheckedCreateWithoutTestTypeInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserTestSelectionCreateOrConnectWithoutTestTypeInput = {
    where: UserTestSelectionWhereUniqueInput
    create: XOR<UserTestSelectionCreateWithoutTestTypeInput, UserTestSelectionUncheckedCreateWithoutTestTypeInput>
  }

  export type UserTestSelectionCreateManyTestTypeInputEnvelope = {
    data: UserTestSelectionCreateManyTestTypeInput | UserTestSelectionCreateManyTestTypeInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyUpsertWithoutTest_typesInput = {
    update: XOR<ApiKeyUpdateWithoutTest_typesInput, ApiKeyUncheckedUpdateWithoutTest_typesInput>
    create: XOR<ApiKeyCreateWithoutTest_typesInput, ApiKeyUncheckedCreateWithoutTest_typesInput>
    where?: ApiKeyWhereInput
  }

  export type ApiKeyUpdateToOneWithWhereWithoutTest_typesInput = {
    where?: ApiKeyWhereInput
    data: XOR<ApiKeyUpdateWithoutTest_typesInput, ApiKeyUncheckedUpdateWithoutTest_typesInput>
  }

  export type ApiKeyUpdateWithoutTest_typesInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    app_user?: AppUserUpdateOneRequiredWithoutApi_keysNestedInput
    users?: UserUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUpdateManyWithoutApi_keyNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutTest_typesInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutApi_keyNestedInput
  }

  export type TestSubjectUpsertWithWhereUniqueWithoutTest_typeInput = {
    where: TestSubjectWhereUniqueInput
    update: XOR<TestSubjectUpdateWithoutTest_typeInput, TestSubjectUncheckedUpdateWithoutTest_typeInput>
    create: XOR<TestSubjectCreateWithoutTest_typeInput, TestSubjectUncheckedCreateWithoutTest_typeInput>
  }

  export type TestSubjectUpdateWithWhereUniqueWithoutTest_typeInput = {
    where: TestSubjectWhereUniqueInput
    data: XOR<TestSubjectUpdateWithoutTest_typeInput, TestSubjectUncheckedUpdateWithoutTest_typeInput>
  }

  export type TestSubjectUpdateManyWithWhereWithoutTest_typeInput = {
    where: TestSubjectScalarWhereInput
    data: XOR<TestSubjectUpdateManyMutationInput, TestSubjectUncheckedUpdateManyWithoutTest_typeInput>
  }

  export type TestSubjectScalarWhereInput = {
    AND?: TestSubjectScalarWhereInput | TestSubjectScalarWhereInput[]
    OR?: TestSubjectScalarWhereInput[]
    NOT?: TestSubjectScalarWhereInput | TestSubjectScalarWhereInput[]
    test_type_id?: StringFilter<"TestSubject"> | string
    subject_id?: StringFilter<"TestSubject"> | string
    assigned_at?: DateTimeFilter<"TestSubject"> | Date | string
    subject_order_in_test?: IntNullableFilter<"TestSubject"> | number | null
  }

  export type UserTestSelectionUpsertWithWhereUniqueWithoutTestTypeInput = {
    where: UserTestSelectionWhereUniqueInput
    update: XOR<UserTestSelectionUpdateWithoutTestTypeInput, UserTestSelectionUncheckedUpdateWithoutTestTypeInput>
    create: XOR<UserTestSelectionCreateWithoutTestTypeInput, UserTestSelectionUncheckedCreateWithoutTestTypeInput>
  }

  export type UserTestSelectionUpdateWithWhereUniqueWithoutTestTypeInput = {
    where: UserTestSelectionWhereUniqueInput
    data: XOR<UserTestSelectionUpdateWithoutTestTypeInput, UserTestSelectionUncheckedUpdateWithoutTestTypeInput>
  }

  export type UserTestSelectionUpdateManyWithWhereWithoutTestTypeInput = {
    where: UserTestSelectionScalarWhereInput
    data: XOR<UserTestSelectionUpdateManyMutationInput, UserTestSelectionUncheckedUpdateManyWithoutTestTypeInput>
  }

  export type ApiKeyCreateWithoutSubjectsInput = {
    id?: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    app_user: AppUserCreateNestedOneWithoutApi_keysInput
    users?: UserCreateNestedManyWithoutApi_keyInput
    test_types?: TestTypeCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyUncheckedCreateWithoutSubjectsInput = {
    id?: string
    app_user_id: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutApi_keyInput
    test_types?: TestTypeUncheckedCreateNestedManyWithoutApi_keyInput
  }

  export type ApiKeyCreateOrConnectWithoutSubjectsInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutSubjectsInput, ApiKeyUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectDetailCreateWithoutSubjectInput = {
    id?: string
    background_image_url?: string | null
    title: string
    title_color?: string | null
    subtitle?: string | null
    primary_color_hex?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubjectDetailUncheckedCreateWithoutSubjectInput = {
    id?: string
    background_image_url?: string | null
    title: string
    title_color?: string | null
    subtitle?: string | null
    primary_color_hex?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubjectDetailCreateOrConnectWithoutSubjectInput = {
    where: SubjectDetailWhereUniqueInput
    create: XOR<SubjectDetailCreateWithoutSubjectInput, SubjectDetailUncheckedCreateWithoutSubjectInput>
  }

  export type SubjectLevelCreateWithoutSubjectInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
    questionnaires?: QuestionnaireCreateNestedManyWithoutSubjectLevelInput
  }

  export type SubjectLevelUncheckedCreateWithoutSubjectInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
    questionnaires?: QuestionnaireUncheckedCreateNestedManyWithoutSubjectLevelInput
  }

  export type SubjectLevelCreateOrConnectWithoutSubjectInput = {
    where: SubjectLevelWhereUniqueInput
    create: XOR<SubjectLevelCreateWithoutSubjectInput, SubjectLevelUncheckedCreateWithoutSubjectInput>
  }

  export type SubjectLevelCreateManySubjectInputEnvelope = {
    data: SubjectLevelCreateManySubjectInput | SubjectLevelCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type TestSubjectCreateWithoutSubjectInput = {
    assigned_at?: Date | string
    subject_order_in_test?: number | null
    test_type: TestTypeCreateNestedOneWithoutTestSubjectsInput
  }

  export type TestSubjectUncheckedCreateWithoutSubjectInput = {
    test_type_id: string
    assigned_at?: Date | string
    subject_order_in_test?: number | null
  }

  export type TestSubjectCreateOrConnectWithoutSubjectInput = {
    where: TestSubjectWhereUniqueInput
    create: XOR<TestSubjectCreateWithoutSubjectInput, TestSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type TestSubjectCreateManySubjectInputEnvelope = {
    data: TestSubjectCreateManySubjectInput | TestSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyUpsertWithoutSubjectsInput = {
    update: XOR<ApiKeyUpdateWithoutSubjectsInput, ApiKeyUncheckedUpdateWithoutSubjectsInput>
    create: XOR<ApiKeyCreateWithoutSubjectsInput, ApiKeyUncheckedCreateWithoutSubjectsInput>
    where?: ApiKeyWhereInput
  }

  export type ApiKeyUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: ApiKeyWhereInput
    data: XOR<ApiKeyUpdateWithoutSubjectsInput, ApiKeyUncheckedUpdateWithoutSubjectsInput>
  }

  export type ApiKeyUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    app_user?: AppUserUpdateOneRequiredWithoutApi_keysNestedInput
    users?: UserUpdateManyWithoutApi_keyNestedInput
    test_types?: TestTypeUpdateManyWithoutApi_keyNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    app_user_id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutApi_keyNestedInput
    test_types?: TestTypeUncheckedUpdateManyWithoutApi_keyNestedInput
  }

  export type SubjectDetailUpsertWithoutSubjectInput = {
    update: XOR<SubjectDetailUpdateWithoutSubjectInput, SubjectDetailUncheckedUpdateWithoutSubjectInput>
    create: XOR<SubjectDetailCreateWithoutSubjectInput, SubjectDetailUncheckedCreateWithoutSubjectInput>
    where?: SubjectDetailWhereInput
  }

  export type SubjectDetailUpdateToOneWithWhereWithoutSubjectInput = {
    where?: SubjectDetailWhereInput
    data: XOR<SubjectDetailUpdateWithoutSubjectInput, SubjectDetailUncheckedUpdateWithoutSubjectInput>
  }

  export type SubjectDetailUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    background_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    title_color?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    primary_color_hex?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectDetailUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    background_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    title_color?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    primary_color_hex?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectLevelUpsertWithWhereUniqueWithoutSubjectInput = {
    where: SubjectLevelWhereUniqueInput
    update: XOR<SubjectLevelUpdateWithoutSubjectInput, SubjectLevelUncheckedUpdateWithoutSubjectInput>
    create: XOR<SubjectLevelCreateWithoutSubjectInput, SubjectLevelUncheckedCreateWithoutSubjectInput>
  }

  export type SubjectLevelUpdateWithWhereUniqueWithoutSubjectInput = {
    where: SubjectLevelWhereUniqueInput
    data: XOR<SubjectLevelUpdateWithoutSubjectInput, SubjectLevelUncheckedUpdateWithoutSubjectInput>
  }

  export type SubjectLevelUpdateManyWithWhereWithoutSubjectInput = {
    where: SubjectLevelScalarWhereInput
    data: XOR<SubjectLevelUpdateManyMutationInput, SubjectLevelUncheckedUpdateManyWithoutSubjectInput>
  }

  export type SubjectLevelScalarWhereInput = {
    AND?: SubjectLevelScalarWhereInput | SubjectLevelScalarWhereInput[]
    OR?: SubjectLevelScalarWhereInput[]
    NOT?: SubjectLevelScalarWhereInput | SubjectLevelScalarWhereInput[]
    id?: StringFilter<"SubjectLevel"> | string
    reference_title?: StringNullableFilter<"SubjectLevel"> | string | null
    title?: StringFilter<"SubjectLevel"> | string
    order?: IntFilter<"SubjectLevel"> | number
    number_of_questions?: IntFilter<"SubjectLevel"> | number
    approximate_time_minutes?: IntFilter<"SubjectLevel"> | number
    created_at?: DateTimeFilter<"SubjectLevel"> | Date | string
    updated_at?: DateTimeFilter<"SubjectLevel"> | Date | string
    subject_id?: StringFilter<"SubjectLevel"> | string
  }

  export type TestSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: TestSubjectWhereUniqueInput
    update: XOR<TestSubjectUpdateWithoutSubjectInput, TestSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<TestSubjectCreateWithoutSubjectInput, TestSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type TestSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: TestSubjectWhereUniqueInput
    data: XOR<TestSubjectUpdateWithoutSubjectInput, TestSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type TestSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: TestSubjectScalarWhereInput
    data: XOR<TestSubjectUpdateManyMutationInput, TestSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type SubjectCreateWithoutSubject_detailInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    created_at?: Date | string
    updated_at?: Date | string
    api_key?: ApiKeyCreateNestedOneWithoutSubjectsInput
    subject_levels?: SubjectLevelCreateNestedManyWithoutSubjectInput
    testSubjects?: TestSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutSubject_detailInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subject_levels?: SubjectLevelUncheckedCreateNestedManyWithoutSubjectInput
    testSubjects?: TestSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutSubject_detailInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutSubject_detailInput, SubjectUncheckedCreateWithoutSubject_detailInput>
  }

  export type SubjectUpsertWithoutSubject_detailInput = {
    update: XOR<SubjectUpdateWithoutSubject_detailInput, SubjectUncheckedUpdateWithoutSubject_detailInput>
    create: XOR<SubjectCreateWithoutSubject_detailInput, SubjectUncheckedCreateWithoutSubject_detailInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutSubject_detailInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutSubject_detailInput, SubjectUncheckedUpdateWithoutSubject_detailInput>
  }

  export type SubjectUpdateWithoutSubject_detailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    api_key?: ApiKeyUpdateOneWithoutSubjectsNestedInput
    subject_levels?: SubjectLevelUpdateManyWithoutSubjectNestedInput
    testSubjects?: TestSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutSubject_detailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_levels?: SubjectLevelUncheckedUpdateManyWithoutSubjectNestedInput
    testSubjects?: TestSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateWithoutSubject_levelsInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    created_at?: Date | string
    updated_at?: Date | string
    api_key?: ApiKeyCreateNestedOneWithoutSubjectsInput
    subject_detail?: SubjectDetailCreateNestedOneWithoutSubjectInput
    testSubjects?: TestSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutSubject_levelsInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subject_detail?: SubjectDetailUncheckedCreateNestedOneWithoutSubjectInput
    testSubjects?: TestSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutSubject_levelsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutSubject_levelsInput, SubjectUncheckedCreateWithoutSubject_levelsInput>
  }

  export type QuestionnaireCreateWithoutSubjectLevelInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuestionnaireInput
    userAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireUncheckedCreateWithoutSubjectLevelInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionnaireInput
    userAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireCreateOrConnectWithoutSubjectLevelInput = {
    where: QuestionnaireWhereUniqueInput
    create: XOR<QuestionnaireCreateWithoutSubjectLevelInput, QuestionnaireUncheckedCreateWithoutSubjectLevelInput>
  }

  export type QuestionnaireCreateManySubjectLevelInputEnvelope = {
    data: QuestionnaireCreateManySubjectLevelInput | QuestionnaireCreateManySubjectLevelInput[]
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithoutSubject_levelsInput = {
    update: XOR<SubjectUpdateWithoutSubject_levelsInput, SubjectUncheckedUpdateWithoutSubject_levelsInput>
    create: XOR<SubjectCreateWithoutSubject_levelsInput, SubjectUncheckedCreateWithoutSubject_levelsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutSubject_levelsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutSubject_levelsInput, SubjectUncheckedUpdateWithoutSubject_levelsInput>
  }

  export type SubjectUpdateWithoutSubject_levelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    api_key?: ApiKeyUpdateOneWithoutSubjectsNestedInput
    subject_detail?: SubjectDetailUpdateOneWithoutSubjectNestedInput
    testSubjects?: TestSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutSubject_levelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_detail?: SubjectDetailUncheckedUpdateOneWithoutSubjectNestedInput
    testSubjects?: TestSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type QuestionnaireUpsertWithWhereUniqueWithoutSubjectLevelInput = {
    where: QuestionnaireWhereUniqueInput
    update: XOR<QuestionnaireUpdateWithoutSubjectLevelInput, QuestionnaireUncheckedUpdateWithoutSubjectLevelInput>
    create: XOR<QuestionnaireCreateWithoutSubjectLevelInput, QuestionnaireUncheckedCreateWithoutSubjectLevelInput>
  }

  export type QuestionnaireUpdateWithWhereUniqueWithoutSubjectLevelInput = {
    where: QuestionnaireWhereUniqueInput
    data: XOR<QuestionnaireUpdateWithoutSubjectLevelInput, QuestionnaireUncheckedUpdateWithoutSubjectLevelInput>
  }

  export type QuestionnaireUpdateManyWithWhereWithoutSubjectLevelInput = {
    where: QuestionnaireScalarWhereInput
    data: XOR<QuestionnaireUpdateManyMutationInput, QuestionnaireUncheckedUpdateManyWithoutSubjectLevelInput>
  }

  export type QuestionnaireScalarWhereInput = {
    AND?: QuestionnaireScalarWhereInput | QuestionnaireScalarWhereInput[]
    OR?: QuestionnaireScalarWhereInput[]
    NOT?: QuestionnaireScalarWhereInput | QuestionnaireScalarWhereInput[]
    id?: StringFilter<"Questionnaire"> | string
    name?: StringFilter<"Questionnaire"> | string
    description?: StringNullableFilter<"Questionnaire"> | string | null
    order?: IntNullableFilter<"Questionnaire"> | number | null
    published?: BoolFilter<"Questionnaire"> | boolean
    subject_level_id?: StringFilter<"Questionnaire"> | string
    created_at?: DateTimeFilter<"Questionnaire"> | Date | string
    updated_at?: DateTimeFilter<"Questionnaire"> | Date | string
  }

  export type TestTypeCreateWithoutTestSubjectsInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    api_key?: ApiKeyCreateNestedOneWithoutTest_typesInput
    UserTestSelection?: UserTestSelectionCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeUncheckedCreateWithoutTestSubjectsInput = {
    id?: string
    name: string
    description?: string | null
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    UserTestSelection?: UserTestSelectionUncheckedCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeCreateOrConnectWithoutTestSubjectsInput = {
    where: TestTypeWhereUniqueInput
    create: XOR<TestTypeCreateWithoutTestSubjectsInput, TestTypeUncheckedCreateWithoutTestSubjectsInput>
  }

  export type SubjectCreateWithoutTestSubjectsInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    created_at?: Date | string
    updated_at?: Date | string
    api_key?: ApiKeyCreateNestedOneWithoutSubjectsInput
    subject_detail?: SubjectDetailCreateNestedOneWithoutSubjectInput
    subject_levels?: SubjectLevelCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutTestSubjectsInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subject_detail?: SubjectDetailUncheckedCreateNestedOneWithoutSubjectInput
    subject_levels?: SubjectLevelUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutTestSubjectsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutTestSubjectsInput, SubjectUncheckedCreateWithoutTestSubjectsInput>
  }

  export type TestTypeUpsertWithoutTestSubjectsInput = {
    update: XOR<TestTypeUpdateWithoutTestSubjectsInput, TestTypeUncheckedUpdateWithoutTestSubjectsInput>
    create: XOR<TestTypeCreateWithoutTestSubjectsInput, TestTypeUncheckedCreateWithoutTestSubjectsInput>
    where?: TestTypeWhereInput
  }

  export type TestTypeUpdateToOneWithWhereWithoutTestSubjectsInput = {
    where?: TestTypeWhereInput
    data: XOR<TestTypeUpdateWithoutTestSubjectsInput, TestTypeUncheckedUpdateWithoutTestSubjectsInput>
  }

  export type TestTypeUpdateWithoutTestSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    api_key?: ApiKeyUpdateOneWithoutTest_typesNestedInput
    UserTestSelection?: UserTestSelectionUpdateManyWithoutTestTypeNestedInput
  }

  export type TestTypeUncheckedUpdateWithoutTestSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserTestSelection?: UserTestSelectionUncheckedUpdateManyWithoutTestTypeNestedInput
  }

  export type SubjectUpsertWithoutTestSubjectsInput = {
    update: XOR<SubjectUpdateWithoutTestSubjectsInput, SubjectUncheckedUpdateWithoutTestSubjectsInput>
    create: XOR<SubjectCreateWithoutTestSubjectsInput, SubjectUncheckedCreateWithoutTestSubjectsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutTestSubjectsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutTestSubjectsInput, SubjectUncheckedUpdateWithoutTestSubjectsInput>
  }

  export type SubjectUpdateWithoutTestSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    api_key?: ApiKeyUpdateOneWithoutSubjectsNestedInput
    subject_detail?: SubjectDetailUpdateOneWithoutSubjectNestedInput
    subject_levels?: SubjectLevelUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutTestSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_detail?: SubjectDetailUncheckedUpdateOneWithoutSubjectNestedInput
    subject_levels?: SubjectLevelUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type GlossaryTermCreateWithoutCategoryInput = {
    id?: string
    word: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
  }

  export type GlossaryTermUncheckedCreateWithoutCategoryInput = {
    id?: string
    word: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
  }

  export type GlossaryTermCreateOrConnectWithoutCategoryInput = {
    where: GlossaryTermWhereUniqueInput
    create: XOR<GlossaryTermCreateWithoutCategoryInput, GlossaryTermUncheckedCreateWithoutCategoryInput>
  }

  export type GlossaryTermCreateManyCategoryInputEnvelope = {
    data: GlossaryTermCreateManyCategoryInput | GlossaryTermCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type GlossaryTermUpsertWithWhereUniqueWithoutCategoryInput = {
    where: GlossaryTermWhereUniqueInput
    update: XOR<GlossaryTermUpdateWithoutCategoryInput, GlossaryTermUncheckedUpdateWithoutCategoryInput>
    create: XOR<GlossaryTermCreateWithoutCategoryInput, GlossaryTermUncheckedCreateWithoutCategoryInput>
  }

  export type GlossaryTermUpdateWithWhereUniqueWithoutCategoryInput = {
    where: GlossaryTermWhereUniqueInput
    data: XOR<GlossaryTermUpdateWithoutCategoryInput, GlossaryTermUncheckedUpdateWithoutCategoryInput>
  }

  export type GlossaryTermUpdateManyWithWhereWithoutCategoryInput = {
    where: GlossaryTermScalarWhereInput
    data: XOR<GlossaryTermUpdateManyMutationInput, GlossaryTermUncheckedUpdateManyWithoutCategoryInput>
  }

  export type GlossaryTermScalarWhereInput = {
    AND?: GlossaryTermScalarWhereInput | GlossaryTermScalarWhereInput[]
    OR?: GlossaryTermScalarWhereInput[]
    NOT?: GlossaryTermScalarWhereInput | GlossaryTermScalarWhereInput[]
    id?: StringFilter<"GlossaryTerm"> | string
    word?: StringFilter<"GlossaryTerm"> | string
    description?: StringFilter<"GlossaryTerm"> | string
    created_at?: DateTimeFilter<"GlossaryTerm"> | Date | string
    updated_at?: DateTimeFilter<"GlossaryTerm"> | Date | string
    active?: BoolFilter<"GlossaryTerm"> | boolean
    category_id?: StringFilter<"GlossaryTerm"> | string
  }

  export type GlossaryCategoryCreateWithoutTermsInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
  }

  export type GlossaryCategoryUncheckedCreateWithoutTermsInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
  }

  export type GlossaryCategoryCreateOrConnectWithoutTermsInput = {
    where: GlossaryCategoryWhereUniqueInput
    create: XOR<GlossaryCategoryCreateWithoutTermsInput, GlossaryCategoryUncheckedCreateWithoutTermsInput>
  }

  export type GlossaryCategoryUpsertWithoutTermsInput = {
    update: XOR<GlossaryCategoryUpdateWithoutTermsInput, GlossaryCategoryUncheckedUpdateWithoutTermsInput>
    create: XOR<GlossaryCategoryCreateWithoutTermsInput, GlossaryCategoryUncheckedCreateWithoutTermsInput>
    where?: GlossaryCategoryWhereInput
  }

  export type GlossaryCategoryUpdateToOneWithWhereWithoutTermsInput = {
    where?: GlossaryCategoryWhereInput
    data: XOR<GlossaryCategoryUpdateWithoutTermsInput, GlossaryCategoryUncheckedUpdateWithoutTermsInput>
  }

  export type GlossaryCategoryUpdateWithoutTermsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GlossaryCategoryUncheckedUpdateWithoutTermsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubjectLevelCreateWithoutQuestionnairesInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
    subject: SubjectCreateNestedOneWithoutSubject_levelsInput
  }

  export type SubjectLevelUncheckedCreateWithoutQuestionnairesInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
    subject_id: string
  }

  export type SubjectLevelCreateOrConnectWithoutQuestionnairesInput = {
    where: SubjectLevelWhereUniqueInput
    create: XOR<SubjectLevelCreateWithoutQuestionnairesInput, SubjectLevelUncheckedCreateWithoutQuestionnairesInput>
  }

  export type QuestionCreateWithoutQuestionnaireInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    answerOptions?: AnswerOptionCreateNestedManyWithoutQuestionInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutQuestionnaireInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    answerOptions?: AnswerOptionUncheckedCreateNestedManyWithoutQuestionInput
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutQuestionnaireInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutQuestionnaireInput, QuestionUncheckedCreateWithoutQuestionnaireInput>
  }

  export type QuestionCreateManyQuestionnaireInputEnvelope = {
    data: QuestionCreateManyQuestionnaireInput | QuestionCreateManyQuestionnaireInput[]
    skipDuplicates?: boolean
  }

  export type UserQuestionnaireAttemptCreateWithoutQuestionnaireInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutQuestionnaireAttemptsInput
    answers?: UserQuestionAnswerCreateNestedManyWithoutUserQuestionnaireAttemptInput
  }

  export type UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
    answers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserQuestionnaireAttemptInput
  }

  export type UserQuestionnaireAttemptCreateOrConnectWithoutQuestionnaireInput = {
    where: UserQuestionnaireAttemptWhereUniqueInput
    create: XOR<UserQuestionnaireAttemptCreateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput>
  }

  export type UserQuestionnaireAttemptCreateManyQuestionnaireInputEnvelope = {
    data: UserQuestionnaireAttemptCreateManyQuestionnaireInput | UserQuestionnaireAttemptCreateManyQuestionnaireInput[]
    skipDuplicates?: boolean
  }

  export type SubjectLevelUpsertWithoutQuestionnairesInput = {
    update: XOR<SubjectLevelUpdateWithoutQuestionnairesInput, SubjectLevelUncheckedUpdateWithoutQuestionnairesInput>
    create: XOR<SubjectLevelCreateWithoutQuestionnairesInput, SubjectLevelUncheckedCreateWithoutQuestionnairesInput>
    where?: SubjectLevelWhereInput
  }

  export type SubjectLevelUpdateToOneWithWhereWithoutQuestionnairesInput = {
    where?: SubjectLevelWhereInput
    data: XOR<SubjectLevelUpdateWithoutQuestionnairesInput, SubjectLevelUncheckedUpdateWithoutQuestionnairesInput>
  }

  export type SubjectLevelUpdateWithoutQuestionnairesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutSubject_levelsNestedInput
  }

  export type SubjectLevelUncheckedUpdateWithoutQuestionnairesInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_id?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutQuestionnaireInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutQuestionnaireInput, QuestionUncheckedUpdateWithoutQuestionnaireInput>
    create: XOR<QuestionCreateWithoutQuestionnaireInput, QuestionUncheckedCreateWithoutQuestionnaireInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutQuestionnaireInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutQuestionnaireInput, QuestionUncheckedUpdateWithoutQuestionnaireInput>
  }

  export type QuestionUpdateManyWithWhereWithoutQuestionnaireInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutQuestionnaireInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    question_type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    explanation?: StringNullableFilter<"Question"> | string | null
    extra_info?: StringNullableFilter<"Question"> | string | null
    points?: IntFilter<"Question"> | number
    order?: IntNullableFilter<"Question"> | number | null
    difficulty?: IntNullableFilter<"Question"> | number | null
    tags?: StringNullableFilter<"Question"> | string | null
    active?: BoolFilter<"Question"> | boolean
    questionnaire_id?: StringFilter<"Question"> | string
    created_at?: DateTimeFilter<"Question"> | Date | string
    updated_at?: DateTimeFilter<"Question"> | Date | string
  }

  export type UserQuestionnaireAttemptUpsertWithWhereUniqueWithoutQuestionnaireInput = {
    where: UserQuestionnaireAttemptWhereUniqueInput
    update: XOR<UserQuestionnaireAttemptUpdateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedUpdateWithoutQuestionnaireInput>
    create: XOR<UserQuestionnaireAttemptCreateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedCreateWithoutQuestionnaireInput>
  }

  export type UserQuestionnaireAttemptUpdateWithWhereUniqueWithoutQuestionnaireInput = {
    where: UserQuestionnaireAttemptWhereUniqueInput
    data: XOR<UserQuestionnaireAttemptUpdateWithoutQuestionnaireInput, UserQuestionnaireAttemptUncheckedUpdateWithoutQuestionnaireInput>
  }

  export type UserQuestionnaireAttemptUpdateManyWithWhereWithoutQuestionnaireInput = {
    where: UserQuestionnaireAttemptScalarWhereInput
    data: XOR<UserQuestionnaireAttemptUpdateManyMutationInput, UserQuestionnaireAttemptUncheckedUpdateManyWithoutQuestionnaireInput>
  }

  export type QuestionnaireCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    subjectLevel: SubjectLevelCreateNestedOneWithoutQuestionnairesInput
    userAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    subject_level_id: string
    created_at?: Date | string
    updated_at?: Date | string
    userAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireCreateOrConnectWithoutQuestionsInput = {
    where: QuestionnaireWhereUniqueInput
    create: XOR<QuestionnaireCreateWithoutQuestionsInput, QuestionnaireUncheckedCreateWithoutQuestionsInput>
  }

  export type AnswerOptionCreateWithoutQuestionInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutSelectedAnswerOptionInput
  }

  export type AnswerOptionUncheckedCreateWithoutQuestionInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutSelectedAnswerOptionInput
  }

  export type AnswerOptionCreateOrConnectWithoutQuestionInput = {
    where: AnswerOptionWhereUniqueInput
    create: XOR<AnswerOptionCreateWithoutQuestionInput, AnswerOptionUncheckedCreateWithoutQuestionInput>
  }

  export type AnswerOptionCreateManyQuestionInputEnvelope = {
    data: AnswerOptionCreateManyQuestionInput | AnswerOptionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type UserQuestionAnswerCreateWithoutQuestionInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    answered_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutQuestionAnswersInput
    selectedAnswerOption?: AnswerOptionCreateNestedOneWithoutUserAnswersInput
    userQuestionnaireAttempt: UserQuestionnaireAttemptCreateNestedOneWithoutAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutQuestionInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerCreateOrConnectWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type UserQuestionAnswerCreateManyQuestionInputEnvelope = {
    data: UserQuestionAnswerCreateManyQuestionInput | UserQuestionAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionnaireUpsertWithoutQuestionsInput = {
    update: XOR<QuestionnaireUpdateWithoutQuestionsInput, QuestionnaireUncheckedUpdateWithoutQuestionsInput>
    create: XOR<QuestionnaireCreateWithoutQuestionsInput, QuestionnaireUncheckedCreateWithoutQuestionsInput>
    where?: QuestionnaireWhereInput
  }

  export type QuestionnaireUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: QuestionnaireWhereInput
    data: XOR<QuestionnaireUpdateWithoutQuestionsInput, QuestionnaireUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionnaireUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectLevel?: SubjectLevelUpdateOneRequiredWithoutQuestionnairesNestedInput
    userAttempts?: UserQuestionnaireAttemptUpdateManyWithoutQuestionnaireNestedInput
  }

  export type QuestionnaireUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    subject_level_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutQuestionnaireNestedInput
  }

  export type AnswerOptionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: AnswerOptionWhereUniqueInput
    update: XOR<AnswerOptionUpdateWithoutQuestionInput, AnswerOptionUncheckedUpdateWithoutQuestionInput>
    create: XOR<AnswerOptionCreateWithoutQuestionInput, AnswerOptionUncheckedCreateWithoutQuestionInput>
  }

  export type AnswerOptionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: AnswerOptionWhereUniqueInput
    data: XOR<AnswerOptionUpdateWithoutQuestionInput, AnswerOptionUncheckedUpdateWithoutQuestionInput>
  }

  export type AnswerOptionUpdateManyWithWhereWithoutQuestionInput = {
    where: AnswerOptionScalarWhereInput
    data: XOR<AnswerOptionUpdateManyMutationInput, AnswerOptionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type AnswerOptionScalarWhereInput = {
    AND?: AnswerOptionScalarWhereInput | AnswerOptionScalarWhereInput[]
    OR?: AnswerOptionScalarWhereInput[]
    NOT?: AnswerOptionScalarWhereInput | AnswerOptionScalarWhereInput[]
    id?: StringFilter<"AnswerOption"> | string
    text?: StringFilter<"AnswerOption"> | string
    is_correct?: BoolFilter<"AnswerOption"> | boolean
    order?: IntNullableFilter<"AnswerOption"> | number | null
    question_id?: StringFilter<"AnswerOption"> | string
    created_at?: DateTimeFilter<"AnswerOption"> | Date | string
    updated_at?: DateTimeFilter<"AnswerOption"> | Date | string
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutQuestionInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutQuestionInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionCreateWithoutAnswerOptionsInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    questionnaire: QuestionnaireCreateNestedOneWithoutQuestionsInput
    userAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutAnswerOptionsInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
    userAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutAnswerOptionsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutAnswerOptionsInput, QuestionUncheckedCreateWithoutAnswerOptionsInput>
  }

  export type UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    answered_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutQuestionAnswersInput
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    userQuestionnaireAttempt: UserQuestionnaireAttemptCreateNestedOneWithoutAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    question_id: string
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerCreateOrConnectWithoutSelectedAnswerOptionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput>
  }

  export type UserQuestionAnswerCreateManySelectedAnswerOptionInputEnvelope = {
    data: UserQuestionAnswerCreateManySelectedAnswerOptionInput | UserQuestionAnswerCreateManySelectedAnswerOptionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithoutAnswerOptionsInput = {
    update: XOR<QuestionUpdateWithoutAnswerOptionsInput, QuestionUncheckedUpdateWithoutAnswerOptionsInput>
    create: XOR<QuestionCreateWithoutAnswerOptionsInput, QuestionUncheckedCreateWithoutAnswerOptionsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutAnswerOptionsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutAnswerOptionsInput, QuestionUncheckedUpdateWithoutAnswerOptionsInput>
  }

  export type QuestionUpdateWithoutAnswerOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questionnaire?: QuestionnaireUpdateOneRequiredWithoutQuestionsNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutAnswerOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutSelectedAnswerOptionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedUpdateWithoutSelectedAnswerOptionInput>
    create: XOR<UserQuestionAnswerCreateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedCreateWithoutSelectedAnswerOptionInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutSelectedAnswerOptionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutSelectedAnswerOptionInput, UserQuestionAnswerUncheckedUpdateWithoutSelectedAnswerOptionInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutSelectedAnswerOptionInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutSelectedAnswerOptionInput>
  }

  export type UserCreateWithoutQuestionnaireAttemptsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    api_key: ApiKeyCreateNestedOneWithoutUsersInput
    accounts?: UserAccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionnaireAttemptsInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionnaireAttemptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionnaireAttemptsInput, UserUncheckedCreateWithoutQuestionnaireAttemptsInput>
  }

  export type QuestionnaireCreateWithoutUserAttemptsInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    subjectLevel: SubjectLevelCreateNestedOneWithoutQuestionnairesInput
    questions?: QuestionCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireUncheckedCreateWithoutUserAttemptsInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    subject_level_id: string
    created_at?: Date | string
    updated_at?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionnaireInput
  }

  export type QuestionnaireCreateOrConnectWithoutUserAttemptsInput = {
    where: QuestionnaireWhereUniqueInput
    create: XOR<QuestionnaireCreateWithoutUserAttemptsInput, QuestionnaireUncheckedCreateWithoutUserAttemptsInput>
  }

  export type UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    answered_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutQuestionAnswersInput
    question: QuestionCreateNestedOneWithoutUserAnswersInput
    selectedAnswerOption?: AnswerOptionCreateNestedOneWithoutUserAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    question_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerCreateOrConnectWithoutUserQuestionnaireAttemptInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput>
  }

  export type UserQuestionAnswerCreateManyUserQuestionnaireAttemptInputEnvelope = {
    data: UserQuestionAnswerCreateManyUserQuestionnaireAttemptInput | UserQuestionAnswerCreateManyUserQuestionnaireAttemptInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutQuestionnaireAttemptsInput = {
    update: XOR<UserUpdateWithoutQuestionnaireAttemptsInput, UserUncheckedUpdateWithoutQuestionnaireAttemptsInput>
    create: XOR<UserCreateWithoutQuestionnaireAttemptsInput, UserUncheckedCreateWithoutQuestionnaireAttemptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionnaireAttemptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionnaireAttemptsInput, UserUncheckedUpdateWithoutQuestionnaireAttemptsInput>
  }

  export type UserUpdateWithoutQuestionnaireAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: ApiKeyUpdateOneRequiredWithoutUsersNestedInput
    accounts?: UserAccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionnaireAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionnaireUpsertWithoutUserAttemptsInput = {
    update: XOR<QuestionnaireUpdateWithoutUserAttemptsInput, QuestionnaireUncheckedUpdateWithoutUserAttemptsInput>
    create: XOR<QuestionnaireCreateWithoutUserAttemptsInput, QuestionnaireUncheckedCreateWithoutUserAttemptsInput>
    where?: QuestionnaireWhereInput
  }

  export type QuestionnaireUpdateToOneWithWhereWithoutUserAttemptsInput = {
    where?: QuestionnaireWhereInput
    data: XOR<QuestionnaireUpdateWithoutUserAttemptsInput, QuestionnaireUncheckedUpdateWithoutUserAttemptsInput>
  }

  export type QuestionnaireUpdateWithoutUserAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subjectLevel?: SubjectLevelUpdateOneRequiredWithoutQuestionnairesNestedInput
    questions?: QuestionUpdateManyWithoutQuestionnaireNestedInput
  }

  export type QuestionnaireUncheckedUpdateWithoutUserAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    subject_level_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuestionnaireNestedInput
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutUserQuestionnaireAttemptInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedUpdateWithoutUserQuestionnaireAttemptInput>
    create: XOR<UserQuestionAnswerCreateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedCreateWithoutUserQuestionnaireAttemptInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutUserQuestionnaireAttemptInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutUserQuestionnaireAttemptInput, UserQuestionAnswerUncheckedUpdateWithoutUserQuestionnaireAttemptInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutUserQuestionnaireAttemptInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutUserQuestionnaireAttemptInput>
  }

  export type UserCreateWithoutQuestionAnswersInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    api_key: ApiKeyCreateNestedOneWithoutUsersInput
    accounts?: UserAccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionAnswersInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogUncheckedCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput
    testSelections?: UserTestSelectionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
  }

  export type QuestionCreateWithoutUserAnswersInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    questionnaire: QuestionnaireCreateNestedOneWithoutQuestionsInput
    answerOptions?: AnswerOptionCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutUserAnswersInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
    answerOptions?: AnswerOptionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutUserAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
  }

  export type AnswerOptionCreateWithoutUserAnswersInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    question: QuestionCreateNestedOneWithoutAnswerOptionsInput
  }

  export type AnswerOptionUncheckedCreateWithoutUserAnswersInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    question_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AnswerOptionCreateOrConnectWithoutUserAnswersInput = {
    where: AnswerOptionWhereUniqueInput
    create: XOR<AnswerOptionCreateWithoutUserAnswersInput, AnswerOptionUncheckedCreateWithoutUserAnswersInput>
  }

  export type UserQuestionnaireAttemptCreateWithoutAnswersInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutQuestionnaireAttemptsInput
    questionnaire: QuestionnaireCreateNestedOneWithoutUserAttemptsInput
  }

  export type UserQuestionnaireAttemptUncheckedCreateWithoutAnswersInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    user_id: string
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionnaireAttemptCreateOrConnectWithoutAnswersInput = {
    where: UserQuestionnaireAttemptWhereUniqueInput
    create: XOR<UserQuestionnaireAttemptCreateWithoutAnswersInput, UserQuestionnaireAttemptUncheckedCreateWithoutAnswersInput>
  }

  export type UserUpsertWithoutQuestionAnswersInput = {
    update: XOR<UserUpdateWithoutQuestionAnswersInput, UserUncheckedUpdateWithoutQuestionAnswersInput>
    create: XOR<UserCreateWithoutQuestionAnswersInput, UserUncheckedCreateWithoutQuestionAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionAnswersInput, UserUncheckedUpdateWithoutQuestionAnswersInput>
  }

  export type UserUpdateWithoutQuestionAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: ApiKeyUpdateOneRequiredWithoutUsersNestedInput
    accounts?: UserAccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUncheckedUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionUpsertWithoutUserAnswersInput = {
    update: XOR<QuestionUpdateWithoutUserAnswersInput, QuestionUncheckedUpdateWithoutUserAnswersInput>
    create: XOR<QuestionCreateWithoutUserAnswersInput, QuestionUncheckedCreateWithoutUserAnswersInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutUserAnswersInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutUserAnswersInput, QuestionUncheckedUpdateWithoutUserAnswersInput>
  }

  export type QuestionUpdateWithoutUserAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questionnaire?: QuestionnaireUpdateOneRequiredWithoutQuestionsNestedInput
    answerOptions?: AnswerOptionUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutUserAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOptions?: AnswerOptionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type AnswerOptionUpsertWithoutUserAnswersInput = {
    update: XOR<AnswerOptionUpdateWithoutUserAnswersInput, AnswerOptionUncheckedUpdateWithoutUserAnswersInput>
    create: XOR<AnswerOptionCreateWithoutUserAnswersInput, AnswerOptionUncheckedCreateWithoutUserAnswersInput>
    where?: AnswerOptionWhereInput
  }

  export type AnswerOptionUpdateToOneWithWhereWithoutUserAnswersInput = {
    where?: AnswerOptionWhereInput
    data: XOR<AnswerOptionUpdateWithoutUserAnswersInput, AnswerOptionUncheckedUpdateWithoutUserAnswersInput>
  }

  export type AnswerOptionUpdateWithoutUserAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutAnswerOptionsNestedInput
  }

  export type AnswerOptionUncheckedUpdateWithoutUserAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    question_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionnaireAttemptUpsertWithoutAnswersInput = {
    update: XOR<UserQuestionnaireAttemptUpdateWithoutAnswersInput, UserQuestionnaireAttemptUncheckedUpdateWithoutAnswersInput>
    create: XOR<UserQuestionnaireAttemptCreateWithoutAnswersInput, UserQuestionnaireAttemptUncheckedCreateWithoutAnswersInput>
    where?: UserQuestionnaireAttemptWhereInput
  }

  export type UserQuestionnaireAttemptUpdateToOneWithWhereWithoutAnswersInput = {
    where?: UserQuestionnaireAttemptWhereInput
    data: XOR<UserQuestionnaireAttemptUpdateWithoutAnswersInput, UserQuestionnaireAttemptUncheckedUpdateWithoutAnswersInput>
  }

  export type UserQuestionnaireAttemptUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionnaireAttemptsNestedInput
    questionnaire?: QuestionnaireUpdateOneRequiredWithoutUserAttemptsNestedInput
  }

  export type UserQuestionnaireAttemptUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutTestSelectionsInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    api_key: ApiKeyCreateNestedOneWithoutUsersInput
    accounts?: UserAccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTestSelectionsInput = {
    id?: string
    api_key_id: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
    accounts?: UserAccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auth_logs?: AuthLogUncheckedCreateNestedManyWithoutUserInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedCreateNestedManyWithoutUserInput
    questionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTestSelectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTestSelectionsInput, UserUncheckedCreateWithoutTestSelectionsInput>
  }

  export type TestTypeCreateWithoutUserTestSelectionInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    api_key?: ApiKeyCreateNestedOneWithoutTest_typesInput
    testSubjects?: TestSubjectCreateNestedManyWithoutTest_typeInput
  }

  export type TestTypeUncheckedCreateWithoutUserTestSelectionInput = {
    id?: string
    name: string
    description?: string | null
    api_key_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    testSubjects?: TestSubjectUncheckedCreateNestedManyWithoutTest_typeInput
  }

  export type TestTypeCreateOrConnectWithoutUserTestSelectionInput = {
    where: TestTypeWhereUniqueInput
    create: XOR<TestTypeCreateWithoutUserTestSelectionInput, TestTypeUncheckedCreateWithoutUserTestSelectionInput>
  }

  export type UserUpsertWithoutTestSelectionsInput = {
    update: XOR<UserUpdateWithoutTestSelectionsInput, UserUncheckedUpdateWithoutTestSelectionsInput>
    create: XOR<UserCreateWithoutTestSelectionsInput, UserUncheckedCreateWithoutTestSelectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTestSelectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTestSelectionsInput, UserUncheckedUpdateWithoutTestSelectionsInput>
  }

  export type UserUpdateWithoutTestSelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    api_key?: ApiKeyUpdateOneRequiredWithoutUsersNestedInput
    accounts?: UserAccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTestSelectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    api_key_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUncheckedUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TestTypeUpsertWithoutUserTestSelectionInput = {
    update: XOR<TestTypeUpdateWithoutUserTestSelectionInput, TestTypeUncheckedUpdateWithoutUserTestSelectionInput>
    create: XOR<TestTypeCreateWithoutUserTestSelectionInput, TestTypeUncheckedCreateWithoutUserTestSelectionInput>
    where?: TestTypeWhereInput
  }

  export type TestTypeUpdateToOneWithWhereWithoutUserTestSelectionInput = {
    where?: TestTypeWhereInput
    data: XOR<TestTypeUpdateWithoutUserTestSelectionInput, TestTypeUncheckedUpdateWithoutUserTestSelectionInput>
  }

  export type TestTypeUpdateWithoutUserTestSelectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    api_key?: ApiKeyUpdateOneWithoutTest_typesNestedInput
    testSubjects?: TestSubjectUpdateManyWithoutTest_typeNestedInput
  }

  export type TestTypeUncheckedUpdateWithoutUserTestSelectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    api_key_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    testSubjects?: TestSubjectUncheckedUpdateManyWithoutTest_typeNestedInput
  }

  export type ApiKeyCreateManyApp_userInput = {
    id?: string
    key: string
    name: string
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
  }

  export type AppSessionCreateManyApp_userInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type AuthEventCreateManyApp_userInput = {
    id?: string
    event_type: string
    ip_address?: string | null
    user_agent?: string | null
    created_at?: Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApiKeyUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutApi_keyNestedInput
    test_types?: TestTypeUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUpdateManyWithoutApi_keyNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutApi_keyNestedInput
    test_types?: TestTypeUncheckedUpdateManyWithoutApi_keyNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutApi_keyNestedInput
  }

  export type ApiKeyUncheckedUpdateManyWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppSessionUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppSessionUncheckedUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppSessionUncheckedUpdateManyWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthEventUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventUncheckedUpdateWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuthEventUncheckedUpdateManyWithoutApp_userInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    additional_info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserCreateManyApi_keyInput = {
    id?: string
    email: string
    username: string
    password_hash: string
    name?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    email_verified?: boolean
    email_verified_at?: Date | string | null
    reset_token?: string | null
    reset_token_expires?: Date | string | null
    ip_address?: string | null
    user_agent?: string | null
  }

  export type TestTypeCreateManyApi_keyInput = {
    id?: string
    name: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubjectCreateManyApi_keyInput = {
    id?: string
    name: string
    description: string
    slug_materia: string
    approximate_total_minutes: number
    total_questions: number
    order: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: UserAccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auth_logs?: AuthLogUncheckedUpdateManyWithoutUserNestedInput
    questionnaireAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserNestedInput
    questionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    testSelections?: UserTestSelectionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reset_token?: NullableStringFieldUpdateOperationsInput | string | null
    reset_token_expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TestTypeUpdateWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    testSubjects?: TestSubjectUpdateManyWithoutTest_typeNestedInput
    UserTestSelection?: UserTestSelectionUpdateManyWithoutTestTypeNestedInput
  }

  export type TestTypeUncheckedUpdateWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    testSubjects?: TestSubjectUncheckedUpdateManyWithoutTest_typeNestedInput
    UserTestSelection?: UserTestSelectionUncheckedUpdateManyWithoutTestTypeNestedInput
  }

  export type TestTypeUncheckedUpdateManyWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUpdateWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_detail?: SubjectDetailUpdateOneWithoutSubjectNestedInput
    subject_levels?: SubjectLevelUpdateManyWithoutSubjectNestedInput
    testSubjects?: TestSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_detail?: SubjectDetailUncheckedUpdateOneWithoutSubjectNestedInput
    subject_levels?: SubjectLevelUncheckedUpdateManyWithoutSubjectNestedInput
    testSubjects?: TestSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutApi_keyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug_materia?: StringFieldUpdateOperationsInput | string
    approximate_total_minutes?: IntFieldUpdateOperationsInput | number
    total_questions?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAccountCreateManyUserInput = {
    id?: string
    account_id: string
    created_at?: Date | string
    created_by?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    refresh_token?: string | null
    ip_address?: string | null
    user_agent?: string | null
    expires_at: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    revoked?: boolean
    revoked_at?: Date | string | null
  }

  export type AuthLogCreateManyUserInput = {
    id?: string
    event_type: $Enums.AuthEventType
    status: $Enums.AuthEventStatus
    ip_address?: string | null
    user_agent?: string | null
    details?: string | null
    created_at?: Date | string
  }

  export type UserQuestionnaireAttemptCreateManyUserInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    questionnaire_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerCreateManyUserInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    question_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserTestSelectionCreateManyUserInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    test_type_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserAccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    account?: AccountUpdateOneRequiredWithoutUser_accountsNestedInput
  }

  export type UserAccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    account_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    revoked?: BoolFieldUpdateOperationsInput | boolean
    revoked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: EnumAuthEventTypeFieldUpdateOperationsInput | $Enums.AuthEventType
    status?: EnumAuthEventStatusFieldUpdateOperationsInput | $Enums.AuthEventStatus
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: EnumAuthEventTypeFieldUpdateOperationsInput | $Enums.AuthEventType
    status?: EnumAuthEventStatusFieldUpdateOperationsInput | $Enums.AuthEventStatus
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    event_type?: EnumAuthEventTypeFieldUpdateOperationsInput | $Enums.AuthEventType
    status?: EnumAuthEventStatusFieldUpdateOperationsInput | $Enums.AuthEventStatus
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionnaireAttemptUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questionnaire?: QuestionnaireUpdateOneRequiredWithoutUserAttemptsNestedInput
    answers?: UserQuestionAnswerUpdateManyWithoutUserQuestionnaireAttemptNestedInput
  }

  export type UserQuestionnaireAttemptUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserQuestionnaireAttemptNestedInput
  }

  export type UserQuestionnaireAttemptUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    questionnaire_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    selectedAnswerOption?: AnswerOptionUpdateOneWithoutUserAnswersNestedInput
    userQuestionnaireAttempt?: UserQuestionnaireAttemptUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    question_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    question_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestSelectionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    testType?: TestTypeUpdateOneRequiredWithoutUserTestSelectionNestedInput
  }

  export type UserTestSelectionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    test_type_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestSelectionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    test_type_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserAccountCreateManyAccountInput = {
    id?: string
    user_id: string
    created_at?: Date | string
    created_by?: string | null
  }

  export type UserAccountUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type UserAccountUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAccountUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TestSubjectCreateManyTest_typeInput = {
    subject_id: string
    assigned_at?: Date | string
    subject_order_in_test?: number | null
  }

  export type UserTestSelectionCreateManyTestTypeInput = {
    id?: string
    is_active?: boolean
    selected_at?: Date | string
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TestSubjectUpdateWithoutTest_typeInput = {
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
    subject?: SubjectUpdateOneRequiredWithoutTestSubjectsNestedInput
  }

  export type TestSubjectUncheckedUpdateWithoutTest_typeInput = {
    subject_id?: StringFieldUpdateOperationsInput | string
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TestSubjectUncheckedUpdateManyWithoutTest_typeInput = {
    subject_id?: StringFieldUpdateOperationsInput | string
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserTestSelectionUpdateWithoutTestTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTestSelectionsNestedInput
  }

  export type UserTestSelectionUncheckedUpdateWithoutTestTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTestSelectionUncheckedUpdateManyWithoutTestTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    selected_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectLevelCreateManySubjectInput = {
    id?: string
    reference_title?: string | null
    title: string
    order: number
    number_of_questions: number
    approximate_time_minutes: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TestSubjectCreateManySubjectInput = {
    test_type_id: string
    assigned_at?: Date | string
    subject_order_in_test?: number | null
  }

  export type SubjectLevelUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questionnaires?: QuestionnaireUpdateManyWithoutSubjectLevelNestedInput
  }

  export type SubjectLevelUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questionnaires?: QuestionnaireUncheckedUpdateManyWithoutSubjectLevelNestedInput
  }

  export type SubjectLevelUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference_title?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    number_of_questions?: IntFieldUpdateOperationsInput | number
    approximate_time_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestSubjectUpdateWithoutSubjectInput = {
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
    test_type?: TestTypeUpdateOneRequiredWithoutTestSubjectsNestedInput
  }

  export type TestSubjectUncheckedUpdateWithoutSubjectInput = {
    test_type_id?: StringFieldUpdateOperationsInput | string
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TestSubjectUncheckedUpdateManyWithoutSubjectInput = {
    test_type_id?: StringFieldUpdateOperationsInput | string
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subject_order_in_test?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionnaireCreateManySubjectLevelInput = {
    id?: string
    name: string
    description?: string | null
    order?: number | null
    published?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type QuestionnaireUpdateWithoutSubjectLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuestionnaireNestedInput
    userAttempts?: UserQuestionnaireAttemptUpdateManyWithoutQuestionnaireNestedInput
  }

  export type QuestionnaireUncheckedUpdateWithoutSubjectLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuestionnaireNestedInput
    userAttempts?: UserQuestionnaireAttemptUncheckedUpdateManyWithoutQuestionnaireNestedInput
  }

  export type QuestionnaireUncheckedUpdateManyWithoutSubjectLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlossaryTermCreateManyCategoryInput = {
    id?: string
    word: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    active?: boolean
  }

  export type GlossaryTermUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GlossaryTermUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GlossaryTermUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionCreateManyQuestionnaireInput = {
    id?: string
    text: string
    question_type: $Enums.QuestionType
    explanation?: string | null
    extra_info?: string | null
    points?: number
    order?: number | null
    difficulty?: number | null
    tags?: string | null
    active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionnaireAttemptCreateManyQuestionnaireInput = {
    id?: string
    score?: number | null
    status: $Enums.AttemptStatus
    started_at?: Date | string
    completed_at?: Date | string | null
    time_spent_seconds?: number | null
    correct_answers_count?: number | null
    total_questions_count?: number | null
    attempt_number?: number
    user_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type QuestionUpdateWithoutQuestionnaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOptions?: AnswerOptionUpdateManyWithoutQuestionNestedInput
    userAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutQuestionnaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    answerOptions?: AnswerOptionUncheckedUpdateManyWithoutQuestionNestedInput
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionnaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    question_type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    extra_info?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: NullableIntFieldUpdateOperationsInput | number | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionnaireAttemptUpdateWithoutQuestionnaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionnaireAttemptsNestedInput
    answers?: UserQuestionAnswerUpdateManyWithoutUserQuestionnaireAttemptNestedInput
  }

  export type UserQuestionnaireAttemptUncheckedUpdateWithoutQuestionnaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: UserQuestionAnswerUncheckedUpdateManyWithoutUserQuestionnaireAttemptNestedInput
  }

  export type UserQuestionnaireAttemptUncheckedUpdateManyWithoutQuestionnaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumAttemptStatusFieldUpdateOperationsInput | $Enums.AttemptStatus
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    time_spent_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    correct_answers_count?: NullableIntFieldUpdateOperationsInput | number | null
    total_questions_count?: NullableIntFieldUpdateOperationsInput | number | null
    attempt_number?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerOptionCreateManyQuestionInput = {
    id?: string
    text: string
    is_correct: boolean
    order?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerCreateManyQuestionInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AnswerOptionUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswers?: UserQuestionAnswerUpdateManyWithoutSelectedAnswerOptionNestedInput
  }

  export type AnswerOptionUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutSelectedAnswerOptionNestedInput
  }

  export type AnswerOptionUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
    selectedAnswerOption?: AnswerOptionUpdateOneWithoutUserAnswersNestedInput
    userQuestionnaireAttempt?: UserQuestionnaireAttemptUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateManySelectedAnswerOptionInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    question_id: string
    answered_text?: string | null
    user_questionnaire_attempt_id: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerUpdateWithoutSelectedAnswerOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    userQuestionnaireAttempt?: UserQuestionnaireAttemptUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutSelectedAnswerOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutSelectedAnswerOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    user_questionnaire_attempt_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateManyUserQuestionnaireAttemptInput = {
    id?: string
    is_correct?: boolean | null
    answered_at?: Date | string
    time_to_answer_seconds?: number | null
    points_earned?: number | null
    user_id: string
    question_id: string
    selected_answer_option_id?: string | null
    answered_text?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserQuestionAnswerUpdateWithoutUserQuestionnaireAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutQuestionAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutUserAnswersNestedInput
    selectedAnswerOption?: AnswerOptionUpdateOneWithoutUserAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutUserQuestionnaireAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserQuestionnaireAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    answered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to_answer_seconds?: NullableIntFieldUpdateOperationsInput | number | null
    points_earned?: NullableFloatFieldUpdateOperationsInput | number | null
    user_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    selected_answer_option_id?: NullableStringFieldUpdateOperationsInput | string | null
    answered_text?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}