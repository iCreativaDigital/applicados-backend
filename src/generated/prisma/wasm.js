
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AppUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password_hash: 'password_hash',
  name: 'name',
  company_name: 'company_name',
  phone: 'phone',
  website: 'website',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email_verified: 'email_verified',
  email_verified_at: 'email_verified_at',
  reset_token: 'reset_token',
  reset_token_expires: 'reset_token_expires'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  key: 'key',
  name: 'name',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_used_at: 'last_used_at',
  expires_at: 'expires_at'
};

exports.Prisma.AppSessionScalarFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  token: 'token',
  refresh_token: 'refresh_token',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  revoked: 'revoked',
  revoked_at: 'revoked_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  api_key_id: 'api_key_id',
  email: 'email',
  username: 'username',
  password_hash: 'password_hash',
  name: 'name',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email_verified: 'email_verified',
  email_verified_at: 'email_verified_at',
  reset_token: 'reset_token',
  reset_token_expires: 'reset_token_expires',
  ip_address: 'ip_address',
  user_agent: 'user_agent'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  api_key: 'api_key',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserAccountScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  account_id: 'account_id',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  token: 'token',
  refresh_token: 'refresh_token',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  revoked: 'revoked',
  revoked_at: 'revoked_at'
};

exports.Prisma.AuthLogScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  event_type: 'event_type',
  status: 'status',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  details: 'details',
  created_at: 'created_at'
};

exports.Prisma.EmailVerificationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  token: 'token',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  used: 'used'
};

exports.Prisma.AuthEventScalarFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  event_type: 'event_type',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at',
  additional_info: 'additional_info'
};

exports.Prisma.TestTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  api_key_id: 'api_key_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug_materia: 'slug_materia',
  approximate_total_minutes: 'approximate_total_minutes',
  total_questions: 'total_questions',
  order: 'order',
  api_key_id: 'api_key_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SubjectDetailScalarFieldEnum = {
  id: 'id',
  background_image_url: 'background_image_url',
  title: 'title',
  title_color: 'title_color',
  subtitle: 'subtitle',
  primary_color_hex: 'primary_color_hex',
  created_at: 'created_at',
  updated_at: 'updated_at',
  subject_id: 'subject_id'
};

exports.Prisma.SubjectLevelScalarFieldEnum = {
  id: 'id',
  reference_title: 'reference_title',
  title: 'title',
  order: 'order',
  number_of_questions: 'number_of_questions',
  approximate_time_minutes: 'approximate_time_minutes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  subject_id: 'subject_id'
};

exports.Prisma.TestSubjectScalarFieldEnum = {
  test_type_id: 'test_type_id',
  subject_id: 'subject_id',
  assigned_at: 'assigned_at',
  subject_order_in_test: 'subject_order_in_test'
};

exports.Prisma.GlossaryCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  active: 'active'
};

exports.Prisma.GlossaryTermScalarFieldEnum = {
  id: 'id',
  word: 'word',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  active: 'active',
  category_id: 'category_id'
};

exports.Prisma.QuestionnaireScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  order: 'order',
  published: 'published',
  subject_level_id: 'subject_level_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  question_type: 'question_type',
  explanation: 'explanation',
  extra_info: 'extra_info',
  points: 'points',
  order: 'order',
  difficulty: 'difficulty',
  tags: 'tags',
  active: 'active',
  questionnaire_id: 'questionnaire_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AnswerOptionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  is_correct: 'is_correct',
  order: 'order',
  question_id: 'question_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserQuestionnaireAttemptScalarFieldEnum = {
  id: 'id',
  score: 'score',
  status: 'status',
  started_at: 'started_at',
  completed_at: 'completed_at',
  time_spent_seconds: 'time_spent_seconds',
  correct_answers_count: 'correct_answers_count',
  total_questions_count: 'total_questions_count',
  attempt_number: 'attempt_number',
  user_id: 'user_id',
  questionnaire_id: 'questionnaire_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserQuestionAnswerScalarFieldEnum = {
  id: 'id',
  is_correct: 'is_correct',
  answered_at: 'answered_at',
  time_to_answer_seconds: 'time_to_answer_seconds',
  points_earned: 'points_earned',
  user_id: 'user_id',
  question_id: 'question_id',
  selected_answer_option_id: 'selected_answer_option_id',
  answered_text: 'answered_text',
  user_questionnaire_attempt_id: 'user_questionnaire_attempt_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserTestSelectionScalarFieldEnum = {
  id: 'id',
  is_active: 'is_active',
  selected_at: 'selected_at',
  user_id: 'user_id',
  test_type_id: 'test_type_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AppUserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password_hash: 'password_hash',
  name: 'name',
  company_name: 'company_name',
  phone: 'phone',
  website: 'website',
  reset_token: 'reset_token'
};

exports.Prisma.ApiKeyOrderByRelevanceFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  key: 'key',
  name: 'name'
};

exports.Prisma.AppSessionOrderByRelevanceFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  token: 'token',
  refresh_token: 'refresh_token',
  ip_address: 'ip_address',
  user_agent: 'user_agent'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  api_key_id: 'api_key_id',
  email: 'email',
  username: 'username',
  password_hash: 'password_hash',
  name: 'name',
  reset_token: 'reset_token',
  ip_address: 'ip_address',
  user_agent: 'user_agent'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  api_key: 'api_key'
};

exports.Prisma.UserAccountOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  account_id: 'account_id',
  created_by: 'created_by'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  token: 'token',
  refresh_token: 'refresh_token',
  ip_address: 'ip_address',
  user_agent: 'user_agent'
};

exports.Prisma.AuthLogOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  details: 'details'
};

exports.Prisma.EmailVerificationOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token'
};

exports.Prisma.PasswordResetOrderByRelevanceFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  token: 'token'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.AuthEventOrderByRelevanceFieldEnum = {
  id: 'id',
  app_user_id: 'app_user_id',
  event_type: 'event_type',
  ip_address: 'ip_address',
  user_agent: 'user_agent'
};

exports.Prisma.TestTypeOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  api_key_id: 'api_key_id'
};

exports.Prisma.SubjectOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug_materia: 'slug_materia',
  api_key_id: 'api_key_id'
};

exports.Prisma.SubjectDetailOrderByRelevanceFieldEnum = {
  id: 'id',
  background_image_url: 'background_image_url',
  title: 'title',
  title_color: 'title_color',
  subtitle: 'subtitle',
  primary_color_hex: 'primary_color_hex',
  subject_id: 'subject_id'
};

exports.Prisma.SubjectLevelOrderByRelevanceFieldEnum = {
  id: 'id',
  reference_title: 'reference_title',
  title: 'title',
  subject_id: 'subject_id'
};

exports.Prisma.TestSubjectOrderByRelevanceFieldEnum = {
  test_type_id: 'test_type_id',
  subject_id: 'subject_id'
};

exports.Prisma.GlossaryCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.GlossaryTermOrderByRelevanceFieldEnum = {
  id: 'id',
  word: 'word',
  description: 'description',
  category_id: 'category_id'
};

exports.Prisma.QuestionnaireOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject_level_id: 'subject_level_id'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  explanation: 'explanation',
  extra_info: 'extra_info',
  tags: 'tags',
  questionnaire_id: 'questionnaire_id'
};

exports.Prisma.AnswerOptionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  question_id: 'question_id'
};

exports.Prisma.UserQuestionnaireAttemptOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  questionnaire_id: 'questionnaire_id'
};

exports.Prisma.UserQuestionAnswerOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  question_id: 'question_id',
  selected_answer_option_id: 'selected_answer_option_id',
  answered_text: 'answered_text',
  user_questionnaire_attempt_id: 'user_questionnaire_attempt_id'
};

exports.Prisma.UserTestSelectionOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  test_type_id: 'test_type_id'
};
exports.AuthEventType = exports.$Enums.AuthEventType = {
  REGISTER: 'REGISTER',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PASSWORD_RESET_REQUEST: 'PASSWORD_RESET_REQUEST',
  PASSWORD_RESET: 'PASSWORD_RESET',
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  TOKEN_REFRESH: 'TOKEN_REFRESH',
  ACCOUNT_LOCK: 'ACCOUNT_LOCK',
  ACCOUNT_UNLOCK: 'ACCOUNT_UNLOCK'
};

exports.AuthEventStatus = exports.$Enums.AuthEventStatus = {
  SUCCESS: 'SUCCESS',
  FAILURE: 'FAILURE'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  MULTIPLE_CHOICE_SINGLE: 'MULTIPLE_CHOICE_SINGLE',
  MULTIPLE_CHOICE_MULTIPLE: 'MULTIPLE_CHOICE_MULTIPLE',
  TRUE_FALSE: 'TRUE_FALSE'
};

exports.AttemptStatus = exports.$Enums.AttemptStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  PASSED: 'PASSED',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  AppUser: 'AppUser',
  ApiKey: 'ApiKey',
  AppSession: 'AppSession',
  User: 'User',
  Account: 'Account',
  UserAccount: 'UserAccount',
  Session: 'Session',
  AuthLog: 'AuthLog',
  EmailVerification: 'EmailVerification',
  PasswordReset: 'PasswordReset',
  AuthEvent: 'AuthEvent',
  TestType: 'TestType',
  Subject: 'Subject',
  SubjectDetail: 'SubjectDetail',
  SubjectLevel: 'SubjectLevel',
  TestSubject: 'TestSubject',
  GlossaryCategory: 'GlossaryCategory',
  GlossaryTerm: 'GlossaryTerm',
  Questionnaire: 'Questionnaire',
  Question: 'Question',
  AnswerOption: 'AnswerOption',
  UserQuestionnaireAttempt: 'UserQuestionnaireAttempt',
  UserQuestionAnswer: 'UserQuestionAnswer',
  UserTestSelection: 'UserTestSelection'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
