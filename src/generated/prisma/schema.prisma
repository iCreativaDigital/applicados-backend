// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Usuario de la aplicación (los que solicitan el servicio y generan API Keys)
model AppUser {
  id                  String    @id @default(uuid())
  email               String    @unique
  username            String    @unique // Nombre de usuario único para inicio de sesión
  password_hash       String
  name                String?
  company_name        String?
  phone               String?
  website             String?
  active              Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  email_verified      Boolean   @default(false)
  email_verified_at   DateTime?
  reset_token         String? // Token para recuperación de contraseña
  reset_token_expires DateTime? // Fecha de expiración del token

  // Relaciones
  api_keys        ApiKey[] // API Keys generadas por este usuario
  app_sessions    AppSession[] // Sesiones del usuario de la aplicación
  password_resets PasswordReset? // Solicitudes de restablecimiento de contraseña
  auth_events     AuthEvent[] // Eventos de autenticación
}

// API Keys generadas por los usuarios de la aplicación
model ApiKey {
  id           String    @id @default(uuid())
  app_user_id  String // ID del usuario de la aplicación que generó la API Key
  key          String    @unique // La API Key en sí
  name         String // Nombre descriptivo para la API Key
  active       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  last_used_at DateTime?
  expires_at   DateTime?

  // Relaciones
  app_user AppUser @relation(fields: [app_user_id], references: [id], onDelete: Cascade)
  users    User[] // Usuarios creados con esta API Key

  @@index([app_user_id])
}

// Sesiones de los usuarios de la aplicación
model AppSession {
  id            String    @id @default(uuid())
  app_user_id   String
  token         String    @unique // Token de sesión (JWT)
  refresh_token String?   @unique // Token de refresco (opcional)
  ip_address    String? // Dirección IP desde donde se inició sesión
  user_agent    String? // Navegador/dispositivo usado
  expires_at    DateTime // Fecha de expiración
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  revoked       Boolean   @default(false) // Si la sesión ha sido revocada
  revoked_at    DateTime? // Cuándo fue revocada

  // Relaciones
  app_user AppUser @relation(fields: [app_user_id], references: [id], onDelete: Cascade)

  @@index([app_user_id])
}

// Modelo de usuarios que se autentican mediante la API
model User {
  id                  String    @id @default(uuid())
  api_key_id          String // ID de la API Key con la que se creó este usuario
  email               String
  username            String // Nombre de usuario para inicio de sesión
  password_hash       String
  name                String?
  active              Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  email_verified      Boolean   @default(false)
  email_verified_at   DateTime?
  reset_token         String? // Token para recuperación de contraseña
  reset_token_expires DateTime? // Fecha de expiración del token
  ip_address          String?
  user_agent          String?

  // Relaciones
  api_key   ApiKey        @relation(fields: [api_key_id], references: [id])
  accounts  UserAccount[] // Cuentas a las que tiene acceso
  sessions  Session[] // Sesiones activas
  auth_logs AuthLog[] // Logs de autenticación

  @@unique([email, api_key_id]) // Un email debe ser único para cada API Key
  @@unique([username, api_key_id]) // Un username debe ser único para cada API Key
  @@index([api_key_id])
}

// Cuentas o aplicaciones que usan el sistema
model Account {
  id         String   @id @default(uuid())
  name       String // Nombre de la cuenta o aplicación
  api_key    String   @unique // Clave API para identificar la aplicación
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  user_accounts UserAccount[] // Usuarios con acceso a esta cuenta
}

// Relación entre usuarios y cuentas
model UserAccount {
  id         String   @id @default(uuid())
  user_id    String
  account_id String
  created_at DateTime @default(now())
  created_by String? // ID del usuario que creó la relación

  // Relaciones
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@unique([user_id, account_id]) // Un usuario no puede estar asociado a la misma cuenta más de una vez
  @@index([user_id])
  @@index([account_id])
}

// Sesiones activas
model Session {
  id            String    @id @default(uuid())
  user_id       String
  token         String    @unique // Token de sesión (JWT)
  refresh_token String?   @unique // Token de refresco (opcional)
  ip_address    String? // Dirección IP desde donde se inició sesión
  user_agent    String? // Navegador/dispositivo usado
  expires_at    DateTime // Fecha de expiración
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  revoked       Boolean   @default(false) // Si la sesión ha sido revocada
  revoked_at    DateTime? // Cuándo fue revocada

  // Relaciones
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

// Logs de autenticación
model AuthLog {
  id         String          @id @default(uuid())
  user_id    String? // Puede ser nulo si el intento de login falló
  event_type AuthEventType // Tipo de evento (login, logout, etc.)
  status     AuthEventStatus // Éxito o fracaso
  ip_address String? // Dirección IP
  user_agent String? // Navegador/dispositivo
  details    String?         @db.Text // Detalles adicionales (JSON)
  created_at DateTime        @default(now())

  // Relaciones
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([event_type])
  @@index([status])
  @@index([created_at])
}

// Verificación de email
model EmailVerification {
  id         String   @id @default(uuid())
  email      String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([email])
  @@index([token])
}

// Restablecimiento de contraseña
model PasswordReset {
  id          String   @id @default(uuid())
  app_user_id String   @unique
  token       String   @unique
  expires_at  DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  used        Boolean  @default(false)

  // Relaciones
  app_user AppUser @relation(fields: [app_user_id], references: [id], onDelete: Cascade)

  @@index([token])
}

// Eventos de autenticación
model AuthEvent {
  id          String   @id @default(uuid())
  app_user_id String
  event_type  String // Tipo de evento (login, logout, password_reset, etc.)
  ip_address  String? // Dirección IP
  user_agent  String? // Navegador/dispositivo
  details     String?  @db.Text // Detalles adicionales (JSON)
  created_at  DateTime @default(now())

  // Relaciones
  app_user AppUser @relation(fields: [app_user_id], references: [id], onDelete: Cascade)

  @@index([app_user_id])
  @@index([event_type])
  @@index([created_at])
}

// Enumeraciones
enum AuthEventType {
  REGISTER
  LOGIN
  LOGOUT
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TOKEN_REFRESH
  ACCOUNT_LOCK
  ACCOUNT_UNLOCK
}

enum AuthEventStatus {
  SUCCESS
  FAILURE
}
