// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Usuario de la aplicación (los que solicitan el servicio y generan API Keys)
model AppUser {
  id                  String    @id @default(uuid())
  email               String    @unique
  username            String    @unique // Nombre de usuario único para inicio de sesión
  password_hash       String
  name                String?
  company_name        String?
  phone               String?
  website             String?
  active              Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  email_verified      Boolean   @default(false)
  email_verified_at   DateTime?
  reset_token         String? // Token para recuperación de contraseña
  reset_token_expires DateTime? // Fecha de expiración del token

  // Relaciones
  api_keys        ApiKey[] // API Keys generadas por este usuario
  app_sessions    AppSession[] // Sesiones del usuario de la aplicación
  password_resets PasswordReset? // Solicitudes de restablecimiento de contraseña
  auth_events     AuthEvent[] // Eventos de autenticación
}

// API Keys generadas por los usuarios de la aplicación
model ApiKey {
  id           String    @id @default(uuid())
  app_user_id  String // ID del usuario de la aplicación que generó la API Key
  key          String    @unique // La API Key en sí
  name         String // Nombre descriptivo para la API Key
  active       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  last_used_at DateTime?
  expires_at   DateTime?

  // Relaciones
  app_user   AppUser    @relation(fields: [app_user_id], references: [id], onDelete: Cascade)
  users      User[] // Usuarios creados con esta API Key
  test_types TestType[] // Tipos de prueba asociados a esta API Key
  subjects   Subject[] // Materias asociadas a esta API Key

  @@index([app_user_id])
}

// Sesiones de los usuarios de la aplicación
model AppSession {
  id            String    @id @default(uuid())
  app_user_id   String
  token         String    @unique // Token de sesión (JWT)
  refresh_token String?   @unique // Token de refresco (opcional)
  ip_address    String? // Dirección IP desde donde se inició sesión
  user_agent    String? // Navegador/dispositivo usado
  expires_at    DateTime // Fecha de expiración
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  revoked       Boolean   @default(false) // Si la sesión ha sido revocada
  revoked_at    DateTime? // Cuándo fue revocada

  // Relaciones
  app_user AppUser @relation(fields: [app_user_id], references: [id], onDelete: Cascade)

  @@index([app_user_id])
}

// Modelo de usuarios que se autentican mediante la API
model User {
  id                  String    @id @default(uuid())
  api_key_id          String // ID de la API Key con la que se creó este usuario
  email               String
  username            String // Nombre de usuario para inicio de sesión
  password_hash       String
  name                String?
  active              Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  email_verified      Boolean   @default(false)
  email_verified_at   DateTime?
  reset_token         String? // Token para recuperación de contraseña
  reset_token_expires DateTime? // Fecha de expiración del token
  ip_address          String?
  user_agent          String?

  // Relaciones
  api_key               ApiKey                     @relation(fields: [api_key_id], references: [id])
  accounts              UserAccount[] // Cuentas a las que tiene acceso
  sessions              Session[] // Sesiones activas
  auth_logs             AuthLog[] // Logs de autenticación
  questionnaireAttempts UserQuestionnaireAttempt[] // Intentos de cuestionarios realizados por el usuario
  questionAnswers       UserQuestionAnswer[] // Respuestas a preguntas individuales
  testSelections        UserTestSelection[] // Tipos de pruebas seleccionadas por el usuario

  @@unique([email, api_key_id]) // Un email debe ser único para cada API Key
  @@unique([username, api_key_id]) // Un username debe ser único para cada API Key
  @@index([api_key_id])
}

// Cuentas o aplicaciones que usan el sistema
model Account {
  id         String   @id @default(uuid())
  name       String // Nombre de la cuenta o aplicación
  api_key    String   @unique // Clave API para identificar la aplicación
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  user_accounts UserAccount[] // Usuarios con acceso a esta cuenta
}

// Relación entre usuarios y cuentas
model UserAccount {
  id         String   @id @default(uuid())
  user_id    String
  account_id String
  created_at DateTime @default(now())
  created_by String? // ID del usuario que creó la relación

  // Relaciones
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@unique([user_id, account_id]) // Un usuario no puede estar asociado a la misma cuenta más de una vez
  @@index([user_id])
  @@index([account_id])
}

// Sesiones activas
model Session {
  id            String    @id @default(uuid())
  user_id       String
  token         String    @unique @db.VarChar(1000) // Token de sesión (JWT)
  refresh_token String?   @unique @db.VarChar(1000) // Token de refresco (opcional)
  ip_address    String? // Dirección IP desde donde se inició sesión
  user_agent    String? // Navegador/dispositivo usado
  expires_at    DateTime // Fecha de expiración
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  revoked       Boolean   @default(false) // Si la sesión ha sido revocada
  revoked_at    DateTime? // Cuándo fue revocada

  // Relaciones
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

// Logs de autenticación
model AuthLog {
  id         String          @id @default(uuid())
  user_id    String? // Puede ser nulo si el intento de login falló
  event_type AuthEventType // Tipo de evento (login, logout, etc.)
  status     AuthEventStatus // Éxito o fracaso
  ip_address String? // Dirección IP
  user_agent String? // Navegador/dispositivo
  details    String?         @db.Text // Detalles adicionales (JSON)
  created_at DateTime        @default(now())

  // Relaciones
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([event_type])
  @@index([status])
  @@index([created_at])
}

// Verificación de email
model EmailVerification {
  id         String   @id @default(uuid())
  email      String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([email])
  @@index([token])
}

// Restablecimiento de contraseña
model PasswordReset {
  id          String   @id @default(uuid())
  app_user_id String   @unique
  token       String   @unique
  expires_at  DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  used        Boolean  @default(false)

  // Relaciones
  app_user AppUser @relation(fields: [app_user_id], references: [id], onDelete: Cascade)

  @@index([token])
}

// Eventos de autenticación
model AuthEvent {
  id              String   @id @default(uuid())
  app_user_id     String
  event_type      String // login, logout, password_reset, etc.
  ip_address      String?
  user_agent      String?
  created_at      DateTime @default(now())
  additional_info Json?

  app_user AppUser @relation(fields: [app_user_id], references: [id], onDelete: Cascade)

  @@index([app_user_id])
  @@index([event_type])
  @@index([created_at])
}

// Enumeraciones
enum AuthEventType {
  REGISTER
  LOGIN
  LOGOUT
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TOKEN_REFRESH
  ACCOUNT_LOCK
  ACCOUNT_UNLOCK
}

enum AuthEventStatus {
  SUCCESS
  FAILURE
}

// Tipos de Pruebas (ej. Saber 11, Presaber)
model TestType {
  id          String  @id @default(uuid())
  name        String // Nombre de la prueba, ej: "Saber 11", "Presaber"
  description String? // Descripción opcional de la prueba
  api_key_id  String? // ID de la API Key asociada (opcional para compatibilidad con datos existentes)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  api_key           ApiKey?             @relation(fields: [api_key_id], references: [id], onDelete: SetNull)
  testSubjects      TestSubject[] // Relación a la tabla de unión TestSubject
  UserTestSelection UserTestSelection[]

  // Índice compuesto para garantizar que el nombre sea único por API Key (o globalmente si no hay API Key)
  @@unique([name, api_key_id])
  // Índice para mejorar el rendimiento de las consultas por api_key_id
  @@index([api_key_id])
}

// Materias (ej. Matemáticas, Lectura Crítica)
model Subject {
  id                        String  @id @default(uuid())
  name                      String // Nombre de la materia, ej: "Matemáticas", "Lectura Crítica"
  description               String // Descripción de la materia, puede contener HTML enriquecido
  slug_materia              String  @unique // Slug para URLs amigables, ej: "matematicas-saber-11"
  approximate_total_minutes Int // Número total de minutos estimado para completar todos los niveles
  total_questions           Int // Número total de preguntas en todos los niveles
  order                     Int // Orden de aparición en el frontend
  api_key_id                String? // ID de la API Key asociada (opcional)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  api_key        ApiKey?        @relation(fields: [api_key_id], references: [id], onDelete: SetNull)
  subject_detail SubjectDetail?
  subject_levels SubjectLevel[]
  testSubjects   TestSubject[] // Relación a la tabla de unión TestSubject

  // Índices y restricciones
  @@unique([name, api_key_id]) // Nombre único por API Key
  @@index([api_key_id])
}

// Detalles visuales y de presentación para una materia
model SubjectDetail {
  id                   String  @id @default(uuid())
  background_image_url String? // URL de la imagen de fondo
  title                String // Título a mostrar en la vista de detalle
  title_color          String? // Color para el título, ej: "#FFFFFF"
  subtitle             String? // Subtítulo para la vista de detalle
  primary_color_hex    String? // Color principal en formato hexadecimal, ej: "#4A90E2"

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relación uno a uno con Subject
  subject_id String  @unique // Clave foránea para Subject
  subject    Subject @relation(fields: [subject_id], references: [id], onDelete: Cascade)
}

// Niveles de una materia
model SubjectLevel {
  id                       String  @id @default(uuid())
  reference_title          String? // Título de referencia descriptivo
  title                    String // Título corto del nivel
  order                    Int // Orden de aparición dentro de su materia
  number_of_questions      Int // Número de preguntas estimadas
  approximate_time_minutes Int // Tiempo estimado en minutos

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relación con Subject
  subject_id String // Clave foránea para Subject
  subject    Subject @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  // Relación con Questionnaire
  questionnaires Questionnaire[] // Un nivel puede tener varios cuestionarios

  // Índices
  @@index([subject_id])
}

// Tabla de unión entre TestType y Subject
model TestSubject {
  test_type_id          String // Parte de la clave primaria compuesta
  subject_id            String // Parte de la clave primaria compuesta
  assigned_at           DateTime @default(now()) // Cuándo se asignó esta materia a esta prueba
  subject_order_in_test Int? // Orden de la materia específico para cada prueba (opcional)

  // Relaciones
  test_type TestType @relation(fields: [test_type_id], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  // Clave primaria compuesta
  @@id([test_type_id, subject_id])
}

// Tipos de preguntas
enum QuestionType {
  MULTIPLE_CHOICE_SINGLE // Opción múltiple, una respuesta correcta
  MULTIPLE_CHOICE_MULTIPLE // Opción múltiple, varias respuestas correctas
  TRUE_FALSE
}

// Estados de intento
enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  PASSED
  FAILED
}

// Categorías del glosario
model GlossaryCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  active      Boolean  @default(true)

  // Relaciones
  terms GlossaryTerm[]
}

// Términos del glosario
model GlossaryTerm {
  id          String   @id @default(uuid())
  word        String   @unique
  description String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  active      Boolean  @default(true)

  // Relaciones
  category_id String
  category    GlossaryCategory @relation(fields: [category_id], references: [id])

  @@index([category_id])
}

// Questionnaire (Cuestionario)
// Representa un conjunto de preguntas, usualmente asociado a un SubjectLevel.
model Questionnaire {
  id          String  @id @default(uuid())
  name        String // Nombre del cuestionario, ej: "Diagnóstico Álgebra Nivel 1"
  description String? // Descripción opcional del cuestionario
  order       Int? // Orden del cuestionario dentro de un nivel (si un nivel tiene varios)
  published   Boolean @default(false) // Si el cuestionario está disponible para los usuarios

  subject_level_id String // A qué nivel de materia pertenece
  subjectLevel     SubjectLevel @relation(fields: [subject_level_id], references: [id], onDelete: Cascade)

  questions    Question[] // Un cuestionario tiene muchas preguntas
  userAttempts UserQuestionnaireAttempt[] // Intentos realizados por usuarios en este cuestionario

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([subject_level_id])
  @@index([published]) // Índice para filtrar por estado de publicación
}

// Question (Pregunta)
// Define una pregunta individual dentro de un cuestionario.

model Question {
  id            String       @id @default(uuid())
  text          String // El enunciado de la pregunta (puede ser HTML si usas TipTap aquí también)
  question_type QuestionType // Tipo de pregunta (ej. opción múltiple, verdadero/falso)
  explanation   String? // Explicación que se muestra después de responder
  extra_info    String? // Información adicional para ayudar al estudiante (HTML, videos incrustados, etc.)
  points        Int          @default(1) // Puntos por respuesta correcta
  order         Int? // Orden de la pregunta dentro del cuestionario
  difficulty    Int?         @default(1) // Nivel de dificultad (1-5)
  tags          String? // Etiquetas separadas por comas para categorizar preguntas
  active        Boolean      @default(true) // Si la pregunta está activa o no

  questionnaire_id String // A qué cuestionario pertenece
  questionnaire    Questionnaire @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade)

  answerOptions AnswerOption[] // Una pregunta tiene varias opciones de respuesta
  userAnswers   UserQuestionAnswer[] // Respuestas de los usuarios a esta pregunta

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([questionnaire_id])
  @@index([active])
  @@index([difficulty])
  @@index([question_type])
}

// AnswerOption (Opción de Respuesta)
// Define una opción de respuesta para una pregunta (especialmente útil para opción múltiple).

model AnswerOption {
  id         String  @id @default(uuid())
  text       String // Texto de la opción de respuesta
  is_correct Boolean // Indica si esta opción es la correcta (o una de las correctas)
  order      Int? // Orden de la opción dentro de la pregunta

  question_id String // A qué pregunta pertenece esta opción
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  userAnswers UserQuestionAnswer[] // Para rastrear si esta opción fue seleccionada

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([question_id])
}

// Modelos de Progreso del Usuario
// Estos modelos rastrearán cómo los usuarios interactúan con los cuestionarios y las preguntas.

// UserQuestionnaireAttempt (Intento de Cuestionario por Usuario)
// Registra un intento completo de un usuario en un cuestionario.

model UserQuestionnaireAttempt {
  id                    String        @id @default(uuid())
  score                 Float? // Puntuación obtenida en el intento
  status                AttemptStatus // Estado del intento (ej. COMPLETADO, APROBADO)
  started_at            DateTime      @default(now())
  completed_at          DateTime? // Cuándo se completó el intento
  time_spent_seconds    Int? // Tiempo total empleado en segundos
  correct_answers_count Int? // Número de respuestas correctas
  total_questions_count Int? // Número total de preguntas respondidas
  attempt_number        Int           @default(1) // Número de intento (1 para el primer intento, 2 para el segundo, etc.)

  user_id String // Qué usuario realizó el intento
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  questionnaire_id String // Qué cuestionario se intentó
  questionnaire    Questionnaire @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade)

  answers UserQuestionAnswer[] // Respuestas dadas durante este intento

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([questionnaire_id])
  @@index([user_id, questionnaire_id]) // Para buscar intentos de un usuario en un cuestionario específico
  @@index([status]) // Para filtrar por estado
  @@index([completed_at]) // Para ordenar por fecha de finalización
}

// UserQuestionAnswer (Respuesta de Usuario a Pregunta)
// Registra la respuesta específica de un usuario a una pregunta dentro de un intento de cuestionario.

model UserQuestionAnswer {
  id                     String   @id @default(uuid())
  is_correct             Boolean? // Si la respuesta dada fue correcta
  answered_at            DateTime @default(now())
  time_to_answer_seconds Int? // Tiempo que tardó en responder en segundos
  points_earned          Float? // Puntos obtenidos por esta respuesta

  user_id String // Qué usuario respondió
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  question_id String // Qué pregunta se respondió
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  // Para opción múltiple, cuál opción se seleccionó
  selected_answer_option_id String?
  selectedAnswerOption      AnswerOption? @relation(fields: [selected_answer_option_id], references: [id], onDelete: SetNull)

  // Para rellenar huecos o respuestas abiertas
  answered_text String?

  // A qué intento de cuestionario pertenece esta respuesta
  user_questionnaire_attempt_id String
  userQuestionnaireAttempt      UserQuestionnaireAttempt @relation(fields: [user_questionnaire_attempt_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_questionnaire_attempt_id, question_id]) // Un usuario solo debe tener una respuesta por pregunta en un intento específico
  @@index([user_id])
  @@index([question_id])
  @@index([selected_answer_option_id])
  @@index([user_questionnaire_attempt_id])
}

// Modelo de Selección de Prueba del Usuario
// UserTestSelection (Selección de Prueba del Usuario)
// Para guardar qué prueba(s) está preparando activamente un usuario.

model UserTestSelection {
  id          String   @id @default(uuid())
  is_active   Boolean  @default(true) // Si esta es la selección activa (si permites varias)
  selected_at DateTime @default(now()) // Cuándo se seleccionó/comenzó a preparar

  user_id String // Qué usuario
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  test_type_id String // Qué tipo de prueba
  testType     TestType @relation(fields: [test_type_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Un usuario puede estar "inscrito" o preparando un tipo de prueba una sola vez
  @@unique([user_id, test_type_id])
  @@index([user_id])
  @@index([test_type_id])
  @@index([is_active]) // Índice para consultas filtradas por estado activo
}
